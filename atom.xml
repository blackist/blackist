<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>董亮亮的开发笔记</title>
  
  <subtitle>安卓和后台开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blackist.org/"/>
  <updated>2019-06-29T13:53:18.287Z</updated>
  <id>https://blackist.org/</id>
  
  <author>
    <name>董亮亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中&#39;==&#39; 和 equals()</title>
    <link href="https://blackist.org/2019/06/27/java-oo-equals/"/>
    <id>https://blackist.org/2019/06/27/java-oo-equals/</id>
    <published>2019-06-27T04:51:59.000Z</published>
    <updated>2019-06-29T13:53:18.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“判断两个事物是否相等”，是编程中最常见的操作之一，在Java中，判断是否相等有两种方法，一种是使用“==”判断符，另一种是使用“equals()”方法，你是否曾因混用二者导致不可思议的bug？本篇文章将带你深入二者背后的判断原理。</p><a id="more"></a><h1 id="相等判断符”-”"><a href="#相等判断符”-”" class="headerlink" title="相等判断符”==”"></a>相等判断符”==”</h1><blockquote><p>“==”相等判断符用于比较基本数据类型和引用类型数据。当比较基本数据类型的时候比较的是数值，当比较引用类型数据时比较的是引用(指针)。</p></blockquote><h2 id="“-”判断基本类型数据"><a href="#“-”判断基本类型数据" class="headerlink" title="“==”判断基本类型数据"></a>“==”判断基本类型数据</h2><p>基本数据类型指的是Java中的八大数据类型：byte，short，int，long，float，double，char，boolean。</p><p>这八大基本数据类型有个共同的特点是它们在内存中是有具体值的, 比如说一个 int 类型的数据”2”，它在8位数据总线的机器上保存形式为 0000 0010。（8位机器是假设的）</p><p>当使用 == 比较两个基本数据类型的时候, 就是在比较它们各自在内存中的值。</p><p>为了照顾到要刨根问底的同学，再补充一下两个数值是怎么比较的：cpu 在比较的时候会将两个值作差，然后查看标志寄存器。标志寄存器存放的是运算的结果，里面有一个是否为0的标志位，如果该位为1，证明二者之差为0，二者相等。</p><h2 id="“-”判断引用类型数据"><a href="#“-”判断引用类型数据" class="headerlink" title="“==”判断引用类型数据"></a>“==”判断引用类型数据</h2><p>引用数据类型在字面上也是很好理解的, 它就是一个引用, 指向堆内存中一个具体的对象。</p><p>比如说<code>Student stu = new Student();</code> 这里的 stu 就是一个引用，它指向的是当前 new 出来的 <strong>Student</strong> 对象. 当我们想要操作这个 <strong>Student</strong> 对象时, 只需要操作引用即可, 比如说<code>int age = stu.getAge();</code>。</p><p>所以用”==”判断两个引用数据类型是否相等的时候，实际上是在判断两个引用<strong>是否指向同一个对象</strong>。</p><p>看下面的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s1 = &quot;hello&quot;;    //s1指向字符串常量池中的&quot;hello&quot;字符串对象</span><br><span class="line">    String s2 = &quot;hello&quot;;    //s2也指向字符串常量池中的&quot;hello&quot;字符串对象</span><br><span class="line">    System.out.println(s1 == s2);   //true</span><br><span class="line"></span><br><span class="line">    String s3 = new String(&quot;hello&quot;);   //s3指向的是堆内存中的字符串对象 </span><br><span class="line">    System.out.println(s1 == s3);    //false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子可以看到，由于引用”s1”和”s2”指向的都是常量池中的”hello”字符串，所以返回true。（后面我会发布一篇详细讲述Java字符串的文章，涉及字符串初始化和字符串常量池等知识）</p><p>而”s3”指向的是新创建字符串对象，因为只要动用了<code>new</code>关键字, 就会在堆内存创建一个新的对象。</p><p>也就是说 s1 和 s3 指向的是不同的字符串对象，所以返回false。</p><h1 id="相等判断方法equals"><a href="#相等判断方法equals" class="headerlink" title="相等判断方法equals()"></a>相等判断方法equals()</h1><blockquote><p>equals()和 == 有着本质的区别，== 可以看作是对“操作系统比较数据手段”的封装，而equals()则是每个对象自带的比较方法，它是Java自定义的比较规则。</p></blockquote><p>equals()和 == 的本质区别更通俗的说法是：==的比较规则是定死的，就是比较两个数据的值。</p><p>而 equals() 的比较规则是不固定的，可以由用户自己定义。</p><p>看下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s1 = &quot;hello&quot;;</span><br><span class="line">    String s3 = new String(&quot;hello&quot;);    </span><br><span class="line">    System.out.println(s1.equals(s3));    //true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回想前面的案例：用 == 比较的时候, 上面 s1 和 s3 比较出的结果为false。而当用 equals() 比较的时候，得出的结果为 true。</p><p>想知道原因我们还得看源码，下面是 String 类中的 equals() 方法的源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    if (this == anObject) &#123;    //先比较两个字符串的引用是否相等(是否指向同一个对象), 是直接返回true</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;    //两个引用不等还会继续比较</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length) &#123;</span><br><span class="line">            char v1[] = value;    //字符串类是用字符数组实现的, 先要拿到两个字符串的字符数组</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            while (n-- != 0) &#123;    //然后对两个数组逐个字符地进行比较</span><br><span class="line">                if (v1[i] != v2[i])</span><br><span class="line">                    return false;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码可以看到, 当调用 String 类型数据的 equals() 方法时，首先会判断两个字符串的引用是否相等，也就是说两个字符串引用是否指向同一个对象，是则返回true。</p><p>如果不是指向同一个对象，则把两个字符串中的字符挨个进行比较。由于 s1 和 s3 字符串都是 “hello”，是可以匹配成功的，所以最终返回 true。</p><h3 id="HashMap中containsKey-的实现"><a href="#HashMap中containsKey-的实现" class="headerlink" title="HashMap中containsKey()的实现"></a>HashMap<string, object>中containsKey()的实现</string,></h3><p>比较的是key的hash code和参数字符串的hash code。</p><h1 id="思考：为什么要设计equals-方法"><a href="#思考：为什么要设计equals-方法" class="headerlink" title="思考：为什么要设计equals()方法?"></a>思考：为什么要设计equals()方法?</h1><p>通过上面的讲解，相信你已经知道 == 和 equals() 的区别了：一个的比较规则是定死的，一个是可以由编程人员自己定义的。</p><p>可是为什么会有 equals() 方法, 而且还可以被自由定制呢?</p><p>这个问题要落到Java语言的核心 —— 面向对象思想了。</p><p>Java 不同于面向过程的C语言，Java是一款面向对象的高级语言。如果是面向过程编程，直接操作内存上存储的数据的话，用 == 所定义的规则来判断两个数据是否相等已经足够了。</p><p>而Java中万物皆对象，我们经常要面临的问题是这两个对象是否相等，而不是这两串二进制数是否相等，仅有 == 是完全不够用的。</p><p>由于Java程序员们会创建各种满足它们业务需求的对象，<strong>系统无法提前知道两个对象在什么条件下算相等，Java干脆把判断对象是否相等的权力交给编程人员</strong>。</p><p>具体的措施是：所有的类都必须继承 Object 类，而 Object 类中写有equals()方法。编程人员可以通过重写 equals() 方法来实现自己的比较策略，也可以不重写，使用Object类的equals()比较策略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Object类中的equals()方法源码</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    return (this == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 Object 类的 equals() 源码可以看到，如果编程人员没有显示地重写 equals() 方法，则默认比较两个引用是否指向同一个对象。</p><blockquote><p>补充: 关于基本数据类型包装类的比较</p></blockquote><p>由于 Java 中万物皆对象，就连基本数据类型也有其对应的包装类，那么它们对应的比较策略是什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int a = 3;</span><br><span class="line">    Integer b = new Integer(3);</span><br><span class="line">    System.out.println(b.equals(a));    //true, 自动装箱</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到尽管两个引用不同, 但是输出的结果仍为 true, 证明 Integer 包装类重写了 equals() 方法，追踪其源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Integer类中的equals方法</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    if (obj instanceof Integer) &#123;</span><br><span class="line">        return value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码看到，基本类型包装类在重写equals()后，比较的还是基本数据类型的值。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>通过探索 == 和 equals() 的区别，我们摸清楚了二者别后的比较策略，同时也对 Java 中 equals() 方法的设计进行了思考，相信大家在今后的 Java 编程实战中不会再为相等判断而烦恼了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc" target="_blank" rel="noopener"><a href="https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc</a></a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“判断两个事物是否相等”，是编程中最常见的操作之一，在Java中，判断是否相等有两种方法，一种是使用“==”判断符，另一种是使用“equals()”方法，你是否曾因混用二者导致不可思议的bug？本篇文章将带你深入二者背后的判断原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="面向对象" scheme="https://blackist.org/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hash在Java中的应用</title>
    <link href="https://blackist.org/2019/06/26/java-hash/"/>
    <id>https://blackist.org/2019/06/26/java-hash/</id>
    <published>2019-06-26T06:07:15.000Z</published>
    <updated>2019-06-29T13:53:18.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>雅虎的 Chief Scientist ，Udi Manber 曾说过，在 yahoo 所应用的算法中，最重要的三个是：Hash，Hash 和 Hash。其实从上文中所举的git用sha1判断文件更改，密码用MD5生成摘要后加盐等等对Hash的应用可看出，Hash的在计算机世界扮演着多么重要的角色。</p><a id="more"></a><h3 id="1-HashMap的复杂度"><a href="#1-HashMap的复杂度" class="headerlink" title="1 HashMap的复杂度"></a>1 HashMap的复杂度</h3><p>在介绍HashMap的实现之前，先考虑一下，HashMap与ArrayList和LinkedList在数据复杂度上有什么区别。下图是他们的性能对比图：</p><table><thead><tr><th>获取</th><th>查找</th><th>添加/删除</th><th>空间</th><th></th></tr></thead><tbody><tr><td>ArrayList</td><td>O(1)</td><td>O(1)</td><td>O(N)</td><td>O(N)</td></tr><tr><td>LinkedList</td><td>O(N)</td><td>O(N)</td><td>O(1)</td><td>O(N)</td></tr><tr><td>HashMap</td><td>O(N/Bucket_size)</td><td>O(N/Bucket_size)</td><td>O(N/Bucket_size)</td><td>O(N)</td></tr></tbody></table><p>可以看出HashMap整体上性能都非常不错，但是不稳定，为O(N/Buckets)，N就是以数组中没有发生碰撞的元素，Buckets是因碰撞产生的链表。</p><blockquote><p>注：发生碰撞实际上是非常稀少的，所以N/Bucket_size约等于1</p></blockquote><p>HashMap是对Array与Link的折衷处理，Array与Link可以说是两个速度方向的极端，Array注重于数据的获取，而处理修改（添加/删除）的效率非常低；Link由于是每个对象都保持着下一个对象的指针，查找某个数据需要遍历之前所有的数据，所以效率比较低，而在修改操作中比较快。</p><h3 id="2-HashMap的实现"><a href="#2-HashMap的实现" class="headerlink" title="2 HashMap的实现"></a>2 HashMap的实现</h3><p>本文以JDK8的API实现进行分析</p><h4 id="2-1-对key进行Hash计算"><a href="#2-1-对key进行Hash计算" class="headerlink" title="2.1 对key进行Hash计算"></a>2.1 对key进行Hash计算</h4><p>在JDK8中，由于使用了红黑树来处理大的链表开销，所以hash这边可以更加省力了，只用计算hashCode并移动到低位就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    //计算hashCode，并无符号移动到低位</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子: 363771819^(363771819 &gt;&gt;&gt; 16)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0001 0101 1010 1110 1011 0111 1010 1011(363771819)</span><br><span class="line">0000 0000 0000 0000 0001 0101 1010 1110(5550) XOR</span><br><span class="line">--------------------------------------- =</span><br><span class="line">0001 0101 1010 1110 1010 0010 0000 0101(363766277)</span><br></pre></td></tr></table></figure><p>这样做可以实现了高地位更加均匀地混到一起。</p><p>下面给出在Java中几个常用的哈希码(hashCode)的算法。</p><ol><li>Object类的hashCode. 返回对象的经过处理后的内存地址，由于每个对象的内存地址都不一样，所以哈希码也不一样。这个是native方法，取决于JVM的内部设计，一般是某种C地址的偏移。</li><li>String类的hashCode. 根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串的内容相同，返回的哈希码也相同。</li><li>Integer等包装类，返回的哈希码就是Integer对象里所包含的那个整数的数值，例如Integer i1=new Integer(100), i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。</li><li>int，char这样的基础类，它们不需要hashCode，如果需要存储时，将进行自动装箱操作，计算方法同上。</li></ol><h4 id="2-2-获取到数组的index的位置"><a href="#2-2-获取到数组的index的位置" class="headerlink" title="2.2  获取到数组的index的位置"></a>2.2  获取到数组的index的位置</h4><p>计算了Hash，我们现在要把它插入数组中了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = (tab.length - 1) &amp; hash；</span><br></pre></td></tr></table></figure><p>通过位运算，确定了当前的位置，因为HashMap数组的大小总是2^n，所以实际的运算就是 (0xfff…ff) &amp; hash ，这里的tab.length-1相当于一个mask，滤掉了大于当前长度位的hash，使每个i都能插入到数组中。</p><h4 id="2-3-生成包装类"><a href="#2-3-生成包装类" class="headerlink" title="2.3 生成包装类"></a>2.3 生成包装类</h4><p>这个对象是一个包装类，Node<k,v>，内部有key,value,hash还有next，可以看出来它是一个链表。</k,v></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        final int hash;</span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        //getter and setter .etc.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-插入包装类到数组"><a href="#2-4-插入包装类到数组" class="headerlink" title="2.4  插入包装类到数组"></a>2.4  插入包装类到数组</h4><p>(1). 如果输入当前的位置是空的，就插进去，如图，左为插入前，右为插入后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0           0</span><br><span class="line">|           |</span><br><span class="line">1 -&gt; null   1 - &gt; null</span><br><span class="line">|           |</span><br><span class="line">2 -&gt; null   2 - &gt; null</span><br><span class="line">|           | </span><br><span class="line">..-&gt; null   ..- &gt; null</span><br><span class="line">|           | </span><br><span class="line">i -&gt; null   i - &gt; new node</span><br><span class="line">|           |</span><br><span class="line">n -&gt; null   n - &gt; null</span><br></pre></td></tr></table></figure><p>(2). 如果当前位置已经有了node，且它们发生了碰撞，则新的放到前面，旧的放到后面，这叫做链地址法处理冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0           0</span><br><span class="line">|           |</span><br><span class="line">1 -&gt; null   1 - &gt; null</span><br><span class="line">|           |</span><br><span class="line">2 -&gt; null   2 - &gt; null</span><br><span class="line">|           | </span><br><span class="line">..-&gt; null   ..- &gt; null</span><br><span class="line">|           | </span><br><span class="line">i -&gt; old    i - &gt; new - &gt; old</span><br><span class="line">|           |</span><br><span class="line">n -&gt; null   n - &gt; null</span><br></pre></td></tr></table></figure><p>我们可以发现，失败的hashCode算法会导致HashMap的性能由数组下降为链表，所以想要避免发生碰撞，就要提高hashCode结果的均匀性。</p><h3 id="3-扩容"><a href="#3-扩容" class="headerlink" title="3 扩容"></a>3 扩容</h3><p>如果当表中的75%已经被占用，即视为需要扩容了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(threshold = capacity * load factor ) &lt; size</span><br></pre></td></tr></table></figure><p>它主要有两个步骤：</p><h4 id="3-1-容量加倍"><a href="#3-1-容量加倍" class="headerlink" title="3.1 容量加倍"></a>3.1 容量加倍</h4><p>左移1位，就是扩大到两倍，用位运算取代了乘法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newCap = oldCap &lt;&lt; 1;</span><br><span class="line">newThr = oldThr &lt;&lt; 1;</span><br></pre></td></tr></table></figure><h4 id="3-2-遍历计算Hash"><a href="#3-2-遍历计算Hash" class="headerlink" title="3.2 遍历计算Hash"></a>3.2 遍历计算Hash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        //如果发现当前有Bucket</span><br><span class="line">        if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">            oldTab[j] = null;</span><br><span class="line">            //如果这里没有碰撞</span><br><span class="line">            if (e.next == null)</span><br><span class="line">                //重新计算Hash，分配位置</span><br><span class="line">                newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">            //这个见下面的新特性介绍，如果是树，就填入树</span><br><span class="line">            else if (e instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">            //如果是链表，就保留顺序....目前就看懂这点</span><br><span class="line">            else &#123; // preserve order</span><br><span class="line">                Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                Node&lt;K,V&gt; next;</span><br><span class="line">                do &#123;</span><br><span class="line">                    next = e.next;</span><br><span class="line">                    if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                        if (loTail == null)</span><br><span class="line">                            loHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            loTail.next = e;</span><br><span class="line">                        loTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (hiTail == null)</span><br><span class="line">                            hiHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            hiTail.next = e;</span><br><span class="line">                        hiTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; while ((e = next) != null);</span><br><span class="line">                if (loTail != null) &#123;</span><br><span class="line">                    loTail.next = null;</span><br><span class="line">                    newTab[j] = loHead;</span><br><span class="line">                &#125;</span><br><span class="line">                if (hiTail != null) &#123;</span><br><span class="line">                    hiTail.next = null;</span><br><span class="line">                    newTab[j + oldCap] = hiHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由此可以看出扩容需要遍历并重新赋值，成本非常高，所以选择一个好的初始容量非常重要。</p><h3 id="4-扩容如何提升性能？"><a href="#4-扩容如何提升性能？" class="headerlink" title="4 扩容如何提升性能？"></a>4 扩容如何提升性能？</h3><ul><li>解决扩容损失：如果知道大致需要的容量，把初始容量设置好以解决扩容损失；<br> 比如我现在有1000个数据，需要 1000/0.75 = 1333 个坑位，又 1024 &lt; 1333 &lt; 2048，所以最好使用2048作为初始容量。</li><li>解决碰撞损失：使用高效的HashCode与loadFactor，这个…由于JDK8的高性能出现，这儿问题也不大了。</li></ul><h3 id="5-HashMap与HashTable的主要区别"><a href="#5-HashMap与HashTable的主要区别" class="headerlink" title="5 HashMap与HashTable的主要区别"></a>5 HashMap与HashTable的主要区别</h3><p>在很多的Java基础书上都已经说过了，他们的主要区别其实就是Table全局加了线程同步保护</p><ul><li>HashTable线程更加安全，代价就是因为它粗暴的添加了同步锁，所以会有性能损失。</li><li>其实有更好的concurrentHashMap可以替代HashTable，一个是方法级，一个是Class级。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/bf1d7eee28d0" target="_blank" rel="noopener">https://www.jianshu.com/p/bf1d7eee28d0</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;雅虎的 Chief Scientist ，Udi Manber 曾说过，在 yahoo 所应用的算法中，最重要的三个是：Hash，Hash 和 Hash。其实从上文中所举的git用sha1判断文件更改，密码用MD5生成摘要后加盐等等对Hash的应用可看出，Hash的在计算机世界扮演着多么重要的角色。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="hash" scheme="https://blackist.org/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>校友录设计</title>
    <link href="https://blackist.org/2019/06/23/javaweb-ar-introduce/"/>
    <id>https://blackist.org/2019/06/23/javaweb-ar-introduce/</id>
    <published>2019-06-23T09:11:19.000Z</published>
    <updated>2019-06-30T15:43:00.236Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。</p><a id="more"></a><p>项目地址：<a href="https://github.com/blackist/ar" target="_blank" rel="noopener">https://github.com/blackist/ar</a></p><p><strong>摘要</strong></p><p>校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。然而目前我校并没有一个系统可以追溯毕业生的情况。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，同时也能够让院校充分了解毕业生的就业状况。</p><p>为了给校友们的提供一个了解母校动态的平台，本设计首先确定以毕业生以及高校为主要用户对象，采用目前业内流行的SpringMVC+Spring+MyBatis轻量级JavaEE框架，用Maven构建和管理，开发基于B/S结构的校友录系统。其次，通过系统建模对系统的各项功能进行了分析，确定了校友录系统的功能模块，并阐述了数据库的设计过程。再次对系统的功能模块进行了详细的设计，并对系统功能模块的界面进行了展示。最后对论文所阐述的内容进行总结，并分析了校友录系统对毕业生和院校带来的便利。</p><p>校友录系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、对本校毕业生招聘信息的推送。为满足院校和毕业生的需求，校友录系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块、职业招聘模块、校园服务模块。</p><p>校友录系统不仅能够很好地满足校友了解母校、校友动态的需求，也提供职业招聘、校园服务功能，使院校能够更好地了解毕业生就业情况、为毕业生提供就业服务。</p><p><strong>关键词</strong> 毕业；校友录；就业；JavaEE</p><p><strong>Abstract</strong></p><p>Youth is the best time in life, and this period of youth spent in the university will undoubtedly become the most valuable memories of our lives.Although time goes by fast, university life, the impressive community, the memorable alumni, the unforgettable teaching building, will be a subsequent stream of water in the memories. After graduation, we left school, along with the alumni miss and the alma mater’s attention. Thus, alumni desire for a platform to follow the news of alma mater, the status of alumni, and the dynamics of the group that they have joined.</p><p>​    In order to provide a sustenance for alumni’s emotions, this design, taking graduates and colleges as the main user object, using the current industry-popular SpringMVC + Spring + MyBatis lightweight JavaEE framework, develops the computer-based web pages Version of the simple and elegant Alumni Record System ( AR), built and managed by Maven.</p><p>​    AR is designed after a full investigation and analysis is conducted in the teachers, students and institutions. Alumni pay more attention to the school news, class dynamics, alumni information, community students and other groups. Institutions concern more about the graduates’ employment situation, new enrollment situation and delivery of recruit information about school graduates. AR designs the news center module, class record module, alumni organization module and alumni forum module. And album function is added into the class record and alumni organization, which aims to meet the needs of alumni better. At the same time, AR includes professional recruitment module, campus service module, so that institutions can understand the employment situation of graduates and help graduates better.</p><p>AR system not only can meet alumni to understand the alma mater, alumni dynamic needs, but also provide professional recruitment, campus service function, so that institutions can better understand the employment situation of graduates, to provide employment services for graduates.</p><p><strong>Keywords</strong>  graduation  alumni-record  employment  javaee</p><p><strong>目</strong>       <strong>录</strong></p><p><a href="#_Toc482890209">摘要… I</a></p><p><a href="#_Toc482890210">Abstract II</a></p><p><a href="#_Toc482890211">1 绪论… 1</a></p><p><a href="#_Toc482890212">1.1 课题背景… 1</a></p><p><a href="#_Toc482890213">1.2 课题意义… 1</a></p><p><a href="#_Toc482890214">1.3 课题内容… 1</a></p><p><a href="#_Toc482890215">1.4 论文的组织结构… 1</a></p><p><a href="#_Toc482890216">2 系统需求分析… 3</a></p><p><a href="#_Toc482890217">2.1 需求分析… 3</a></p><p><a href="#_Toc482890218">2.2 功能分析… 4</a></p><p><a href="#_Toc482890219">2.2.1 院校新闻发布功能… 4</a></p><p><a href="#_Toc482890220">2.2.2 班级管理功能… 5</a></p><p><a href="#_Toc482890221">3.2.3 院校组织管理功能… 6</a></p><p><a href="#_Toc482890222">3.2.4 校友论坛功能… 6</a></p><p><a href="#_Toc482890223">3.2.5 院校职业招聘功能… 7</a></p><p><a href="#_Toc482890224">3.2.6 校园服务功能… 7</a></p><p><a href="#_Toc482890225">3.2.7 用户个人中心功能… 8</a></p><p><a href="#_Toc482890226">2.4 技术路线… 9</a></p><p><a href="#_Toc482890227">3 系统总体设计… 11</a></p><p><a href="#_Toc482890228">3.1 系统总体设计… 11</a></p><p><a href="#_Toc482890229">3.1.1 系统登录… 11</a></p><p><a href="#_Toc482890230">3.1.2 新闻中心… 11</a></p><p><a href="#_Toc482890231">3.1.3 班级录… 11</a></p><p><a href="#_Toc482890232">3.1.4 校友组织… 11</a></p><p><a href="#_Toc482890233">3.1.5 校友论坛… 11</a></p><p><a href="#_Toc482890234">3.1.6 职位招聘… 12</a></p><p><a href="#_Toc482890235">3.1.7 校园服务… 12</a></p><p><a href="#_Toc482890236">3.1.8 个人中心… 12</a></p><p><a href="#_Toc482890237">3.2 系统功能设计… 12</a></p><p><a href="#_Toc482890238">3.2.1 新闻中心… 12</a></p><p><a href="#_Toc482890239">3.2.2 班记录… 13</a></p><p><a href="#_Toc482890240">3.2.3 校友组织… 14</a></p><p><a href="#_Toc482890241">3.2.4 校友论坛… 14</a></p><p><a href="#_Toc482890242">3.2.5 职业招聘… 15</a></p><p><a href="#_Toc482890243">3.2.6 校园服务… 16</a></p><p><a href="#_Toc482890244">3.2.8 个人中心… 16</a></p><p><a href="#_Toc482890245">3.3 数据库设计… 17</a></p><p><a href="#_Toc482890246">3.3.1 概念模型设计… 17</a></p><p><a href="#_Toc482890247">3.3.2 逻辑结构设计… 25</a></p><p><a href="#_Toc482890248">4 系统详细设计… 37</a></p><p><a href="#_Toc482890249">4.1 班级录… 37</a></p><p><a href="#_Toc482890250">4.1.1 班级首页… 38</a></p><p><a href="#_Toc482890251">4.1.2 班级动态… 40</a></p><p><a href="#_Toc482890252">4.1.3 班级通讯录… 42</a></p><p><a href="#_Toc482890253">4.1.4 班级相册… 43</a></p><p><a href="#_Toc482890254">4.2 职业招聘… 44</a></p><p><a href="#_Toc482890255">4.2.1 发布招聘… 44</a></p><p><a href="#_Toc482890256">4.2.2 查询招聘… 45</a></p><p><a href="#_Toc482890257">4.2.3 招聘详情… 46</a></p><p><a href="#_Toc482890258">4.2.4 投递简历… 47</a></p><p><a href="#_Toc482890259">4.3 校友论坛… 48</a></p><p><a href="#_Toc482890260">4.3.1 论坛广场… 48</a></p><p><a href="#_Toc482890261">4.3.2 发布新帖… 49</a></p><p><a href="#_Toc482890262">4.3.3 帖子详情… 49</a></p><p><a href="#_Toc482890263">结论… 51</a></p><p><a href="#_Toc482890264">致谢… 52</a></p><p><a href="#_Toc482890265">参考文献… 53</a></p><p>1 绪论</p><p>1.1 课题背景</p><p>青春是人生最美好的时光，而在大学度过的这一段青春岁月无疑将成为我们人生中最为宝贵的回忆。大学生活如白驹过隙匆匆流逝，却又将在而后的回忆里细水长流，忘不掉的社团，忘不掉的校友， 忘不掉的教学楼。毕业后，我们离开学校，一同带走的还有对校友的思念和对母校的关注。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，自己曾加入的团体的动态等等。</p><p>同时，院校对毕业生的培养与关怀也不会停止，院校希望了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。并且，校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。这也有助于改善教学方案，从而使本校毕业生更好地适应社会需求。</p><p>1.2 课题意义</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以创建自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。</p><p>此系统还可以让校友了解母校的新闻，校友们的近况，自己曾加入的团体的动态，也提供了职业招聘功能，此功能是院校和毕业生交互的重要平台。院校可在职业招聘模块发布招聘信息，毕业生可以浏览招聘信息、投递简历、在线制作简历，毕业生可以发布自己所在单位的招聘信息，经管理员审核后发布到招聘广场，为其他毕业校友提供有力的就业帮助。校友的信息反馈在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。</p><p>1.3 课题内容</p><p>此系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、新生的招生情况以及对本校毕业生招聘信息的投送。此系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块，并在班记录和校友组织中加入相册功能，更好地满足校友的需求。同时，此系统包含职业招聘模块、校园服务模块，使院校更好地了解毕业生就业情况、为毕业生提供帮助。</p><p>1.4 论文的组织结构</p><p>论文主要内容包括五大部分，主要包括：</p><p>第一章 绪论。本章介绍了课题背景、课题意义以及本课题研究的主要内容。</p><p>第二章 系统需求分析。本章介绍了本系统的业务需求分析、系统功能分析以及相关业务的流程，开发过程中具体的开发环境、开发工具、相关技术。</p><p>第三章 系统总体设计。本章介绍了本系统的总体设计、系统各项功能的设计以及数据库的设计。</p><p>第四章 系统详细设计。本章介绍了系统的详细设计，包括各项系统功能的界面设计、代码逻辑设计以及实现。 </p><p>2 系统需求分析</p><p>2.1 需求分析</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以查询并加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。考虑到网络的现况和同学们以及毕业生跟踪调查的各种需求，系统应该具有各方面的交流能力和实时的用户反馈信息，能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间，与此同时，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。这也有助于改善教学方案，从而更好地让本校毕业生适应社会需求。系统主要功能有：</p><p>（1）系统用户的登录、注册。注册，由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；登录，输入用户输入用户名（学号）和密码登录系统；</p><p>（2）校园新闻发布中心功能：新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载地评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息；</p><p>（3）同学交流的班级录功能。班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成；</p><p>（4） 校友互动的团体组织功能。校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；</p><p>（5）校友话题参与的论坛功能。帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；</p><p>（6） 职位招聘信息推送功能。招聘广场，浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场； </p><p>（7）招生就业的校园服务。校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息；</p><p>（8）用户个人管理中心。个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>2.2 功能分析</p><p>基于对校友录系统的需求分析，校友录系统有新闻中心功能，管理员发布管理图文信息，用户可以浏览、评论新闻信息。校友录系统设置班记录功能，给班级同学提供班级空间，班级空间内有交流平台、班级相册，这是同学比较关心的功能。同时，校友录系统具有校友组织功能，校友可以加入校内的组织和团体，组织有自己的空间给组织成员提供交流平台。为给广大校友提供更大的交流平台，校友录系统提供校友论坛功能，校友可以浏览话题并参与讨论。为满足院校对招聘信息推送的需求，校友录系统应加入职业招聘模块，院校管理员发布招聘信息，用户浏览并投递简历，用户也可以发布自己所在单位的招聘信息，经管理员审核后发不到招聘广场。为更好地微笑有提供入学、就业服务，校友录系统设有校园服务，为校友提供校园指南和就业服务。最后，校友录系统为用户提供个人中心功能，对个人信息以及在站内的应用进行管理。</p><h3 id="2-2-1-院校新闻发布功能"><a href="#2-2-1-院校新闻发布功能" class="headerlink" title="2.2.1 院校新闻发布功能"></a>2.2.1 院校新闻发布功能</h3><p>1.新闻中心用例分析</p><p>新闻中心包括新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息。新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论。新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心用例如图2-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图2-1 新闻中心用例图</p><h3 id="2-2-2-班级管理功能"><a href="#2-2-2-班级管理功能" class="headerlink" title="2.2.2 班级管理功能"></a>2.2.2 班级管理功能</h3><p>1、班记录用例分析</p><p>班记录包括班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班记录用例如图2-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图2-2 班记录用例图</p><h3 id="2-2-3-院校组织管理功能"><a href="#2-2-3-院校组织管理功能" class="headerlink" title="2.2.3 院校组织管理功能"></a>2.2.3 院校组织管理功能</h3><p>1.校友组织用例分析</p><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；校友组织用例如图2-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图2-3 校友组织用例</p><h3 id="2-2-4-校友论坛功能"><a href="#2-2-4-校友论坛功能" class="headerlink" title="2.2.4 校友论坛功能"></a>2.2.4 校友论坛功能</h3><p>1.校友论坛用例分析</p><p>校友论坛包括：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；校友论坛用例如图2-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图2-4 校友论坛用例图</p><h3 id="2-2-5-院校职业招聘功能"><a href="#2-2-5-院校职业招聘功能" class="headerlink" title="2.2.5 院校职业招聘功能"></a>2.2.5 院校职业招聘功能</h3><p>1.业招聘用例分析</p><p>职位招聘包括：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘用例如图2-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图2-5 职业招聘用例图</p><h3 id="2-2-6-校园服务功能"><a href="#2-2-6-校园服务功能" class="headerlink" title="2.2.6 校园服务功能"></a>2.2.6 校园服务功能</h3><p>1.校园服务用例分析</p><p>校园服务：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务用例如图2-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图2-6 职业招聘用例图</p><h3 id="2-2-7-用户个人中心功能"><a href="#2-2-7-用户个人中心功能" class="headerlink" title="2.2.7 用户个人中心功能"></a>2.2.7 用户个人中心功能</h3><p>1.个人中心用例分析</p><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心用例如图2-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图2-7 个人中心用例图</p><p>2.4 技术路线</p><p>本系统采用业内流行的SpringMVC+Spring+MyBatis框架（简称SSM），由项目构建工具Maven构建，并使用Git版本控制系统辅助项目开发。</p><p>Git是一个便捷的分布式版本控制工具，本项目用Git进行管理，可以轻松地备份项目，控制项目的版本，并且能够更安全地开发、调试。</p><p>Maven可以通过项目对象模型配置文件（pom.xml）轻松地构建项目，不用将jar包添加到项目，缩小了项目的体积。本系统使用Maven构建父模块ar-parent，并聚合了三个子模块ar-common、ar-manage、ar-portal。ar-common是项目的公共基础模块，java应用类的模型，包含实体类、工具类、数据访问对象等，依赖Spring、MyBatis等。ar-manage是本系统的后台管理模块，web应用类的模型，依赖ar-common、Spring、SpringMVC等。Ar-poratl是本系统的门户网站模块，依赖ar-common、ar-manage、Spring、SpringMVC等。Maven可以将web应用类项目打包成war并发布到tomcat服务器运行测试。</p><p>本系统充分利用Spring的IoC（控制反转）和AOP（面向切面）特性，将创建用户的SpringMVC控制器Controller、业务逻辑类Service、数据访问类Mapper交由Spring Container管理，生成对应的bean（也称组件）, 并把实现类的类名作为bean的id。当控制器、业务逻辑类、数据访问类需要Spring Container中bean对应的实现类时，Spring Container通过依赖注入机制为其注入对应的bean。通过这种配置，系统实现了控制器和业务逻辑类分离，业务逻辑类和数据访问类分离。SpringMVC中的DispatcherServlet接收请求，并交由控制器Controller处理，Controller接收参数、调用业务逻辑类中的方法，通过ModelAndView视图模型返回jsp页面、json数据。</p><p>本系统的视图层采用jsp、HTML，通过事件触发机制向服务器端发送请求，并采用Bootstrap、AmazeUI、HTML5、CSS3等前台样式，通过c标签、javascript、jquery处理前台数据。</p><p>技术路线如图2-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图2-8 技术路线图</p><p>3 系统总体设计</p><p>3.1 系统总体设计</p><p>根据系统功能分析，本系统应该具备的功能包括：登录注册、新闻中心、班级录、校友组织、校友论坛、职位招聘、校园服务、个人中心等功能。</p><h3 id="3-1-1-系统登录"><a href="#3-1-1-系统登录" class="headerlink" title="3.1.1 系统登录"></a>3.1.1 系统登录</h3><p>（1）注册：由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；</p><p>（2）登录：输入用户输入用户名（学号）和密码登录系统。</p><h3 id="3-1-2-新闻中心"><a href="#3-1-2-新闻中心" class="headerlink" title="3.1.2 新闻中心"></a>3.1.2 新闻中心</h3><p>（1）新闻发布：后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；</p><p>（2）新闻评论：用户可以对新闻信息发表评论，回复评论，动态加载评论；</p><p>（3）新闻热度：用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。</p><h3 id="3-1-3-班级录"><a href="#3-1-3-班级录" class="headerlink" title="3.1.3 班级录"></a>3.1.3 班级录</h3><p>（1）班级检索：按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；</p><p>（2）班级排名：根据班级人数、活跃时间对班级进行热度排名；</p><p>（3）班级主页：每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；</p><p>（4）班级管理：班级的新增、管理员的设置由后台管理员完成。</p><h3 id="3-1-4-校友组织"><a href="#3-1-4-校友组织" class="headerlink" title="3.1.4 校友组织"></a>3.1.4 校友组织</h3><p>（1）校友总会：院校总会；</p><p>（2）院系分会：各学院的校友组织；</p><p>（3）社团分会：院校内的各种社团、协会的组织；</p><p>（4）学生协会：院校内的各学生协会组织；</p><p>（5）组织主页：个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。</p><h3 id="3-1-5-校友论坛"><a href="#3-1-5-校友论坛" class="headerlink" title="3.1.5 校友论坛"></a>3.1.5 校友论坛</h3><p>（1）帖子浏览：按作者、主题检索帖子，查看详情；</p><p>（2）评论帖子：对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；</p><p>（3）热帖推送：用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；</p><p>（4）发布新帖：用户登录后可以发布帖子； </p><p>（5）贴子管理：管理员可审核、置顶、删除帖子。</p><h3 id="3-1-6-职位招聘"><a href="#3-1-6-职位招聘" class="headerlink" title="3.1.6 职位招聘"></a>3.1.6 职位招聘</h3><p>（1）招聘广场：浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；</p><p>（2）简历投送：用户可以向喜欢的招聘信息投送个人简历；</p><p>（3）简历管理：用户可以新增简历、编辑简历、删除简历；</p><p>（4）单位管理：用户可以登记、编辑自己所在单位的信息；</p><p>（5）发布招聘：用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。</p><h3 id="3-1-7-校园服务"><a href="#3-1-7-校园服务" class="headerlink" title="3.1.7 校园服务"></a>3.1.7 校园服务</h3><p>（1）校内服务：包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；</p><p>（2）招生就业服务：包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。</p><h3 id="3-1-8-个人中心"><a href="#3-1-8-个人中心" class="headerlink" title="3.1.8 个人中心"></a>3.1.8 个人中心</h3><p>（1）个人资料：基本资料、 详细资料、 工作信息、 头像设置；</p><p>（2）账户设置：密码修改、邮箱绑定； </p><p>（3）我的班级：用户加入的班级相关信息；</p><p>（4）我的论坛：用户早论坛的相关信息；</p><p>（5）我的招聘：用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>3.2 系统功能设计</p><p>3.2.1 新闻中心</p><p>新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心功能如图3-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图3-1 新闻中心功能图</p><p>3.2.2 班记录</p><p>班级录功能包括:班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班级录功能如图3-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图3-2 班记录功能图</p><h3 id="3-2-3-校友组织"><a href="#3-2-3-校友组织" class="headerlink" title="3.2.3 校友组织"></a>3.2.3 校友组织</h3><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。校友组织功能如图3-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image021.png" alt="img"></p><p>图3-3 校友组织功能功能图</p><p>3.2.4 校友论坛</p><p>校友论坛：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子。校友论坛功能如图3-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image023.jpg" alt="img"></p><p>图3-4 校友论坛功能图</p><h3 id="3-2-5-职业招聘"><a href="#3-2-5-职业招聘" class="headerlink" title="3.2.5 职业招聘"></a>3.2.5 职业招聘</h3><p>职位招聘：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘功能如图3-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image025.jpg" alt="img"></p><p>图3-5 职业招聘功能图</p><h3 id="3-2-6-校园服务"><a href="#3-2-6-校园服务" class="headerlink" title="3.2.6 校园服务"></a>3.2.6 校园服务</h3><p>校园服务包括：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务功能如图3-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image027.jpg" alt="img"></p><p>图3-6 校园服务功能图</p><h3 id="3-2-7-个人中心"><a href="#3-2-7-个人中心" class="headerlink" title="3.2.7 个人中心"></a>3.2.7 个人中心</h3><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户在论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心功能如图3-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image029.jpg" alt="img"></p><p>图3-7 个人中心功能图</p><p>3.3 数据库设计</p><p>3.3.1 概念模型设计</p><p>根据系统总体设计和功能设计，设计出系统涉及到的实体信息，包括用户实体，个人信息实体，职业信息实体，简历实体，地址实体，留言实体，评论回复实体，年级实体，组织实体，活动实体，相册实体，图片实体，信息实体，评论实体，分享实体，收藏实体，订阅实体，招聘信息实体，招聘单位实体，附件实体，角色实体，权限实体，字典实体，字典数据实体，各实体信息的概念模型如下所示。</p><p>（1）用户实体模型如图3-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image031.jpg" alt="img"></p><p>图3-8 用户实体模型</p><p>（2）职业信息实体模型如图3-9所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image033.jpg" alt="img"></p><p>图3-9 职业信息实体模型</p><p>（3）简历实体模型如图3-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image035.jpg" alt="img"></p><p>图3-10 简历实体模型</p><p>（4）地址实体模型如图3-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image037.jpg" alt="img"></p><p>图3-11 地址实体模型</p><p>（5）留言实体模型如图3-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image039.jpg" alt="img"></p><p>图3-12  留言实体模型</p><p>（6）评论回复实体模型如图3-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image041.jpg" alt="img"></p><p>图3-13  回复实体模型</p><p>（7）年级实体模型如图3-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image043.jpg" alt="img"></p><p>图3-14 年级实体</p><p>（8）组织实体模型如图3-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image045.jpg" alt="img"></p><p>图3-15  组织实体模型</p><p>（9）相册实体模型如图3-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image047.jpg" alt="img"></p><p>图3-16 相册实体模型</p><p>（10）活动实体模型如图3-17所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image049.jpg" alt="img"></p><p>图3-17 活动实体模型</p><p>（11）字典数据实体模型如图3-18所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image051.jpg" alt="img"></p><p>图3-18 字典数据实体模型</p><p>（12）图片实体模型如图3-19所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image053.jpg" alt="img"></p><p>图3-19 图片实体模型</p><p>（13）信息实体模型如图3-20所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image055.jpg" alt="img"></p><p>图3-20 信息实体模型</p><p>（14）评论实体模型如图3-21所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image057.jpg" alt="img"></p><p>图3-21 评论实体模型</p><p>（15）分享实体模型如图3-22所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image059.jpg" alt="img"></p><p>图3-22 分享实体模型</p><p>（16）收藏实体模型如图3-23所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image061.jpg" alt="img"></p><p>图3-23 收藏实体模型</p><p>（17）订阅实体模型如图3-24所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image063.jpg" alt="img"></p><p>图3-24 订阅实体模型</p><p>（18）招聘信息实体模型如图3-25所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image065.jpg" alt="img"></p><p>图3-25 招聘实体模型</p><p>（19）招聘单位实体模型如图3-26所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image067.jpg" alt="img"></p><p>图3-26 招聘单位实体模型</p><p>（20）附件实体模型如图3-27所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image069.jpg" alt="img"></p><p>图3-27 附件实体模型</p><p>（21）角色实体模型如图3-28所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image071.jpg" alt="img"></p><p>图3-28  角色实体模型</p><p>（22）权限实体模型如图3-29所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image073.jpg" alt="img"></p><p>图3-29  权限实体模型</p><p>（23）字典实体模型如图3-30所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image075.jpg" alt="img"></p><p>图3-30 字典表模型</p><p>（24）简历投递实体模型如图3-31所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image077.jpg" alt="img"></p><p>图3-31 简历投递模型</p><p>3.3.2 逻辑结构设计</p><p>根据系统的概念模型设计，设计出适应大多数数据库的数据表逻辑结构，共设计31张表，如表3-1所示。</p><p>表3-1 数据表汇总</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>1</td><td>user</td><td>用户表</td></tr><tr><td>2</td><td>user_info</td><td>用户个人信息表</td></tr><tr><td>3</td><td>user_job</td><td>用户工作信息表</td></tr><tr><td>4</td><td>user_resume</td><td>用户个人简历</td></tr><tr><td>5</td><td>resume_post</td><td>简历投递信息</td></tr><tr><td>6</td><td>user_origin</td><td>用户加入组织信息表</td></tr><tr><td>7</td><td>user_role</td><td>用户角色设定表</td></tr><tr><td>8</td><td>role</td><td>角色表</td></tr></tbody></table><p>续表3-1</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>9</td><td>role_right</td><td>角色权限分配表</td></tr><tr><td>10</td><td>right</td><td>权限表</td></tr><tr><td>11</td><td>Address</td><td>地址信息表</td></tr><tr><td>12</td><td>message</td><td>消息表</td></tr><tr><td>13</td><td>reply</td><td>回复表</td></tr><tr><td>14</td><td>grade</td><td>年级表</td></tr><tr><td>15</td><td>origin</td><td>组织表</td></tr><tr><td>16</td><td>activity</td><td>活动表</td></tr><tr><td>17</td><td>album</td><td>相册信息表</td></tr><tr><td>18</td><td>album_image</td><td>相册图片信息表</td></tr><tr><td>19</td><td>image</td><td>图片信息表</td></tr><tr><td>20</td><td>information</td><td>信息表</td></tr><tr><td>21</td><td>comment</td><td>评论表</td></tr><tr><td>22</td><td>share</td><td>信息分享表</td></tr><tr><td>23</td><td>collect</td><td>信息收藏表</td></tr><tr><td>24</td><td>subscription</td><td>信息订阅表</td></tr><tr><td>25</td><td>recruit</td><td>招聘信息表</td></tr><tr><td>26</td><td>recruit_unit</td><td>招聘单位信息表</td></tr><tr><td>27</td><td>attachment</td><td>附件信息表</td></tr><tr><td>28</td><td>attachment_info</td><td>信息附件关系表</td></tr><tr><td>29</td><td>dictionary</td><td>数据字典表</td></tr><tr><td>30</td><td>dictionary_data</td><td>数据字典数据表</td></tr><tr><td>31</td><td>log</td><td>日志表</td></tr></tbody></table><p>表3-2 用户表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>account</td><td>char(20)</td><td>用户名</td><td></td></tr><tr><td>is_admin</td><td>char(1)</td><td>管理员标识</td><td></td></tr><tr><td>email</td><td>varchar(20)</td><td>用户邮箱</td><td></td></tr><tr><td>password</td><td>char(32)</td><td>用户密码</td><td></td></tr><tr><td>head_image_id</td><td>int(8)</td><td>头像图片标识</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>用户注册时间</td></tr></tbody></table><p>续表3-2</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>state</td><td>char(5)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-3 用户个人信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_info_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>ture_name</td><td>Nvarchar(20)</td><td>用户名</td><td></td></tr><tr><td>age</td><td>char(5)</td><td>年龄</td><td></td></tr><tr><td>sex</td><td>char(5)</td><td>性别</td><td></td></tr><tr><td>birthday</td><td>datetime</td><td>生日</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>phone</td><td>varchar(20)</td><td>联系电话</td><td></td></tr><tr><td>email</td><td>varchar(50)</td><td>邮箱</td><td></td></tr><tr><td>qq</td><td>varchar(20)</td><td>QQ</td><td></td></tr><tr><td>microblog</td><td>varchar(50)</td><td>微博</td><td></td></tr><tr><td>wechat</td><td>varchar(20)</td><td>微信</td><td></td></tr><tr><td>address</td><td>Nvarchar(50)</td><td>住址</td><td></td></tr><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>表3-4 职业信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>job_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>job_name</td><td>Varchar(20)</td><td>职业名称</td><td></td></tr><tr><td>job_unit</td><td>Varchar(20)</td><td>就业单位</td><td></td></tr><tr><td>date_start</td><td>date</td><td>就职时间</td><td></td></tr><tr><td>date_end</td><td>date</td><td>离职时间</td><td></td></tr><tr><td>job_desc</td><td>varhar(200)</td><td>职业简述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>工作登记时间</td><td></td></tr><tr><td>user_id</td><td>int</td><td>就业者</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录的状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>记录状态</td></tr></tbody></table><p>表3-5 个人简历表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>resume_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>resume_title</td><td>varchar(20)</td><td>简历标题</td><td></td></tr><tr><td>prof_type</td><td>vatchar(20)</td><td>职业类别</td><td></td></tr><tr><td>exp_salary</td><td>varchar(10)</td><td>期望薪资</td><td></td></tr><tr><td>name</td><td>varchar(10)</td><td>姓名</td><td></td></tr><tr><td>sex</td><td>char(1)</td><td>性别</td><td></td></tr><tr><td>domicile</td><td>varchar(20)</td><td>现在居住地</td><td></td></tr><tr><td>contact</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>userId</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>statusValue</td><td>char(5)</td><td>状态值</td><td>a     x       t</td></tr></tbody></table><p>表3-6 简历投递表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruit_id</td><td>int</td><td>招聘信息id</td><td>外键</td></tr><tr><td>resume_id</td><td>int</td><td>简历id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>投递日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>投递状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-7 角色权限配置表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>role_id</td><td>int</td><td>角色id</td><td>外键</td></tr></tbody></table><p>表3-8 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>role_name</td><td>varchar(20)</td><td>角色名称</td><td></td></tr><tr><td>role_value</td><td>varchar(20)</td><td>角色类型</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-9 角色权限表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>角色id</td><td>自动增长</td></tr><tr><td>right_id</td><td>int</td><td>权限id</td></tr></tbody></table><p>表3-10 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>right_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>right_name</td><td>varchar(20)</td><td>权限名称</td><td></td></tr><tr><td>right_pos</td><td>int</td><td>权限位</td><td></td></tr><tr><td>right_code</td><td>bigint</td><td>权限码</td><td></td></tr><tr><td>right_URL</td><td>varchar(50)</td><td>权限路径</td><td></td></tr><tr><td>is_public</td><td>char</td><td>是否是公共资源</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-11 地址表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>addr_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>province</td><td>varchar(10)</td><td>省份</td><td></td></tr><tr><td>city</td><td>varchar(10)</td><td>市</td><td></td></tr><tr><td>district</td><td>varchar(10)</td><td>区</td><td></td></tr><tr><td>detail</td><td>varchar(50)</td><td>详细地址</td><td></td></tr><tr><td>zip_code</td><td>char(6)</td><td>邮编</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态值</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-12 留言表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>msg_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>标题</td><td></td></tr><tr><td>content</td><td>varchar(500)</td><td>留言内容</td><td></td></tr><tr><td>sender_id</td><td>int(8)</td><td>发送者id</td><td></td></tr><tr><td>receiver_id</td><td>int(8)</td><td>接收者id</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>发表日期</td></tr></tbody></table><p>表3-13 留言回复表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>reId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>回复内容</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>回复时间</td><td></td></tr><tr><td>msg_id</td><td>int(11)</td><td>被回复的留言的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>回复人id</td><td>外键</td></tr></tbody></table><p>表3-14 年级表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>grade_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>grade_value</td><td>char(4)</td><td>年份</td><td></td></tr><tr><td>class_num</td><td>int(4)</td><td>班级数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-15 组织信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>origin_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>origin_name</td><td>varchar(20)</td><td>组织编号</td><td></td></tr><tr><td>origin_no</td><td>varchar(20)</td><td>组织名</td><td></td></tr><tr><td>origin_type</td><td>varchar(20)</td><td>组织类型</td><td></td></tr><tr><td>origin_desc</td><td>varchar(500)</td><td>组织简介</td><td></td></tr><tr><td>origin_grade</td><td>varchar(4)</td><td>组织年级</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>组织人员数量</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>组织成立的年份</td><td></td></tr><tr><td>mgr_id</td><td>int</td><td>组织的管理员id</td><td>外键</td></tr><tr><td>creator_id</td><td>int</td><td>组织创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-16 校友活动表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>act_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>act_name</td><td>varchar(20)</td><td>活动名称</td></tr></tbody></table><p>续表3-16</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>start_time</td><td>datetime</td><td>活动开始时间</td><td></td></tr><tr><td>end_time</td><td>datetime</td><td>活动结束时间</td><td></td></tr><tr><td>act_place</td><td>varchar(50)</td><td>活动地点</td><td></td></tr><tr><td>act_desc</td><td>text</td><td>活动描述</td><td></td></tr><tr><td>act_num</td><td>int(4)</td><td>活动人数</td><td></td></tr><tr><td>sign_num</td><td>int(4)</td><td>活动已报名人数</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣数</td><td></td></tr><tr><td>leader_name</td><td>varchar(10)</td><td>负责人姓名</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>负责人联系方式</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>活动所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>活动发起人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-17 相册表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>album_name</td><td>varchar(20)</td><td>相册名名</td><td></td></tr><tr><td>albm_desc</td><td>varchar(200)</td><td>相册描述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣的人数</td><td></td></tr><tr><td>cover_image</td><td>int(11)</td><td>相册封面标识</td><td></td></tr><tr><td>origin_id</td><td>int</td><td>相册所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>相册创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-18 相册图片表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int</td><td>相册id</td><td>外键</td></tr><tr><td>image_id</td><td>int</td><td>图片id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-19 图片信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>image_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>image_name</td><td>varchar(32)</td><td>图片名</td><td></td></tr><tr><td>is_remote</td><td>char(1)</td><td>远程文件</td><td></td></tr><tr><td>image_size</td><td>varchar(5)</td><td>图片大小</td><td></td></tr><tr><td>image_path</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>image_type</td><td>varchar(20)</td><td>图片类型</td><td></td></tr><tr><td>is_thumb</td><td>char(1)</td><td>缩略图标识</td><td></td></tr><tr><td>thumb_path</td><td>varchar(255)</td><td>缩略图路径</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>图片状态</td></tr></tbody></table><p>表3-20 信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>info_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>info_title</td><td>varchar(50)</td><td>信息标题</td><td></td></tr><tr><td>content</td><td>text</td><td>内容</td><td></td></tr><tr><td>theme</td><td>varchar(2)</td><td>主题</td><td></td></tr><tr><td>thumb_image</td><td>varchar(255)</td><td>图文信息缩略图</td><td></td></tr><tr><td>views</td><td>int(4)</td><td>浏览量</td><td></td></tr><tr><td>comments</td><td>int(4)</td><td>评论数</td><td></td></tr><tr><td>shares</td><td>int(4)</td><td>分享次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>信息类型</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>信息所属组织id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-21 评论表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>comment_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>评论内容</td></tr></tbody></table><p>续表3-21</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>评论日期</td><td></td></tr><tr><td>user_id</td><td>int</td><td>评论人</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>评论的信息id</td><td>外键</td></tr></tbody></table><p>表3-22 信息转发表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>转发时间</td><td></td></tr><tr><td>info_id</td><td>int(11)</td><td>被转发的信息id</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>转发人id</td><td>外键</td></tr><tr><td>where</td><td>varchar(20)</td><td>转发方式</td></tr></tbody></table><p>表3-23 收藏表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>collect_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>收藏时间</td><td></td></tr><tr><td>info_id</td><td>int</td><td>收藏信息的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>收藏人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-24 信息订阅表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>sub_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>订阅时间</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>订阅信息类型</td><td></td></tr><tr><td>is_email</td><td>char(1)</td><td>邮箱订阅标识</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-25 招聘信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruitId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>招聘标题</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>续表3-25</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>end_time</td><td>datetime</td><td>招聘结束时间</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>招聘人数</td><td></td></tr><tr><td>resumes</td><td>int(4)</td><td>简历投送数</td><td></td></tr><tr><td>leader_name</td><td>varchar(20)</td><td>联系人</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>pos_name</td><td>varchar(20)</td><td>职位名称</td><td></td></tr><tr><td>pos_desc</td><td>varchar(500)</td><td>职位描述</td><td></td></tr><tr><td>benefit</td><td>varchar(50)</td><td>职位福利</td><td></td></tr><tr><td>work_place</td><td>varchar(50)</td><td>工作地点</td><td></td></tr><tr><td>unit_id</td><td>int(8)</td><td>招聘单位id</td><td></td></tr><tr><td>user_id</td><td>int</td><td>发布人id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-26 招聘单位信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>unit_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>unit_name</td><td>varchar(30)</td><td>招聘单位名称</td><td></td></tr><tr><td>industry</td><td>varchar(30)</td><td>单位所属行业</td><td></td></tr><tr><td>property</td><td>varchar(20)</td><td>单位性质</td><td></td></tr><tr><td>scale</td><td>varchar(20)</td><td>单位规模</td><td></td></tr><tr><td>unit_desc</td><td>text</td><td>单位简介</td><td></td></tr><tr><td>unit_web</td><td>varchar(30)</td><td>单位网站</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>发布者id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-27 附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>atta_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>atta_name</td><td>varchar(32)</td><td>附件文件名</td><td></td></tr><tr><td>atta_type</td><td>varchar(20)</td><td>附件类型</td></tr></tbody></table><p>续表3-27</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>is_romote</td><td>char(1)</td><td>远程文件标识</td><td></td></tr><tr><td>file_path</td><td>varchar(255)</td><td>文件路径</td><td></td></tr><tr><td>file_size</td><td>char(10)</td><td>文件大小</td><td></td></tr><tr><td>dowmloads</td><td>int(4)</td><td>文件下载次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td></tr></tbody></table><p>表3-28 信息附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>attachment_id</td><td>int</td><td>附件id</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>信息id</td><td>外键</td></tr></tbody></table><p>表3-29 数据字典表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>dict_value</td><td>varchar(20)</td><td>字典值</td><td>主键</td></tr><tr><td>dict_name</td><td>varchar(50)</td><td>字典名</td><td></td></tr><tr><td>remark</td><td>varchar(200)</td><td>字典备注</td></tr></tbody></table><p>表3-30 数据字典数据表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(8)</td><td>数据id</td><td>主键</td></tr><tr><td>dict_value</td><td>varchar(20)</td><td>数据字典</td><td>外键</td></tr><tr><td>dictdata_name</td><td>varchar(50)</td><td>数据名</td><td></td></tr><tr><td>dictdata_value</td><td>varchar(20)</td><td>数据值</td><td></td></tr><tr><td>is_fixed</td><td>char(1)</td><td>固定标识</td><td></td></tr><tr><td>is_cancel</td><td>char(1)</td><td>数据取消标识</td><td></td></tr><tr><td>parent_id</td><td>int(8)</td><td>父节点</td></tr></tbody></table><p>表3-31 日志表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>log_id</td><td>int(11)</td><td>日志id</td><td>主键</td></tr><tr><td>operator</td><td>varchar(100)</td><td>操作员</td><td></td></tr><tr><td>oper_name</td><td>varchar(100)</td><td>操作名称</td><td></td></tr><tr><td>oper_params</td><td>varchar(255)</td><td>操作参数</td><td></td></tr><tr><td>oper_result</td><td>varchar(100)</td><td>操作结果</td><td></td></tr><tr><td>oper_time</td><td>datetime</td><td>操作时间</td></tr></tbody></table><p>表3-32 用户组织表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>origin_id</td><td>int</td><td>组织id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>加入时间</td><td></td></tr><tr><td>state</td><td>varchar(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>4 系统详细设计</p><p>4.1 班级录</p><p>（1） 功能实现</p><p>班级录主要实现给用户提供班级空间的功能，班级录总览界面按年级信息统计并展示院校当前班级的信息，按年级、校友姓名、班级专业条件查询班级并且能够在侧边栏按班级人数对班级进行热度排名，展示当前用户加入的班级，最近加入班级录的校友等信息。</p><p>（2） 实现方法</p><p>点击班级录标签页，请求class.action访问到Class控制器中的index()方法，index()调用ClassService业务逻辑类中的getAll()，查询年级信息，返回List<grade>类型的数据，添加到视图模型model中。Grade类对象中包含年级、班级个数等信息，index()方法跳转到class-index.jsp页面，展示年纪列表信息，并将年级列表加载到条件查询框中的下拉框中。页面加载时引入javascript，使用$.post()方法请求侧边栏数据。侧边栏数据包括班级录信息统计、班级排名、当前用户加入的班级、最近加入的校友等信息。在条件查询框中选择年级、填入校友姓名或专业关键字可以查询相关班级，提交查询时请求Class控制器中的queryClass()方法，传递grade、queryStr参数。queryClass()调用ClassService()业务逻辑类中的queryClasses()方法,queryClasses()方法的参数为Page&lt;&gt;类型的对象、grade、queryStr，queryClasses()执行查询,并返回 List<map<string,object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，queryClass()返回class-query.jsp页面。jsp页面将班级信息列表展示出来，并追加页码执行翻页功能。</map<string,object></grade></p><p>（3） 界面设计</p><p>班级录总览界面如图4-1所示，总体分为导航栏、年级列表和侧边信息栏。班级查询界面如图4-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图4-1 班级录总览界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图4-2 班级查询界面</p><p>4.1.1 班级首页</p><p>（1）功能实现</p><p>班级主页主要对班级进行一些简介，并展示班级的一些近期信息，如班级简介、班级最新动态、班级最新照片、班级管理员信息、当前用户信息以及当前用户是否加入班级等。班级简介为班级实体中描述班级的字段，包括班级名称、班级人数、班级简介、班级所属年级。班级最新动态是班级动态按照日期降序排列后，选择最新的几条记录显示。班级最新照片是班级成员上传到班级相册照片，按照上传日期降序排列后选择最新的几张进行展示。班级管理员信息展示管理员的头像、姓名、简介等信息。当前用户信息展示当前用户的头像、姓名、简介、是否加入班级。</p><p>（2）实现方法</p><p>点击班级名称超链接，请求classroom.action，并传入班级id参数，Classroom控制器中index()方法接收参数,调用业务逻辑类ClassService中的classIndex()、classInfo()、classImage()、getAllMemberId()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()查询班级的动态消息，动态消息按照日期降序排列，以List<map<string, object>&gt;类型返回日期最新的几条记录，赋值给infoList,将infoList添加到视图模型model中。classImage()方法查询班级成员上传的照片，照片按照上传日期降序排列，以List<map<string, object>&gt;类型返回上传日期最新的几条记录，赋值给imageList，将imageList添加到视图模型model中。getAllMemberId()查询所有班级成员的id，以List&lt; Integer&gt;类型返回，赋值给classIds，并将classIds添加到视图模型model中。Classroom控制器方法index()跳转到classroomdex.jsp页面，将classroom、infoList、imageList中的信息遍历展示在jsp页面中,将SESSION_USER环境变量中的当前用户信息展示为当前用户信息，并将SESSION_USER中的userId与classIds中的数据进行比较，如果userId存在与classIds中,则显示用户已经加入班级，否则显示加入班级按钮。Classroom-index.jsp加载的时候引入javascript，使用$.post()方法请求班级官员信息，并返回到jsp页面进行展示。</map<string,></map<string,></string,></p><p>（3）界面设计</p><p>班级主页界面设计如图4-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图4-3 班级主页界面</p><p>4.1.2 班级动态</p><p>1.班级动态列表</p><p>（1） 功能实现</p><p>班级动态列表展示班级成员发布的动态信息，查询以当前班级id和信息类型作为条件查询信息，并进行分页处理，将查询到的信息分页展示。</p><p>（2） 实现方法</p><p>点击班级动态标签页，请求classroom/info.action，传递参数classId，Classroom控制器中的info()方法接收参数，info()调用ClassService业务逻辑类中的classIndex()、classInfo()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()方法参数为Page&lt;&gt;类型数据、班级id和信息类型（数据字典中的信息类型数据），方法返回List<map<string, object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，info()返回classroom-info.jsp页面。jsp页面将班级信息、班级动态信息列表展示出来，并追加页码执行翻页功能。</map<string,></string,></p><p>（3） 界面设计</p><p>班级动态列表界面如图4-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图4-4 班级动态界面</p><p>2.班级动态详情</p><p>（1）功能实现</p><p>班级动态详情实现动态消息的详情展示，作者信息，消息评论区，以及班级相关动态和作者相关动态。班级动态消息详情包括图文信息、发布时间、浏览量、喜欢数、评论数，消息加载时动态消息的浏览量自增1。作者信息栏展示作者的头像、名字、简介等信息。评论区默认加载10条评论，点击加载更多评论按钮则再次加载10条评论，知道所有评论被加载完毕，用户可以在评论区发表评论。页面加载时，通过ajax方式将班级相关动态和作者相关动态加载到侧边栏。</p><p>（2）实现方法</p><p>点击消息详情按钮，请求classroom/infoDetail.action，传递班级id和消息id，Classroom控制器中的infoDetail()方法接收参数，调用ClassroomService业务类中的classInfoDetail()方法查询动态信息详情和作者信息，返回Map<string, object>类型的数据，赋值给info，将info添加到视图模型model中。infoDetail()返回classroom-info-detail.jsp页面，将info中的信息展示，并引入javascript使用ajax方式加载评论和侧边栏信息。</string,></p><p>（3）界面设计</p><p>班级动态信息详情界面和评论区界面如图4-5和图4-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图4-5 班级动态详情界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图4-6 班级动态消息评论区界面</p><p>4.1.3 班级通讯录</p><p>（1）功能实现</p><p>班级通讯录五章表关联查询班级成员的用户信息、所在地、电话、邮箱、QQ、微信等通讯信息，分页显示，并且支持下载班级通讯录信息，以Excel文件形式下载到本地。</p><p>（2）实现方法</p><p>点击通讯录标签页，请求classroom/directory.action，传递参数班级id，Classroom控制器中的directory()方法接收参数，并调用ClassrommService业务类中的classDirector()方法。classDirectory()关联user表、user_origin表、origin表、user_info表、image表，查询用户信息、用户通讯信息，以List<map<string, object>&gt;的形式返回通讯录列表，赋值给分页对象page中的beanList，并将page添加到视图模型model中。Directory()方法跳转classroom-directory.jsp页面，将beanList里的通讯录信息遍历出来。</map<string,></p><p>（3）界面设计</p><p>班级通讯录的界面设计如图4-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图4-7 班级通讯录界面</p><p>4.1.4 班级相册</p><p>（1）功能实现</p><p>在班级相册中，班级成员可以查看相册、新建相册、上传图片、删除图片、设置相册封面、下载图片。上图图片支持批量上传，相册封面可以选择相册内的任意图片作为封面。</p><p>（2）实现方法</p><p>点击班级相册标签页，请求classroom/album.action，传递参数班级id，Classroom控制器中的album()方法接收参数，调用AlbumService业务类中的getAlbums()方法，以List<album>形式返回相册信息，赋值给分页对象page的beanList属性，返回classroom-album.jsp界面，将相册列表分页显示。</album></p><p>（3）界面设计</p><p>班级相册界面设计如图4-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图4-8 班级相册界面</p><p>4.2 职业招聘</p><p>4.2.1 发布招聘</p><p>（1）功能实现</p><p>发布招聘时，系统判断当前用户是否已经登记公司信息，如果没有登记则跳转公司信息登记界面，否则跳转招聘登记界面。在招聘登记界面填写招聘信息后提交审核，后台管理员可以审核、置顶招聘。</p><p>（2）实现方法</p><p>点击发布招聘按钮，请求recruit/addRecruit.action，Recruit控制器中的addRecruit()方法接收请求，首先调用UnitService业务类中的getUnitsByUserId()方法查询当前用户的公司信息。如果公司信息，则返回redirect:/unit/addUnit.action，重定向到公司信息登记界面，否则addRecruit()将招聘常量positionSalary、positionBenefit、positionProf添加到视图模型model中，跳转至招聘信息登记界面。招聘信息表单填写完成后，提交至recruit/addRecruitSubmit.action，Recruit控制器调用RecruitService业务类中的createRecruit()方法，保存招聘信息，等待审核。</p><p>（3）界面设计</p><p>招聘单位信息登记界面设计如图4-9所示，招聘信息登记界面如图5-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图4-9 招聘单位登记界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图4-10 招聘信息登记界面</p><p>4.2.2 查询招聘</p><p>（1）功能实现</p><p>招聘查询可以招聘信息标题、招聘单位名称、职位信息、工作地点等查询招聘信息，并将查询到的记录分页显示。</p><p>（2）实现方法</p><p>点击职业招聘按钮，请求recruit.action，传递查询条件queryStr，Recruit控制器中的indexRecruit()方法，调用RecruitService业务类中的queryRecruit()方法执行查询，返回分页对象page，跳转到recruit-index.jsp页面，将招聘信息遍历出来并追加页码，执行翻页功能。</p><p>（3）界面设计</p><p>招聘查询界面如图4-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image022.jpg" alt="img"></p><p>图4-11 招聘查询界面</p><p>4.2.3 招聘详情</p><p>（1）功能实现</p><p>招聘详情展示招聘的详细信息，包括招聘单位信息、职位信息、联系人信息，并且能够加载此招聘信息的申请记录以及本招聘单位的相关招聘信息。</p><p>（2）实现方法</p><p>点击招聘信息标题超链接，请求recruit/detailRecruit.action，传递招聘信息id，Recruit控制器中的detailRecruit()方法接收参数，调用RecruitService业务类中的getDetailRecruit()、loadResumesToPost()、postResumeRecord()、loadOtherRecruits()等方法。getDetailRecruit()方法查询招聘的详细信息，返回Map<string,object>类型的数据，并添加到视图模型对象model中。postResumeRecord()方法关联recruit_post表、user表、image表查询出对此招聘信息投递简历的用户列表，返回List<map<string,object>&gt;类型的数据，并添加到视图模型对象中。LoadOtherRecruits()方法关联recruit_post表、recruit表，查询出此招聘单位的相关招聘信息，返回List<map<>&gt;类型的数据，并添加到数图模型对象model中。</map<></map<string,object></string,object></p><p>（3）界面设计</p><p>招聘查询界面如图4-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image024.jpg" alt="img"></p><p>图4-12 招聘查询界面</p><p>4.2.4 投递简历</p><p>（1）功能实现</p><p>在简历详情界面中，有简历投递选项，用户选择自己的简历投送至当前招聘信息。如果当前用户没有简历，则可以选择创建简历。</p><p>（2）实现方法</p><p>如果用户已经申请当前职位，则显示已申请职位，否则显示申请职位按钮。点击申请职位按钮，页面弹出简历投递模态框，通过c标签将用户简历列表加载到下拉框中，选择一个简历，点击确认申请按钮，请求my/resume/postResume.action，传递招聘信息id，用户简历id，用户信息控制器中的postResume()接收参数，并调用ResumeService服务类中的postResume()方法，保存简历投递信息。</p><p>（3）界面设计</p><p>简历投递界面如图4-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image026.jpg" alt="img"></p><p>图4-13 简历投递界面</p><p>4.3 校友论坛</p><p>4.3.1 论坛广场</p><p>（1）功能实现</p><p>论坛广场分页展示校友论坛的所有帖子，可以按照帖子标题、帖子主题和帖子作者进行模糊查询，并按照帖子的热度进行排名。</p><p>（2）实现方法</p><p>点击校友论坛，请求forum.action，Forum控制器中的index()方法接收请求，调用PostService中的queryPosts()方法，按日期降序排列并分页查询帖子，返回List<map<string,object>&gt;类型的数据，赋值给分页对象page，将page添加到视图模型对象model中。返回forum-index.jsp页面，将page中beanList的帖子信息分页显示。</map<string,object></p><p>（3）界面设计</p><p>论坛广场界面设计如图4-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image028.jpg" alt="img"></p><p>图4-14 校友论坛广场界面</p><p>4.3.2 发布新帖</p><p>（1）功能实现</p><p>用户可以在校友论坛广场发布新贴，帖子会被推送到广场并可以被搜索。</p><p>（2）实现方法</p><p>点击发布新贴按钮，请求post/add.action，Post控制器中的addPost()方法接收请求，将环境变量themeList添加到视图模型对象model中，加载帖子发布界面。在帖子发布界面填写post表单并提交，post信息存储至数据库，重新加载招聘广场即可看到新发布的帖子。</p><p>（3）界面设计</p><p>发布新贴界面如图4-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image030.jpg" alt="img"></p><p>图4-15 发布新贴界面</p><p>4.3.3 帖子详情</p><p>（1）功能实现</p><p>用户可以查看帖子详情，包括帖子内容、浏览量、评论量、喜欢数、作者信息，在帖子内容下方有评论区，加载评论内容或发表评论。在详情界面侧边栏显示相关主题的帖子和作者相关的帖子。</p><p>（2）实现方法</p><p>用户点击帖子标题超链接，请求post/detail.action，Post控制器中的detail()方法接收请求，调用PostService业务类中的postDetail()方法查询帖子详情，将返回的数据添加到视图模型对象model中，返回jsp页面显示帖子内容。页面加载完毕后，通过jquery的$.post()方法请求post/commentList.action和post/outLine.action加载评论区内容和侧边栏内容，Post控制器调用PostService业务类中的getOtherPost()f方法和CommentService业务类中的dynamicComment()方法查询信息，将返回的信息追加到页面，完成动态加载评论的功能。</p><p>（3）界面设计</p><p>帖子详情界面设计如图4-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image032.jpg" alt="img"></p><p>图4-16 帖子详情界面</p><p>结论</p><p>经过持久层、数据访问层、业务逻辑层、系统控制层、视图层的设计和实现，本系统基本实现了对班级管理，用户可以加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。系统已经能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间。校友论坛为广大校友提供了更加宽阔的平台，促进校友们之间的交流。与此同时，通过职业招聘模块、校园服务模块，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。因此，此系统能够在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面带来巨大效益。</p><p>当然，本系统还不够完善，有一部分功能尚未实现。新闻中心应该具备热文推送和邮箱订阅功能，这样才能让校友更好的了解母校的动态消息。  网站内的消息应该支持富文本格式，这样可以使消息更具可读性和吸引力，同时富文本编辑器可以让用户更方便地编写内容。在消息发布和图片上传时，图片经过剪辑之后才可以更好地展示和存储。由于个人能力的限制，网站的邮箱订阅功能、富文本编辑存储功能和图片剪辑功能并没有实现。这些功能对本系统也显得尤为重要，因此以后必须实现。</p><p>经过对校友录系统的设计和实现，我对MVC模式有了更深层次的理解和应用。同时，我也学会许多新的框架和工具，包括SpringMVC、MyBatis、EhCache、Bootstrap、AmazeUI等框架，Maven、Git、IntelliJ IDEA等工具。因此，我相信在以后面临的工作和项目中本系统对我有很大帮助。</p><p>致谢</p><p>本论文的编写和修改是在胡局新老师悉心指导下完成的。胡老师有着严谨有致的教学态度，兢兢业业的工作作风，诲人不倦的高尚师德。在胡老师的每一堂课上，我都能感受到他的格物致知、敬业乐群，这也正是我在专业知识学习中保持热情的关键所在。在临近毕业的这段时间，胡老师也依然百忙之中为我讲解技术、指导论文，其崇高的责任心将是我受益一生的宝贵财富。在此，谨向我可敬可爱的胡老师致以诚挚的谢意。</p><p>不知不觉，四年的大学生活如白驹过隙般逝去，但这宝贵的四年无疑会在而后的回忆里细水长流。在徐州工程学院四年时间里我有过喜悦，有过沮丧，也学习了很多专业知识，参加了很多活动和比赛，获得了飞思卡尔智能汽车竞赛国赛奖项，电子设计大赛省级奖项。没有志同道合的校友，没有对我谆谆教诲的辅导员，没有对我坚定支持的母校，我不可能取得这些成就，也很难在低谷时战胜困难。因此，我想对帮助我的校友，关爱我的辅导员，坚定支持我的母校致以崇高的谢意。</p><p>同时，我也要感谢生我育我的父母。我的家庭生活并非想象中那么美好，父母的艰辛也许我无法体会，但是即使再困难，父母都会给予我精神、物质上的支持。父母不曾亏待我，我又能拿什么面对父母。唯有不懈的努力，让自己成功的速度快于他们老去的速度，我才能回报他们对我的爱。对于父母所给予我的这一切，我会用生命去珍惜，用感恩去呵护。</p><p>最后，我想再一次向精心教导我的胡老师，关爱我的辅导员，志同道合的校友，给予我支持的父母表达我的感恩之情，没有你们就没有如今的我，谢谢你们伴我走过青春的这段旅途，谢谢！</p><p>参考文献</p><p>[1] 盛仲飙 乔道迹.基于Java的通讯软件设计与实现[J].福建电脑,2015</p><p>[2] 陈衍席.基于Java网络聊天系统的设计及实现研究[J].通讯世界,2016</p><p>[3] 钱雪忠著,数据库原理与应用（第二版）[M].北京邮电大学出版社,2007</p><p>[4] 唐汉明 翟振兴 关宝军.深入浅出MySQL数据库开发优化与管理维护第2版[M].人民邮电出版社,2014</p><p>[5] 吴海星.Java程序员修炼之道[M].人民邮电出版社,2013</p><p>[6] 缪忠剑.基于Spring的集成化Web开发平台的研究与实现[M].北京机械工业出版社,2013</p><p>[7] 宋佳颖,基于Java的邮件接收系统分析[J].无线互联科技,2015</p><p>[8] 耿祥义,张跃平著.Java设计模式[M].清华大学出版社,2009</p><p>[9] 彭晓青,MVC模式的应用架构系统的研究与实现[J].电子工业出版社,2013</p><p>[10] 赵争东,基于Java的数据库应用框架的研究设计和探索[J].信息系统工程,2015</p><p>[11] 软件开发技术联盟著,Java Web开发实战[M].清华大学出版社,2013</p><p>[12] 贾蓓.镇明敏.杜磊著,Java Web整合开发实战[M].清华大学出版社,2013</p><p>[13] 李运莉著,web数据库应用系统性能优化[M].北京人民邮电出版社,2011</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="spring" scheme="https://blackist.org/tags/spring/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="https://blackist.org/2019/06/13/java-java7-ioc/"/>
    <id>https://blackist.org/2019/06/13/java-java7-ioc/</id>
    <published>2019-06-13T12:07:19.000Z</published>
    <updated>2019-06-16T09:47:35.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>讲真的，今年就业形势相当不好，对IT从业者的专业能力要求将变得更高。近来一边忙学业，一边学习Java基础和框架源码，为不久之后的招聘做准备。</p><p>打算从Java7、Java8d的版本新特性着手，再深入JVM、并发编程等。Java7中发布了JSR-330标准的DI特性。IoC是控制反转，DI是依赖注入。依赖注入（控制反转的一种形式）是Java开发主流中一个重要的范式。</p><a id="more"></a><h2 id="一、理解IoC和DI"><a href="#一、理解IoC和DI" class="headerlink" title="一、理解IoC和DI"></a>一、理解IoC和DI</h2><p><a name="iGpK3"></a></p><h3 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h3><p>非IoC范式编程，“功能中心”控制程序逻辑的流程，调用各个可重用对象中的方法执行特定的功能。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/204153/1560386178634-f13db507-ef0b-4eb5-be76-f61291a3e741.jpeg#align=left&amp;display=inline&amp;height=254&amp;originHeight=254&amp;originWidth=353&amp;size=0&amp;status=done&amp;width=353" alt><br>IoC程式编程，调用者的代码来处理程序的执行顺序，而程序逻辑则被封装在接受调用的子流程中。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/204153/1560386191880-91750474-e215-4608-bf06-53e820c2a180.jpeg#align=left&amp;display=inline&amp;height=421&amp;originHeight=421&amp;originWidth=336&amp;size=0&amp;status=done&amp;width=336" alt></p><p>IoC也被称为<strong>好莱坞原则</strong>，其思想可以归结为会有另一端代码拥有最初的控制线程（容器/工厂），并且有它来调用你的代码（注入/实例化对象），而不是由你的代码调用它。</p><blockquote><p>好莱坞原则 – “不要给我们打电话，我们会打给你”<br>好莱坞经纪人总是给人打电话，而不是让别人打给他们！</p></blockquote><p>IoC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：<br> <br>●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。<br><br><br>●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？<strong>依赖对象的获取</strong>被反转了。</p><p><a name="FxilH"></a></p><h3 id="IoC应用"><a href="#IoC应用" class="headerlink" title="IoC应用"></a>IoC应用</h3><p><strong>降低代码间的耦合度</strong>，让代码<strong>更易于测试、更易读、内聚性更强</strong>。</p><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。<br>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。<br>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。<br></p><p><a name="kSWEA"></a></p><h3 id="IoC实现方式"><a href="#IoC实现方式" class="headerlink" title="IoC实现方式"></a>IoC实现方式</h3><p>包括工厂模式，服务器定位模式，依赖注入(DI)。</p><p><a name="LQjDC"></a></p><h3 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h3><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。<br><br><br>DI是IoC的一种特定形态，是指<strong>寻找依赖项的过程（实例化）不在当前执行代码的直接控制之下</strong>。通常使用自带IoC容器的DI框架来实现依赖注入机制，如Guice，Spring。IoC可以看作运行时环境。<br><br><br>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。<br> <br>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：<br> <br>●<strong>谁依赖于谁：</strong>当然是应用程序依赖于IoC容器；<br>●<strong>为什么需要依赖：</strong>应用程序需要IoC容器来提供对象需要的外部资源；<br>●<strong>谁注入谁：</strong>很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；<br><br><br><strong>●注入了什么：</strong>就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。<br> <br>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</strong></p><p><a name="IB7px"></a></p><h2 id="二、DI实现实例"><a href="#二、DI实现实例" class="headerlink" title="二、DI实现实例"></a>二、DI实现实例</h2><blockquote><p>找出所有对Java开发人员比较友善的好莱坞经纪人</p></blockquote><p>有个AgentFinder接口，及其两个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevAgentFinder</span> <span class="keyword">extends</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAgentFinder</span> <span class="keyword">extends</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AgentFinderService中使用AgentFinder查找对Java开发人员友好的经纪人，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AgentFinder finder = <span class="keyword">new</span> DevAgentFinder();</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; fitAgents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String agent : agents) &#123;</span><br><span class="line"><span class="keyword">if</span> (agent.contains(<span class="string">"Java"</span>)) &#123;</span><br><span class="line">fitAgents.add(agent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fitAgents;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，AgentFinderService和DevAgentFinder紧密黏合，使用工厂模式和服务器定位模式可降低耦合，它们都是IoC的一种。</p><p><a name="LtAfb"></a></p><h3 id="使用工厂-服务器定位模式"><a href="#使用工厂-服务器定位模式" class="headerlink" title="使用工厂/服务器定位模式"></a>使用工厂/服务器定位模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(String agentFinderType)</span> </span>&#123;</span><br><span class="line">        AgentFinderFactory factory = AgentFinderFactory.getInstance();</span><br><span class="line">        AgentFinder finder = factory.getAgentFinder(agentFinderType);</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AgentFinderFactory根据注入的agentFinderType实例化令人满意的AgentFinder。仍存在问题：</p><ul><li>代码注入agentFinderType作为引用凭据，而没有注入真正的对象。</li><li>getGoodAgents仍存在其他依赖项，达不到只关注自身职能的状态。</li></ul><p><a name="DXp6k"></a></p><h3 id="使用DI"><a href="#使用DI" class="headerlink" title="使用DI"></a>使用DI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上AgentFinder被直接注入到getGoodAgents方法中，只专注于纯业务逻辑。存在问题，如何配置AgentFinder具体实现？原本AgentFinderFactory要做的事情只是<strong>换个地方</strong>完成。</p><p><a name="LhmHR"></a></p><h3 id="使用JSR-330-DI"><a href="#使用JSR-330-DI" class="headerlink" title="使用JSR-330 DI"></a>使用JSR-330 DI</h3><p>使用框架执行DI操作，DI框架用标准的JSR-330<a href="#">@Inject</a>注解将依赖项注入到getGoodAgents方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，AgentFinder的某个具体实现类的实例由支持JSR-330@inject注解的DI框架在运行时注入。</p><blockquote><p>JSR 企业应用标准：<br>JSR-330: Dependency Injection for Java 1.0<br>JSR-330统一DI体系，对大多数Java DI框架的核心功能做了很好的汇总</p></blockquote><p>从以上改造来温故依赖注入对我们的帮助：</p><ul><li>松耦合</li><li>可测性</li><li>更强的内聚性</li><li>可重用组件</li><li>更轻盈的代码</li></ul><p><a name="FAjHO"></a></p><h2 id="三、Java中标准化DI"><a href="#三、Java中标准化DI" class="headerlink" title="三、Java中标准化DI"></a>三、Java中标准化DI</h2><p>DI新标准中，javax.inject包只是提供一个接口和几个注解类型，这些都会被遵循JSR-330标准的各种DI框架实现。</p><p><a name="eSefj"></a></p><h3 id="理解DI工作原来"><a href="#理解DI工作原来" class="headerlink" title="理解DI工作原来"></a>理解DI工作原来</h3><p>优秀的Java开发人员不能只满足于使用类库和框架，要明白内部基本工作原理。在DI领域，会面临各种问题，如依赖项配置错误、依赖项诡异地超出作用域、依赖项在不该共享时被共享、分布调试离奇宕机等。</p><p>理解javax.inject包：</p><blockquote><p>javax.inject包<br>这个包指明了获取对象的一种方式，与传统的构造方法、工厂模式、服务器定位模式（如JNDI）等相比，这种方式的可重用性、可测试性、可维护性都有极大提升。这种方式成为依赖注入。</p></blockquote><p>javax.inject包中包括一个Provider<t>接口和5个注解类型（@inject、@Qualifier、@Named、@Scope、@Singleton）。</t></p><p><a name="M5vYz"></a></p><h3 id="Inject-注解"><a href="#Inject-注解" class="headerlink" title="@Inject 注解"></a>@Inject 注解</h3><p>@Inject注解可以出现在三种类成员之前，表示该成员需要依赖注入。按运行时处理顺序：</p><ol><li>构造器</li><li>方法</li><li>属性</li></ol><p><a name="kECuT"></a></p><h4 id="构造器上使用-Inject"><a href="#构造器上使用-Inject" class="headerlink" title="构造器上使用@Inject"></a>构造器上使用@Inject</h4><p>在构造器上使用@Inject时，其参数在运行时由配置好的IoC容器提供。比如在下面的代码中，运行时调用AgentFinderService的构造器时，IoC容器会注入其参数AgentFinder。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>因为JRE无法决定构造器注入的优先级，所以规范中规定类中<strong>只能有一个构造器带@Inject注解</strong></p><p><a name="zlKd3"></a></p><h4 id="方法上使用-Inject"><a href="#方法上使用-Inject" class="headerlink" title="方法上使用@Inject"></a>方法上使用@Inject</h4><p>运行时可注入的参数可以是多个也可以是0个，使用参数注入的方法不能声明为抽象方法，也不能声明其自身的类型参数。下面这段代码在set方法前使用@Inject，这是注入可选属性的常用技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Content contnet)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向方法中注入参数技术对于服务类方法来说非常有用，其所需的资源可以作为参数注入，比如向查询数据库的服务方法中注入数据访问对象（DAO）。</p><blockquote><p>向构造器注入的通常是类中必需的依赖项，而对于非必需的依赖项，通常是在set方法上注入。比如已经给出了默认的属性就是非必需的依赖项。</p></blockquote><p><a name="nxUoc"></a></p><h4 id="属性上使用-Inject"><a href="#属性上使用-Inject" class="headerlink" title="属性上使用@Inject"></a>属性上使用@Inject</h4><p>简单直接，但最好不要用。因为这样可能会使单元测试更加困难。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="QyP4w"></a></p><h3 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier 注解"></a>@Qualifier 注解</h3><p>JSR-330规范使用@Qualifier限定（标识）要注入的对象，比如IoC容器有两个类型相同的对象，当把他们注入到你的代码中时，要把他们区分开来。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/204153/1560392266590-a5a9c420-3145-49f5-a196-b1d91d6ff87a.png#align=left&amp;display=inline&amp;height=399&amp;name=image.png&amp;originHeight=399&amp;originWidth=689&amp;size=18655&amp;status=done&amp;width=689" alt="image.png"><br>创建一个@Qualifier实现必须遵循如下规则：</p><ul><li>必须标记为@Qualifier和@Retention（RUNTIME），以确保该限定注解在运行时一直有效。</li><li>通常还要加上@Documented注解，这样该实现就能加到API的公共JavaDoc中了。</li><li>可以有属性。</li><li>@Target注解可以限定其使用范围。</li></ul><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MusicGenre &#123;</span><br><span class="line">    <span class="function">Genre <span class="title">genre</span><span class="params">()</span> <span class="keyword">default</span> Genre.TRANCE</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> GENRE &#123; CLASSICAL, METAL, ROCK, TRANCE &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Evb8J"></a></p><h3 id="Named-注解"><a href="#Named-注解" class="headerlink" title="@Named 注解"></a>@Named 注解</h3><p><a href="#">@amed</a>@Named是一个特别的@Qualifier注解，借助@Named可以用名字注明要注入的对象。将@Named和@Inject一起使用，符合指定名称并且类型正确的对象会被注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"devFinder"</span>) <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder devFinder;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"bankFinder"</span>) <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder bankFinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="J6Xx8"></a></p><h3 id="Scoped-注解"><a href="#Scoped-注解" class="headerlink" title="@Scoped 注解"></a>@Scoped 注解</h3><p>@Scoped注解用于自定义注解器（IoC容器）对注入对象的重用方式。JSR-330默认了如下几种默认行为：</p><ul><li>如果未声明任何@Scope注解接口的实现，注入器应创建注入对象并且仅使用该对象一次。</li><li>如果声明了@Scoped注解接口，注入对象的声明周期由所声明的@Scoped注解实现决定。</li><li>如果注入对象在@Scoped实现中要由多个线程使用，则需保证注入对象的线程安全性。</li><li>如果某个类上声明了多个@Scoped注解，或声明了不受支持的@Scoped注解，IoC容器应该抛出异常。</li></ul><p>公认的通用@Scoped实现只有@Singleton一个，JSR-330只确定了这么一个标准的生命周期注解。</p><p><a name="NWSe0"></a></p><h3 id="Singleton-注解"><a href="#Singleton-注解" class="headerlink" title="@Singleton 注解"></a>@Singleton 注解</h3><p>@Singleton注解接口在DI框架中应用广泛，需要注入一个不会改变的对象时，就要用@Singleton。大多数DI框架都将@Singleton作为注入对象的默认声明周期，无需显式发明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Singleton</span> <span class="keyword">private</span> AgentFinder devFinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="y22MA"></a></p><h3 id="接口Provider"><a href="#接口Provider" class="headerlink" title="接口Provider"></a>接口Provider<t></t></h3><p>当DI框架的标准注解不能满足你的需求，你想对DI框架注入代码中的对象拥有更多的控制权，可以要求DI框架将Provider<t>接口实现注入对象。</t></p><ul><li>可以获取该对象的多个实例。</li><li>可以延迟加载对象。</li><li>可以打破循环依赖。</li><li>可以定义作用域，能在比整个被加载的应用小的作用域中查找对象。</li></ul><p>该接口仅有一个T get()方法，这个方法会返回一个构造好的注入对象（T）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinderProvider provider)</span> </span>&#123;</span><br><span class="line">AgentFinder finder = provider.get();</span><br><span class="line">        <span class="keyword">if</span> (condition) &#123; <span class="comment">// 延迟加载</span></span><br><span class="line">            AgentFinder finder2 = provider.get(); <span class="comment">// 多个实例对象</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="sa2Mm"></a></p><h2 id="四、DI参考实现：Guice3"><a href="#四、DI参考实现：Guice3" class="headerlink" title="四、DI参考实现：Guice3"></a>四、DI参考实现：Guice3</h2><p>Guice3是JSR-330规范的完整参考实现，可以配置、绑定、注入依赖项。</p><p><a name="aA1Cw"></a></p><h3 id="实现DI"><a href="#实现DI" class="headerlink" title="实现DI"></a>实现DI</h3><p><a name="Ra3KF"></a></p><h4 id="创建绑定关系"><a href="#创建绑定关系" class="headerlink" title="创建绑定关系"></a>创建绑定关系</h4><p>先创建绑定关系AgentFinderModule，重写configure()声明绑定关系，当AgentFinderService要求@Inject一个AgentFinder时，就会绑定DevAgentFinder作为注入对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class).to(DevAgentFinder.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4-1</p><p><a name="WQnho"></a></p><h4 id="构建Guice对象关系图"><a href="#构建Guice对象关系图" class="headerlink" title="构建Guice对象关系图"></a>构建Guice对象关系图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Injector injector = Guice.createInjector(<span class="keyword">new</span> AgentFinderModule());</span><br><span class="line">AgentFinderService hollywoodService = injector.getInstance(AgentFinderService.class);</span><br><span class="line">List&lt;String&gt; agents = hollywoodService.getGoodAgents();</span><br><span class="line">System.out.println(agents);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4-2<br><a name="m1R8M"></a></p><h3 id="Guice的各种绑定"><a href="#Guice的各种绑定" class="headerlink" title="Guice的各种绑定"></a>Guice的各种绑定</h3><p>Guice提供多种绑定方式：</p><ul><li>链接绑定</li><li>绑定注解</li><li>实例绑定</li><li>@Provides方法</li><li>Provider绑定</li><li>无目标绑定</li><li>内置绑定</li><li>及时绑定</li></ul><p>最常用的包括链接绑定、绑定注解、@Provides方法、Provider<t>绑定。<br><a name="DPOM8"></a></t></p><h4 id="链接绑定"><a href="#链接绑定" class="headerlink" title="链接绑定"></a>链接绑定</h4><p>代码4-1中AgentFinderModule即为链接绑定，是最简单的绑定方式，只是告诉注入器运行时应该注入实现类或扩展类（可以直接注入子类）。</p><p><a name="4nYv7"></a></p><h4 id="绑定注解"><a href="#绑定注解" class="headerlink" title="绑定注解"></a>绑定注解</h4><p>将注入类的类型和额外的标识符组合起来，以标识恰当的注入对象。使用JSR-330标准注解@Named，注入特定名称的AgentFinder，在AgentFinderModule中配置@Named绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class)</span><br><span class="line">            .annotatedWith(Names.named(<span class="string">"primary"</span>))</span><br><span class="line">            .to(DevAgentFinder.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(@Named(<span class="string">"primary"</span>)</span> AgentFinder finder) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="cMKDQ"></a></p><h4 id="Provides和Provider：提供完全定制的对象"><a href="#Provides和Provider：提供完全定制的对象" class="headerlink" title="@Provides和Provider：提供完全定制的对象"></a>@Provides和Provider：提供完全定制的对象</h4><p>需要注入特别的AgentFinder，使用@Provides注解或在configure()方法中绑定，注入器会查看左右标记了@Provides注解方法的返回类型，决定 注入哪个对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="function">AgentFinder <span class="title">provideAgentFinder</span><span class="params">()</span> </span>&#123; <span class="comment">// 返回注入器需要的类型</span></span><br><span class="line">DevAgentFinder finder = <span class="keyword">new</span> DevAgentFinder(); <span class="comment">// 创建实例并定制</span></span><br><span class="line">finder.setName(<span class="string">"JavaFind"</span>);</span><br><span class="line"><span class="keyword">return</span> finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@Provides方法会变得越来越大，为简化Module，需要把定制化代码拆分出去。使用toProvider方法绑定到Provider类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span>&lt;<span class="title">AgentFinder</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AgentFinder <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DevAgentFinder finder = <span class="keyword">new</span> DevAgentFinder(); <span class="comment">// 创建实例并定制</span></span><br><span class="line">finder.setName(<span class="string">"JavaFind"</span>);</span><br><span class="line"><span class="keyword">return</span> finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class)</span><br><span class="line">            .toProvider(AgentFinderProvider.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="MLwOI"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jinnianshilongnian.iteye.com/blog/1413846" target="_blank" rel="noopener">https://jinnianshilongnian.iteye.com/blog/1413846</a><br>《Java程序员修炼之道 Benjamin J.Evans》第3章</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲真的，今年就业形势相当不好，对IT从业者的专业能力要求将变得更高。近来一边忙学业，一边学习Java基础和框架源码，为不久之后的招聘做准备。&lt;/p&gt;
&lt;p&gt;打算从Java7、Java8d的版本新特性着手，再深入JVM、并发编程等。Java7中发布了JSR-330标准的DI特性。IoC是控制反转，DI是依赖注入。依赖注入（控制反转的一种形式）是Java开发主流中一个重要的范式。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="java7" scheme="https://blackist.org/tags/java7/"/>
    
      <category term="IoC" scheme="https://blackist.org/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>分布式-开启SpringBoot微服务之旅</title>
    <link href="https://blackist.org/2019/05/22/distributed-outline/"/>
    <id>https://blackist.org/2019/05/22/distributed-outline/</id>
    <published>2019-05-22T06:58:05.000Z</published>
    <updated>2019-06-30T15:49:03.742Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>分布式架构可以降低程序错误给整体系统带来的风险，也可以通过不断扩张主机的数量以实现横向水平的性能扩展，因此我们需要分布式架构。</p><a id="more"></a><h2 id="微服务架构及容器技术"><a href="#微服务架构及容器技术" class="headerlink" title="微服务架构及容器技术"></a>微服务架构及容器技术</h2><p>微服务这个词近几年很火，微服务架构（Microservices Architecture，MSA）是分布式架构的一种，它的产生主要依赖以下方面的内容：</p><ul><li>领域驱动设计：分析并模型化复杂业务。</li><li>敏捷方法论：快速发布，形成有效反馈。</li><li>持续交付：更快、可靠、频繁地部署和交付。</li><li>虚拟化和基础设施自动化：Docker等容器技术简化安装部署环境。</li><li>DevOps：开发、测试、运维整合。</li></ul><p>MSA把小的服务开发成单一应用的形式，每个服务运行在单独的进程中并采用轻量级的机制通信（HTTP等）。这些服务围绕业务构建，自动化部署，可以使用不同的编程语言和存储技术，并保持最小化集中管理。</p><h3 id="如何构建微服务"><a href="#如何构建微服务" class="headerlink" title="如何构建微服务"></a>如何构建微服务</h3><p>ZooKeeper、Dubbo、Jersey、SpringBoot、SpringColud等都可以实现微服务。我决定围绕SpringBoot、SpringCloud展开微服务架构学习。</p><h2 id="SpringBoot微服务架构基础"><a href="#SpringBoot微服务架构基础" class="headerlink" title="SpringBoot微服务架构基础"></a>SpringBoot微服务架构基础</h2><p>SpringBoot简化企业级应用开发地复杂性，提供很多开箱即用的Starter，通过少量代码创建一个独立的、产品级Spring应用。</p><p>我学习的步骤如下：</p><ul><li>SpringBoot引入Web创建RESTful API和单元测试</li><li>使用Swagger2构建API文档</li><li>统一处理异常</li><li>SpringData JPA</li><li>SpringSecurity和JWT</li><li>事务管理</li><li>集中式缓存Redis</li><li>日志系统 本地日志和MongoDB</li><li>消息服务RabbitMQ</li><li>邮件系统</li></ul><h2 id="微服务架构设计原则"><a href="#微服务架构设计原则" class="headerlink" title="微服务架构设计原则"></a>微服务架构设计原则</h2><ul><li>拆分足够微：足够小即可，不要过小。小团队两周内开发完且能够维护。</li><li>轻量级通信：服务跨进程或跨主机，服务间通信采用采用轻量级通信协议，同步的REST（HTTP:XML/JSON），异步的AMQP、MQTT、STOMP。</li><li>领域驱动原则：基于领域驱动设计（Domain-Driven Design，DDD）开发一个微服务，一个服务反应某个业务的领域模型，理清领域边界逻辑和上下文边界。</li><li>单一职责原则：高内聚，低耦合。密切相关的多个功能应尽量包含在同一个服务中以降低服务间的干扰；通过接口（API、事件）进行通信以降低对其它服务的依赖。</li><li>DevOps及两个披萨：开发人员具备用户界面、业务逻辑、持久化存储、独立运维的全栈能力，降低沟通成本，防止项目陷入停顿。人数不多过两个披萨不够吃。</li><li>不限于技术栈：根据场景（计算密集型[CPU/内存]、非结构化存储[NoSQL]）进行技术选型，但不滥用技术，以安全稳定的Java等为主。</li><li>可独立部署：微服务独立部署使得开发者不再需要协调其它服务部署对本服务的影响；Docker容器技术使得服务能够在构建镜像中所期望的环境中运行。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.didispace.com/spring-boot-learning-1x/" target="_blank" rel="noopener">http://blog.didispace.com/spring-boot-learning-1x/</a></p><p>《SpringCloud微服务架构 杨伟卫著》第1章 微服务概述</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式架构可以降低程序错误给整体系统带来的风险，也可以通过不断扩张主机的数量以实现横向水平的性能扩展，因此我们需要分布式架构。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://blackist.org/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="springboot" scheme="https://blackist.org/tags/springboot/"/>
    
      <category term="分布式" scheme="https://blackist.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://blackist.org/2019/05/03/ops-docker-basic/"/>
    <id>https://blackist.org/2019/05/03/ops-docker-basic/</id>
    <published>2019-05-03T12:51:42.000Z</published>
    <updated>2019-06-16T09:47:35.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux Containers Linux容器 缩写LXC，其对进程进行隔离，而非一个完整的操作系统。Docker属于LXC的一种封装，提供简单易用的容器使用接口。Docker主要用于提供一次性环境、提供 弹性的云服务、组件微服务架构。</p><a id="more"></a><h2 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h2><h3 id="1-1-Docker安装"><a href="#1-1-Docker安装" class="headerlink" title="1.1 Docker安装"></a>1.1 Docker安装</h3><p>Docker是一个开源的开品，有两个版本：CE（Community Edition）和EE（Enterprise Edition）。企业版包含一些收费服务，社区版适合个人开发者。</p><ul><li><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker-cn.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li></ul><p>安装完成后，使用如下命令验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -version</span><br></pre></td></tr></table></figure><p>Docker需要用户具有sudo权限，为了避免每次输入sudo以及用户不具有sudo权限，请先使用管理员用户将特定的用户添加到Docker用户组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G docker $USER</span><br></pre></td></tr></table></figure></p><p>Docker 是服务器—-客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启动Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"># 设置开启自己懂</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"># 检查开机自启动设置成功没</span><br><span class="line">systemctl list-unit-files |grep docker</span><br><span class="line"></span><br><span class="line">docker.service                             enabled </span><br><span class="line">docker.socket                              enabled</span><br></pre></td></tr></table></figure><h3 id="1-2-Docker镜像文件image"><a href="#1-2-Docker镜像文件image" class="headerlink" title="1.2 Docker镜像文件image"></a>1.2 Docker镜像文件image</h3><p>Docker将应用程序及其依赖打包在镜像（image）文件里，通常一个image会继承自另一个image，开发者在其中加入个性化的配置，从而形成定制化的镜像文件。</p><p>Docker通过image来生成并运行虚拟容器。比如说我们的网站程序打包成image文件并拷贝在一个服务器上，通过docker根据此image文件在服务器上生成并运行多个相同的网站程序。</p><p>通过Docker管理image文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机的image文件</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"># 删除本机image文件</span><br><span class="line">docker image rm $image_name</span><br></pre></td></tr></table></figure><p>image具备复用性，通常我们可以使用别人制作好的Image文件，这些共享镜像通常来自于<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。</p><h3 id="1-3-Docker镜像实例"><a href="#1-3-Docker镜像实例" class="headerlink" title="1.3 Docker镜像实例"></a>1.3 Docker镜像实例</h3><p>我们可以从Docker官方镜像仓库/第三方仓库拉取image文件并运行。</p><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello-world"></a>hello-world</h4><p>从官方拉取hello-world镜像来感受下Docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br></pre></td></tr></table></figure></p><ul><li>docker image pull：拉取镜像的命令</li><li>library：镜像文件所在组</li><li>hello-world：镜像文件的名字</li></ul><p>Docker官方提供的镜像文件都在library下，因此library是默认镜像组，可省略不写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull hello-world</span><br></pre></td></tr></table></figure><h3 id="1-4-Docker运行容器实例"><a href="#1-4-Docker运行容器实例" class="headerlink" title="1.4 Docker运行容器实例"></a>1.4 Docker运行容器实例</h3><p>基于image文件生成并运行容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker container run hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>输出一段话后，hello-world容器自动终止。</p><p>有些容器不会自动终止，因为它们提供的是服务例如网站容器和虚拟操作系统容器，运行ubuntu的容器，docker会从镜像仓库下载ubuntu的镜像，下载完成后直接从ubuntu镜像运行容器实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Unable to find image &apos;ubuntu:latest&apos; locally</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">f476d66f5408: Pull complete</span><br><span class="line">...</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">root@341a7595b69e:</span><br></pre></td></tr></table></figure><ul><li>-t: flag assigns a pseudo-tty or terminal inside the new container.</li><li>-i: flag allows you to make an interactive connection by grabbing the standard in (STDIN) of the container.</li><li>-it：Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器</li><li>bash: launches a Bash shell inside our container.</li></ul><p>输入exit或按Ctrl+D可退出此ubuntu容器实例进程，此种方式依赖命令行运行，命令行退出则容器进程终止（使用Ctrl+P+Q也可退出容器且不关闭容器）。使用ps命令查看docker进程，可见ubuntu的进程已退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED       STATUS    </span><br><span class="line">341a7595b69e        ubuntu              &quot;bash&quot;              2 minutes ago       Exited </span><br><span class="line"></span><br><span class="line">44a7468dabfd        hello-world         &quot;/hello&quot;            23 minutes ago      Exited</span><br></pre></td></tr></table></figure><p>也可以将将容器作为后台进程运行，再使用attach命令进入在后台运行的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker container run -itd ubuntu</span><br><span class="line">1f7b446e9a8f6a9e9ec8066526f055222c9cfb6bf75f5389a8a9163428d53272</span><br><span class="line"></span><br><span class="line">docker ps -a </span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED       STATUS</span><br><span class="line">1f7b446e9a8f        ubuntu              &quot;bash&quot;              13 seconds ago      Up 11 seconds</span><br><span class="line"></span><br><span class="line">341a7595b69e        ubuntu              &quot;bash&quot;              2 minutes ago       Exited </span><br><span class="line"></span><br><span class="line">44a7468dabfd        hello-world         &quot;/hello&quot;            23 minutes ago      Exited</span><br></pre></td></tr></table></figure><p>容器在后台运行成功，使用attach/exec命令进入后台进程的ubuntu容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># docker attach [OPTIONS] CONTAINER</span><br><span class="line">docker attach 1f7b446e9a8f</span><br><span class="line"></span><br><span class="line"># docker exec [OPTIONS] CONTAINER COMMAND [PARAMS]</span><br><span class="line">docker exec 1f7b446e9a8f bash</span><br><span class="line"></span><br><span class="line">root@1f7b446e9a8f:/#</span><br></pre></td></tr></table></figure><p>容器进程退出，但容器文件依然存在，因此关闭容器不会删除容器文件。一些container常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 启动容器</span><br><span class="line">docker start CONTAINER</span><br><span class="line"># 50s内停止容器，否则强制停止</span><br><span class="line">docker stop -t 50 CONTAINER</span><br><span class="line"># 强制停止容器</span><br><span class="line">docker kill CONTAINER</span><br><span class="line"># 重启容器</span><br><span class="line">docker restart CONTAINER</span><br><span class="line"># 删除容器文件</span><br><span class="line">docker rm CONTAINER</span><br></pre></td></tr></table></figure><h2 id="二、自定义容器"><a href="#二、自定义容器" class="headerlink" title="二、自定义容器"></a>二、自定义容器</h2><p>使用Dockerfile来定制image，适应我们自己的需要。Dockerfile是一个文本配置文件，docker将根据它生成我们需要的image。</p><h3 id="2-1-准备镜像所需的工程代码或文件"><a href="#2-1-准备镜像所需的工程代码或文件" class="headerlink" title="2.1 准备镜像所需的工程代码或文件"></a>2.1 准备镜像所需的工程代码或文件</h3><p>拉取测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/blackist/maven-quiz.git</span><br></pre></td></tr></table></figure></p><p>在本地编译maven项目，mvn clean package编译出需要的war包。</p><blockquote><p>也可基于maven镜像，在容器内构建maven项目，但需要令行配置</p></blockquote><h3 id="2-2-编写Docker配置文件"><a href="#2-2-编写Docker配置文件" class="headerlink" title="2.2 编写Docker配置文件"></a>2.2 编写Docker配置文件</h3><p>在此项目基础上构建Dockerfile项目，新建Dockerfile配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD ./target/maven-quiz.jar /app.jar</span><br><span class="line">EXPOSE 8000</span><br><span class="line">ENTRYPOINT [&quot;nohup&quot;, &quot;java&quot;, &quot;-Dserver.port=8000&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;, &quot;&amp;&quot;]</span><br></pre></td></tr></table></figure><h4 id="FROM-openjdk-8"><a href="#FROM-openjdk-8" class="headerlink" title="FROM openjdk:8"></a>FROM openjdk:8</h4><p>基于openjdk8镜像编译自定义镜像</p><h4 id="VOLUME-tmp"><a href="#VOLUME-tmp" class="headerlink" title="VOLUME /tmp"></a>VOLUME /tmp</h4><p>将本地文件夹挂载到当前容器</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p> ADD ./target/maven-quiz.jar /app.jar 是拷贝war文件到容器</p><h4 id="EXPOSE-8000"><a href="#EXPOSE-8000" class="headerlink" title="EXPOSE 8000"></a>EXPOSE 8000</h4><p>开放8000端口</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>ENTRYPOINT [“nohup”, “java”, “-Dserver.port=8000”, “-jar”, “/app.jar”, “&amp;”]<br>配置容器启动后执行的命令，使用nohup使得java程序运行于后台，不至于命令行退出java程序终止。</p><ul><li>ENTRYPOINT，表示镜像在初始化时需要执行的命令，不可被重写覆盖，需谨记</li><li>CMD，表示镜像运行默认参数，可被重写覆盖</li><li>ENTRYPOINT/CMD都只能在文件中存在一次，并且最后一个生效 多个存在，只有最后一个生效，其它无效！</li><li>需要初始化运行多个命令，彼此之间可以使用 &amp;&amp; 隔开，但最后一个须要为无限运行的命令，需切记！</li></ul><p>ENTRYPOINT/CMD，一般两者可以配合使用，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;] </span><br><span class="line">CMD [&quot;-D&quot;]</span><br></pre></td></tr></table></figure><h2 id="2-3-编译Docker镜像"><a href="#2-3-编译Docker镜像" class="headerlink" title="2.3 编译Docker镜像"></a>2.3 编译Docker镜像</h2><p>编译命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t maven-quiz .</span><br></pre></td></tr></table></figure><ul><li>docker build 或 docker image build：编译命令</li><li>-t：指定镜像的name，maven-quiz为镜像名，其后可加:来指定标签，默认为lastest</li><li>.：指定Dockerfile配置文件所在路径，.即是当前路径</li></ul><p>编译过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  16.87MB</span><br><span class="line">Step 1/5 : FROM openjdk:8</span><br><span class="line"> ---&gt; b8d3f94869bb</span><br><span class="line">Step 2/5 : VOLUME /tmp</span><br><span class="line"> ---&gt; Running in dd6790b892cc</span><br><span class="line">Removing intermediate container dd6790b892cc</span><br><span class="line"> ---&gt; c22a0db1f2e0</span><br><span class="line">Step 3/5 : ADD ./target/maven-quiz.jar /app.jar</span><br><span class="line"> ---&gt; 3a7eb1b80968</span><br><span class="line">Step 4/5 : EXPOSE 8000</span><br><span class="line"> ---&gt; Running in 95ea426741b7</span><br><span class="line">Removing intermediate container 95ea426741b7</span><br><span class="line"> ---&gt; b472a3d4e0d5</span><br><span class="line">Step 5/5 : ENTRYPOINT [&quot;nohup&quot;, &quot;java&quot;, &quot;-Dserver.port=8000&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;, &quot;&amp;&quot;]</span><br><span class="line"> ---&gt; Running in c95c9393b88f</span><br><span class="line">Removing intermediate container c95c9393b88f</span><br><span class="line"> ---&gt; 48aa6f27aecf</span><br><span class="line">Successfully built 48aa6f27aecf</span><br><span class="line">Successfully tagged maven-quiz:latest</span><br></pre></td></tr></table></figure><h3 id="2-4-运行容器"><a href="#2-4-运行容器" class="headerlink" title="2.4 运行容器"></a>2.4 运行容器</h3><p>运行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -itd maven-quiz</span><br></pre></td></tr></table></figure><p>-docker run：运行容器</p><ul><li>-p：指定本地：容器端口映射</li><li>-itd：容器在后台运行</li><li>maven-quiz：指定镜像，:后加标签，默认为lastest</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p><p><a href="https://blog.csdn.net/zhezhebie/article/details/75501149" target="_blank" rel="noopener">https://blog.csdn.net/zhezhebie/article/details/75501149</a></p><p><a href="http://book.itmuch.com/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.6%20%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BADocker%E9%95%9C%E5%83%8F.html" target="_blank" rel="noopener">http://book.itmuch.com/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.6%20%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BADocker%E9%95%9C%E5%83%8F.html</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux Containers Linux容器 缩写LXC，其对进程进行隔离，而非一个完整的操作系统。Docker属于LXC的一种封装，提供简单易用的容器使用接口。Docker主要用于提供一次性环境、提供 弹性的云服务、组件微服务架构。&lt;/p&gt;
    
    </summary>
    
      <category term="OPS" scheme="https://blackist.org/categories/OPS/"/>
    
    
      <category term="Linux" scheme="https://blackist.org/tags/Linux/"/>
    
      <category term="OPS" scheme="https://blackist.org/tags/OPS/"/>
    
      <category term="Docker" scheme="https://blackist.org/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化-MVP设计模式</title>
    <link href="https://blackist.org/2019/03/31/android-modulize-mvp/"/>
    <id>https://blackist.org/2019/03/31/android-modulize-mvp/</id>
    <published>2019-03-31T08:12:27.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Anroid MVP是安卓开发中一个经典的话题，当项目较大、参与的开发人员较多，MVP的优势就体现出来了。</p><a id="more"></a><blockquote><p><strong>系列文章</strong></p><p><a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a></p><p><a href="/2018/10/23/android-modulize-router/">Android组件化-组件间通信BRouter</a></p><p><a href="/2019/03/21/android-modulize-ui-theme/">Android组件化-风格统一&amp;主题变色</a></p><p><a href="/2019/03/31/android-modulize-mvp/">Android组件化-MVP设计模式</a></p></blockquote><h2 id="一、经典的MVP"><a href="#一、经典的MVP" class="headerlink" title="一、经典的MVP"></a>一、经典的MVP</h2><blockquote><p>经典的意思，就是又老又香 ^-^</p></blockquote><h3 id="1-1-一句话MVP"><a href="#1-1-一句话MVP" class="headerlink" title="1.1 一句话MVP"></a>1.1 一句话MVP</h3><p>提到Android MVP（Model-View-Presenter）就会想到MVC（Model-View-Controller），C就是Web开发中经常提到的Controller，P则是Android中用来分离Activity逻辑与界面的Presenter。</p><p>MVP核心思想：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MVP把Activity中的UI逻辑抽象成View接口，把业务逻辑抽象成Presenter接口，Model类还是原来的Model。</span><br></pre></td></tr></table></figure><h3 id="1-2-MVP图解"><a href="#1-2-MVP图解" class="headerlink" title="1.2 MVP图解"></a>1.2 MVP图解</h3><p>一图胜千言：</p><p><img src="http://pic.blackist.top/android-modulize-mvp-struc.png" alt="MVP模型图"></p><ul><li>视图View：Activity和Fragment</li><li>逻辑Presenter：业务逻辑和业务管理类等</li><li>模型Model：SharedPreferences、数据库访问（Dao）和网络交互（Api）</li></ul><h2 id="二、Modulize使用MVP"><a href="#二、Modulize使用MVP" class="headerlink" title="二、Modulize使用MVP"></a>二、Modulize使用MVP</h2><p><a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">Modulize项目</a>使用MVP作为基本的开发框架（以登录为例）。</p><h3 id="2-1-Model层的设计"><a href="#2-1-Model层的设计" class="headerlink" title="2.1 Model层的设计"></a>2.1 Model层的设计</h3><p>Model层负责数据交互，包括网络交互、本地数据库交互以及SharedPreferences数据存取。在lib-common中添加抽象类BaseModel，LoginModel等业务模块继承自BaseModel。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网络交互-okHttp-Retrofit-Rxjava"><a href="#网络交互-okHttp-Retrofit-Rxjava" class="headerlink" title="网络交互 - okHttp+Retrofit+Rxjava"></a>网络交互 - okHttp+Retrofit+Rxjava</h4><p>网络访问使用无话可说的okHttp，结合优雅的Retrofit，加以RxJava，真香！</p><p>使用okHttpClient实例管理全局http访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class OkHttp3Util &#123;</span><br><span class="line"></span><br><span class="line">    private static OkHttpClient mOkHttpClient;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取OkHttpClient对象实例</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static OkHttpClient getOkHttpClient() &#123;</span><br><span class="line"></span><br><span class="line">        if (null == mOkHttpClient) &#123;</span><br><span class="line"></span><br><span class="line">            // build design mode</span><br><span class="line">            mOkHttpClient = new OkHttpClient.Builder()</span><br><span class="line">                    // cookie manager</span><br><span class="line">                    .cookieJar(new CookiesManager())</span><br><span class="line">                    // 网络请求日志</span><br><span class="line">                    .addInterceptor(loggingInterceptor)</span><br><span class="line">                    // 自定义拦截器</span><br><span class="line">                    .addInterceptor(new CommonIntercepter())</span><br><span class="line">                    // set timeout of connection, reading and writing</span><br><span class="line">                    .connectTimeout(10, TimeUnit.SECONDS)</span><br><span class="line">                    .writeTimeout(30, TimeUnit.SECONDS)</span><br><span class="line">                    .readTimeout(20, TimeUnit.SECONDS)</span><br><span class="line">                    .cache(cache)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return mOkHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在lib-common中新建ServiceGenerate类管理、创建Retrofit接口访问实例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_SERVICE = <span class="string">"http://xxxx:8080/api/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在gson中加入时间格式化，DateDeserializer\DateSerializer为自定义转换类.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">            .registerTypeAdapter(java.util.Date.class, <span class="keyword">new</span> DateDeserializer()).setDateFormat(DateFormat.LONG)</span><br><span class="line">            .registerTypeAdapter(java.util.Date.class, <span class="keyword">new</span> DateSerializer()).setDateFormat(DateFormat.LONG)</span><br><span class="line">            .create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API Retrofit.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit apiGenerator = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(API_SERVICE)</span><br><span class="line">            <span class="comment">// 自定义转换器一定要在gsonConverter前面,否则gson会拦截所有的解析方式</span></span><br><span class="line">            .addConverterFactory(CustomConverterFactory.create())</span><br><span class="line">            <span class="comment">// Gson Converter</span></span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create(gson))</span><br><span class="line">            <span class="comment">// Callback Handler RxJava</span></span><br><span class="line">            .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">            .client(OkHttp3Util.getOkHttpClient())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了统一处理Http接口返回，创建Response响应类，应当和后台接口保持一致的gson格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于Retrofit的登录Api如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface LoginApi &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * user login</span><br><span class="line">     *</span><br><span class="line">     * @param username username</span><br><span class="line">     * @param password password</span><br><span class="line">     * @return user info</span><br><span class="line">     */</span><br><span class="line">    @FormUrlEncoded</span><br><span class="line">    @POST(&quot;login&quot;)</span><br><span class="line">    Observable&lt;Response&lt;User&gt;&gt; loginStu(@Field(&quot;username&quot;) String username, @Field(&quot;password&quot;) String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库交互-GreenDao"><a href="#数据库交互-GreenDao" class="headerlink" title="数据库交互 - GreenDao"></a>数据库交互 - GreenDao</h4><p>使用J神家的的GreenDao，这个移动端ORM框架还是需要好好学习下的，本文仅介绍GrrenDao在MVP中的使用。在lib-db中创建DBHelper用于管理数据库连接和数据访问对象（Dao）实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class DBHelper &#123;</span><br><span class="line"></span><br><span class="line">    ... instance init</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; AbstractDao getDao(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return session.getDao(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h4><p>使用SP存储用户偏好设置或登录认证数据等碎片数据。</p><h4 id="LoginModel"><a href="#LoginModel" class="headerlink" title="LoginModel"></a>LoginModel</h4><p>Model中持有Retrofit实例（api）、数据库访问对象（Dao）以及SP等本地存储对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class LoginModel extends BaseModel &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;LoginModel&quot;;</span><br><span class="line"></span><br><span class="line">    private LoginApi api;</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    private SharedPreferences userPreference;</span><br><span class="line"></span><br><span class="line">    public LoginModel() &#123;</span><br><span class="line">        // 使用ServiceGenerator生成api访问类</span><br><span class="line">        api = ServiceGenerator.createAPIService(LoginApi.class);</span><br><span class="line">        // 获取数据库访问对象</span><br><span class="line">        userDao = (UserDao) DBHelper.getInstance().getDao(User.class);</span><br><span class="line">        userPreference = context.getSharedPreferences(&quot;user&quot;, Context.MODE_PRIVATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUser(User user) &#123;</span><br><span class="line">        userPreference.put(&quot;user&quot;, user.getName());</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login(String username, String password, Observer&lt;Response&lt;User&gt;&gt; observer) &#123;</span><br><span class="line">        rxSubscribe(api.login(username, password), observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Presenter调用LoginModel方法时传递接口参数和Observer，LoginModel接口请求响应后回调Observer，rxSubscribe()定义在BaseModel中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">rxSubscribe</span><span class="params">(Observable&lt;T&gt; observable, Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class="line">        observable.subscribeOn(Schedulers.io())</span><br><span class="line">                .subscribeOn(Schedulers.newThread())<span class="comment">//子线程访问网络</span></span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())<span class="comment">//回调到主线程</span></span><br><span class="line">                .subscribe(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Presenter层的设计"><a href="#2-2-Presenter层的设计" class="headerlink" title="2.2 Presenter层的设计"></a>2.2 Presenter层的设计</h3><p>Presenter持有Model实例，Presenter初始化时实例化Model，在lib-common中加入BasePresenter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;TView extends BaseView, TModel extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    protected TView mView;</span><br><span class="line">    protected TModel mModel;</span><br><span class="line"></span><br><span class="line">    public BasePresenter(TView view) &#123;</span><br><span class="line">        this.mView = view;</span><br><span class="line">        this.mModel = this.getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract TModel getModel();</span><br><span class="line"></span><br><span class="line">    public void detach() &#123;</span><br><span class="line">        this.mView = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginPresenter集成BasePresenter，实例化LoginModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class LoginPresenter extends BasePresenter&lt;BaseActivity, LoginModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public LoginPresenter(BaseActivity activity) &#123;</span><br><span class="line">        super(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected LoginModel getModel() &#123;</span><br><span class="line">        return new LoginModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login(String username, String password) &#123;</span><br><span class="line">        // 请求前 加载等待框</span><br><span class="line">        mView.loadHud();</span><br><span class="line">        mModel.loginStudent(username, password, new Observer&lt;Response&lt;User&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onCompleted() &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Response&lt;User&gt; response) &#123;</span><br><span class="line">                // 加载完成  取消等待框</span><br><span class="line">                mView.cancelHud();</span><br><span class="line"></span><br><span class="line">                if (response.OK()) &#123;</span><br><span class="line">                    // 请求成功 回调VIew层进行页面刷新</span><br><span class="line">            mView.onViewEvent(BaseView.VIEW_LOADED, response.getData());</span><br><span class="line">                    // 把用户信息保存在本地</span><br><span class="line">                    mModel.setUser(user);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">                    // 请求失败 回调View层报错</span><br><span class="line">            mView.onViewEvent(LoginActivity.ERROR, null);</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目在MVP中未使用接口的方式，在View中实现接口，在Presenter中持有实例并进行接口调用，因为使用接口则每个页面都需要新建一个接口类，较为繁琐。</p><p>本项目MVP使用BaseView中的抽象方法onViewEvent()，每个View继承BaseView后实现onViewEvent(int code, Object param)，Presenter层Attach BaseView后通过mView.onViewEvent()对View进行界面回调处理，View中根据事件code和参数param进行视图处理。</p><blockquote><p>一个Presenter可持有多个Model，定义多个Model对象并在Presenter构造函数中初始化。</p></blockquote><h3 id="2-3-View层的设计"><a href="#2-3-View层的设计" class="headerlink" title="2.3 View层的设计"></a>2.3 View层的设计</h3><p>在lib-common中定义BaseView，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toast</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于Presenter中吐司提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">toast</span><span class="params">(String res)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> resId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于Presenter回调界面操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewEvent</span><span class="params">(<span class="keyword">int</span> code, Object param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在界面中统一处理数据、网络异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewState</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewState</span><span class="params">(Response response)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载、取消Dialog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadHud</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelHud</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>toast（）：Toast封装，用于在Activity、Fragment或Presenter中弹出用户提示</li><li>findViewById()：主要用于fragment中获取元素使用（组件化开发使用ButterKnife较为繁琐，不建议使用）</li><li>onViewEvent()：View层的回调，用于Presenter网络请求响应后通知View层</li><li>onViewState()：View层的回调。当Presenter层发生错误时统一处理View（网络异常、Http请求错误等）</li><li>loadHud()/cancelHud()：加载ProgressDialog，Presenter发请网络请求时、请求结束后，在Presenter层弹出ProgressDialog</li></ul><h4 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity&lt;TPresenter extends BasePresenter&gt; extends AppCompatActivity implements BaseView &#123;</span><br><span class="line"></span><br><span class="line">    protected Handler mUIHandler;</span><br><span class="line"></span><br><span class="line">    protected TPresenter mPresenter;</span><br><span class="line"></span><br><span class="line">    protected KProgressHUD mHud;</span><br><span class="line">    </span><br><span class="line">    // 获取界面layout资源文件</span><br><span class="line">    @LayoutRes</span><br><span class="line">    protected abstract int getLayoutResId();</span><br><span class="line"></span><br><span class="line">    protected abstract void initViewAndData(@Nullable Bundle savedInstanceState);</span><br><span class="line"></span><br><span class="line">    protected abstract TPresenter getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        beforeCreate();</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        beforeSetContentView();</span><br><span class="line">        setContentView(this.getLayoutResId());</span><br><span class="line">        // init</span><br><span class="line">        this.init();</span><br><span class="line">        this.initViewAndData(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        // EventBus</span><br><span class="line">        EventBus.getDefault().register(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * before set contentView</span><br><span class="line">     */</span><br><span class="line">    private void beforeSetContentView() &#123;</span><br><span class="line">        // NoTitle</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        // ScreenPortrait</span><br><span class="line">        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * before create</span><br><span class="line">     */</span><br><span class="line">    private void beforeCreate() &#123;</span><br><span class="line">        // 统一设置主题</span><br><span class="line">        setTheme(UIConfig.getInstance(getApplicationContext()).getThemeId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">    public void onEventMainThread(CommonEvent event) &#123;</span><br><span class="line">        // EventBus统一处理全局异常</span><br><span class="line">        BLog.e(&quot;[Event]: &quot; + event.code);</span><br><span class="line">        if (event.code == CommonEvent.Type.NETWORK_ERROR) &#123;</span><br><span class="line">            onViewState(UIConstants.ViewState.NETWORK_DISCONNECTED);</span><br><span class="line">            if (this.mCommonEvent != null) &#123;</span><br><span class="line">                this.mCommonEvent.onCommonEvent(event.code, event.param);</span><br><span class="line">            &#125;</span><br><span class="line">            // cancel loading hud</span><br><span class="line">            cancelHud();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * init view, e.g commonTitleBar.</span><br><span class="line">     */</span><br><span class="line">    private void init() &#123;</span><br><span class="line">        // view init</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        // 从子类拿到Presenter实例</span><br><span class="line">        this.mPresenter = this.getPresenter();</span><br><span class="line">        // 使用第三方库作为Loading Dialog</span><br><span class="line">        this.mHud = KProgressHUD.create(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onViewState(int state) &#123;</span><br><span class="line">        // 全局异常处理</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onViewState(Response response) &#123;</span><br><span class="line">        // 根据Response处理服务器http响应</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line"></span><br><span class="line">        this.mUIHandler = null;</span><br><span class="line">        // Unregister EventBus</span><br><span class="line">        EventBus.getDefault().unregister(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T extends View&gt; T findViewById(int resId) &#123;</span><br><span class="line">        return super.findViewById(resId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toast(@StringRes final int resId) &#123;</span><br><span class="line">        if (mUIHandler == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        mUIHandler.post(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Toast.makeText(</span><br><span class="line">                        getApplicationContext(),</span><br><span class="line">                        resId,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toast(final String res) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void loadHud(int resId) &#123;</span><br><span class="line">        // 加载等待Dialog</span><br><span class="line">        if (mHud == null) &#123;</span><br><span class="line">            mHud = KProgressHUD.create(this);</span><br><span class="line">        &#125;</span><br><span class="line">        mHud.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)</span><br><span class="line">                .setCancellable(true)</span><br><span class="line">                .setLabel(resId == 0 ? getString(R.string.opt_loading) : getString(resId))</span><br><span class="line">                .setAnimationSpeed(1)</span><br><span class="line">                .setDimAmount(0.5f)</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void cancelHud() &#123;</span><br><span class="line">        if (mHud != null) &#123;</span><br><span class="line">            mHud.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>loadHud()：参考第三方库<a href="https://github.com/Kaopiz/KProgressHUD" target="_blank" rel="noopener">https://github.com/Kaopiz/KProgressHUD</a></li></ul><h4 id="BaseFragment"><a href="#BaseFragment" class="headerlink" title="BaseFragment"></a>BaseFragment</h4><p>类似BaseActivity，加入一些对宿主Activity的回调。</p><p>参考<a href="https://github.com/blackist/modulize/blob/8478eb2a4bdaf7b9f9e2022be0e9462ea82b3eeb/lib-common/src/main/java/org/blackist/common/base/BaseFragment.java" target="_blank" rel="noopener">https://github.com/blackist/modulize/blob/8478eb2a4bdaf7b9f9e2022be0e9462ea82b3eeb/lib-common/src/main/java/org/blackist/common/base/BaseFragment.java</a></p><h4 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h4><p>LoginActivity继承自BaseActivity，实例化LoginPresenter，实现onViewEvent()回调函数：</p><pre><code>public class LoginActivity extends BaseActivity&lt;LoginPresenter&gt; implements View.OnClickListener {    private static final String TAG = &quot;LoginActivity&quot;;    public static final int ERROR = 1000;    @Override    protected int getLayoutResId() {        return R.layout.main_login_activity;    }    @Override    protected void initViewAndData(@Nullable Bundle savedInstanceState) {        initView();        ...    }    @Override    protected LoginPresenter getPresenter() {        return new LoginPresenter(this);    }    @Override    public void onClick(View v) {        ...    }    @Override    public void onViewEvent(int code, Object param) {        switch (code) {            case VIEW_LOADED: {                // 登录成功处理                ...                startActivity(new Intent(this, MainActivity.class));                finish();            }            break;            case ERROR: {                toast(R.string.main_login_error);            }            break;            default:        }    }}</code></pre><blockquote><p>通常情况下一个View对应一个Presenter，也可在View中定义多个Presenter对象并在initViewAndData()中初始化</p></blockquote><p>至此，实现了精简版的Android MVP，本人用在项目开发中问题不大。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000003927200" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003927200</a></p><p><a href="https://juejin.im/post/5a61559051882573351a5fb6" target="_blank" rel="noopener">https://juejin.im/post/5a61559051882573351a5fb6</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anroid MVP是安卓开发中一个经典的话题，当项目较大、参与的开发人员较多，MVP的优势就体现出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="组件化" scheme="https://blackist.org/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="MVP" scheme="https://blackist.org/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化-UI统一&amp;主题变色</title>
    <link href="https://blackist.org/2019/03/21/android-modulize-ui-theme/"/>
    <id>https://blackist.org/2019/03/21/android-modulize-ui-theme/</id>
    <published>2019-03-21T13:56:19.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>客户端开发中UI设计极其重要，直接影响用户体验和App的品质；其次UI设计应做到样式、排版统一，简化布局文件，方便全局修改和维护。</p><a id="more"></a><blockquote><p><strong>系列文章</strong></p><p><a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a></p><p><a href="/2018/10/23/android-modulize-router/">Android组件化-组件间通信BRouter</a></p><p><a href="/2019/03/21/android-modulize-ui-theme/">Android组件化-风格统一&amp;主题变色</a></p><p><a href="/2019/03/31/android-modulize-mvp/">Android组件化-MVP设计模式</a></p></blockquote><h2 id="一、样式排版统一"><a href="#一、样式排版统一" class="headerlink" title="一、样式排版统一"></a>一、样式排版统一</h2><h3 id="1-1-共用style"><a href="#1-1-共用style" class="headerlink" title="1.1 共用style"></a>1.1 共用style</h3><h4 id="基础颜色表"><a href="#基础颜色表" class="headerlink" title="基础颜色表"></a>基础颜色表</h4><p>在values资源文件夹下添加文件colors.xml，加入常用的基础颜色值，使全局组件色调保持一致：</p><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-color.png" alt="颜色表参考 https://stackoverflow.com/a/7323234/8945448"></p><p>除基础颜色，还可添加App主题色调，使得ActionBar、Tab等组件颜色和主题色保持一致：</p><p><img src="http://pic.blackist.top/android-modulize-ui-color-theme.png" alt="ActionBar TabBar等组件颜色"></p><p><img src="http://pic.blackist.top/android-modulize-ui-style-action-bar.png" alt="ActionBar TabBar"></p><h4 id="统一布局尺寸和文字大小"><a href="#统一布局尺寸和文字大小" class="headerlink" title="统一布局尺寸和文字大小"></a>统一布局尺寸和文字大小</h4><p>Android界面设计需要统一排版，如图标边距、文字大小、ListItem间隔等，在values资源文件夹下添加文件dimen.xml，添加统一的布局距离和文字大小：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_normal"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_small"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_smaller"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_smallest"</span>&gt;</span>10sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_larger"</span>&gt;</span>34dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_biger"</span>&gt;</span>20dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_big"</span>&gt;</span>18dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_small"</span>&gt;</span>12dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_smaller"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_smallest"</span>&gt;</span>8dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tiny"</span>&gt;</span>6dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tinyer"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tinyest"</span>&gt;</span>2dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_border"</span>&gt;</span>12dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>界面排版等的尺寸可以参考如下布局，</p><ul><li>菜单选项内边距、字体颜色、选中颜色、背景色、上线分割线</li><li>ListView中Item的外边距、图标尺寸、图标和内容的间距、内容区标题和内容的文字尺寸颜色、Item分割线</li><li>Tab菜单选项图标尺寸、文字尺寸、Item间隔、Item选中样式</li></ul><p><img src="http://pic.blackist.top/android-modulize-ui-layout-size.png" alt="布局尺寸"></p><h4 id="统一样式"><a href="#统一样式" class="headerlink" title="统一样式"></a>统一样式</h4><p>应用内组件的样式应保持统一，比如按钮、弹窗、菜单列表等，在values资源文件夹下定义styles.xml（或新建文件把样式分离出来，如style-btn.xml），方便全局修改。</p><p>如下在布局文件中添加几个按钮，无任何样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-button-normal.png" alt></p><p>现加入按钮字体、内边距、背景等样式，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/theme_button_selector"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/spacing_smallest"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/spacing_smallest"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"@dimen/font_normal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>theme-button-selector.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:angle</span>=<span class="string">"-90"</span> <span class="attr">android:endColor</span>=<span class="string">"@color/colorPrimary"</span> <span class="attr">android:startColor</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimaryDark"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:angle</span>=<span class="string">"-90"</span> <span class="attr">android:endColor</span>=<span class="string">"@color/colorPrimary"</span> <span class="attr">android:startColor</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入统一的样式后，三个按钮好看些了^-^：</p><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-button.png" alt></p><p>但布局文件也变得格外冗长，为减少重复的布局代码，抽离通用样式，在styles.xml添加如下元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ButtonTheme"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.Button"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_margin"</span>&gt;</span>@dimen/spacing_tiny<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingTop"</span>&gt;</span>@dimen/spacing_smallest<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingBottom"</span>&gt;</span>@dimen/spacing_smallest<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@drawable/theme_button_selector<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新修改布局文件，三个按钮使用通用样式，代码简化了很多：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局重用"><a href="#布局重用" class="headerlink" title="布局重用"></a>布局重用</h4><p>有些布局组件可在全局复用，例如自定义TitleBar、ActionBar，本项目<a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">Modulize</a>使用<a href="https://github.com/wuhenzhizao/android-titlebar" target="_blank" rel="noopener">第三方库CommonTitleBar</a>作为标题栏布局，在layout资源文件夹中定义common_titlebar.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.wuhenzhizao.titlebar.widget.CommonTitleBar</span> <span class="attr">xmlns:titlebar</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/titlebar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerTextColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerTextSize</span>=<span class="string">"@dimen/font_normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerType</span>=<span class="string">"textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:fillStatusBar</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:leftImageResource</span>=<span class="string">"@drawable/common_transparent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:leftType</span>=<span class="string">"imageButton"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:rightType</span>=<span class="string">"imageButton"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:showBottomLine</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:statusBarColor</span>=<span class="string">"?attr/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:titleBarColor</span>=<span class="string">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在activity布局文件中使用include引入此布局，merge标签为了减少视图层级（详细使用参考<a href="https://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="noopener">Android抽象布局</a>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/common_titlebar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>布局复用可以有效地统一标题栏风格，每个页面设置不同的标题和图标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commonTitleBar = findViewById(R.id.common_titlebar);</span><br><span class="line">commonTitleBar.getCenterTextView().setText(<span class="string">"标题栏"</span>);</span><br><span class="line">commonTitleBar.getRightImageButton().setImageResource(R.drawable.main_action_icon_user);</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-actionbar.png" alt="ActionBar"></p><h3 id="1-2-UI模块lib-ui"><a href="#1-2-UI模块lib-ui" class="headerlink" title="1.2 UI模块lib-ui"></a>1.2 UI模块lib-ui</h3><p>模块化开发应用模块之间不直接相互依赖，各模块之间内的样式不可直接被其他模块调用，因此有必要创建UI基础库，将公共样式放在UI库中。</p><p>按照<a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a>中基础库搭建方法，新建lib-ui存放公共样式和资源文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├─res</span><br><span class="line">|  ├─values</span><br><span class="line">|  |   ├─colors.xml</span><br><span class="line">|  |   ├─dimens.xml</span><br><span class="line">|  |   ├─strings.xml</span><br><span class="line">|  |   ├─styles.xml</span><br><span class="line">|  |   └theme.xml</span><br><span class="line">|  ├─layout</span><br><span class="line">|  |   └common_titlebar.xml</span><br><span class="line">|  ├─drawable-xxxhdpi</span><br><span class="line">|  |        ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-xxhdpi</span><br><span class="line">|  |        ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-xhdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-mdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-hdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable</span><br><span class="line">|  |    ├─common_transparent.xml</span><br><span class="line">|  |    └theme_button_selector.xml</span><br></pre></td></tr></table></figure><p>使lib-common依赖lib-ui，因此各应用模块就可以使用lib-ui中的公共样式。</p><h2 id="二、主题切换"><a href="#二、主题切换" class="headerlink" title="二、主题切换"></a>二、主题切换</h2><p>主题切换功能开发思路如下：</p><ul><li>根据上述布局风格统一原则配置两套主题</li><li>在Activity中为App设置主题</li><li>动态设置主题，主题设置立即生效</li><li>复杂的View组件随主题动态变化</li></ul><h3 id="2-1-主题配置"><a href="#2-1-主题配置" class="headerlink" title="2.1 主题配置"></a>2.1 主题配置</h3><h4 id="配置至少两个主题"><a href="#配置至少两个主题" class="headerlink" title="配置至少两个主题"></a>配置至少两个主题</h4><p>在lib-ui\src\main\res下添加两个资源文件theme-default.xml、theme-dark.xml，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─values</span><br><span class="line">|   ├─theme-dark.xml</span><br><span class="line">|   ├─theme-default.xml</span><br><span class="line">|   └theme.xml</span><br></pre></td></tr></table></figure><p>在theme.xml添加主题父类，theme-default和theme-dark中分别定义两个主题继承theme中的父主题：</p><p>theme.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  Base application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppBaseTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">    &lt;!--&lt;item name=&quot;android:background&quot;&gt;@drawable/main_background&lt;/item&gt;--&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>theme-default.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Default application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;android:windowBackground&quot;&gt;@color/light_gray&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:buttonStyle&quot;&gt;@style/ButtonTheme&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;color name=&quot;colorPrimary&quot;&gt;#289ff4&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorPrimaryDark&quot;&gt;#0b79b7&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorAccent&quot;&gt;@color/white&lt;/color&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;ButtonTheme&quot; parent=&quot;@android:style/Widget.Button&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:textSize&quot;&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_margin&quot;&gt;@dimen/spacing_tiny&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingTop&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingBottom&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:background&quot;&gt;@drawable/theme_button_selector&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>theme-dark.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Dark application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppDarkTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorDarkPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorDarkPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorDarkAccent&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;android:windowBackground&quot;&gt;@color/colorDarkPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:buttonStyle&quot;&gt;@style/DarkButtonTheme&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;color name=&quot;colorDarkPrimary&quot;&gt;#222222&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorDarkPrimaryDark&quot;&gt;#333333&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorDarkAccent&quot;&gt;#333333&lt;/color&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;DarkButtonTheme&quot; parent=&quot;@android:style/Widget.Button&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:textSize&quot;&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_margin&quot;&gt;@dimen/spacing_tiny&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingTop&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingBottom&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:background&quot;&gt;@drawable/theme_button_selector&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="配置的内容"><a href="#配置的内容" class="headerlink" title="配置的内容"></a>配置的内容</h4><p>主题配置中重要的配置项，参见Material Design的<a href="https://material.io/design/color/#color-theme-creation" target="_blank" rel="noopener">The Color System</a>：</p><ul><li>colorPrimary：基色，跨域整个App各个页面和组件最常用的颜色，常用于应用栏（Appbar）</li><li>colorPrimaryDark：重基色，一般为状态栏（Sytembar）的颜色，与应用栏形成对比色</li><li>colorAccent:着重色，各View被选中或突出显示时的颜色；Item或CardView的背景色</li><li>android:windowBackground：界面背景色</li><li>android:buttonStyle：按钮样式；其他组件样式也可全局定义</li></ul><p><img src="http://pic.blackist.top/android-modulize-ui-theme-color-system.png" alt="颜色系统"></p><p>各样式和value在activity布局文件中使用如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"?android:windowBackground"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"org.blackist.modulize.main.view.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/common_titlebar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/spacing_tiny"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"@dimen/spacing_tiny"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Use colorAccent \nAs \nItem Backgroud"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为页面设置背景色，使用 <strong>background=”?android:windowBackground”</strong> 属性;</p><p>colorAccent用作List Item布局 或 局部布局的背景，当主题切换时Item背景随之切换，使用方式 <strong>background=”?attr/colorAccent”</strong>；</p><p>Button等组件的样式使用 <strong>style=”?android:attr/buttonStyle”</strong>设置；</p><p>本项目文字颜色自适应，即根据当前主题，安卓系统会自动设置字黑色或白色；</p><p>从 <strong>?android:windowBackground</strong> 和 <strong>?colorAccent</strong> 中可以看出，根据如下主题配置项配置方式，决定布局文件中使用这些属性的方式：</p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-item.png" alt="主题配置项配置方式"></p><h3 id="2-2-主题切换"><a href="#2-2-主题切换" class="headerlink" title="2.2 主题切换"></a>2.2 主题切换</h3><p>使用SDK中的setTheme方法设置主题，设置主题需要在setContentView()之前调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    // before set ContentView</span><br><span class="line">    setTheme(mThemeDefault ? R.style.setTheme : R.style.AppTheme);</span><br><span class="line">    setContentView(R.layout.main_activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mThemeDefault为boolean类型的值，存储在SharedPreference中，App启动时读取其值使得App记住用户偏好。</p><p>切换后的主题如下：                    </p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-dark_.jpg" alt></p><h4 id="2-3-主题动态切换"><a href="#2-3-主题动态切换" class="headerlink" title="2.3 主题动态切换"></a>2.3 主题动态切换</h4><p>当使用按钮或Switch触发主题设置后，视图已经创建，设置不能立即生效，需要重启App才能看到效果。想要立即生效则需要重建当前栈中所有activity，因此需要获取到所有已加载activity，使用lib-apptools下的AppManager工具类，在Activity的onCreate()中将自身加入Activity栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppManager.getInstance().addActivity(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>在onDestory()中使activity出栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppManager.getInstance().removeActivity(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>调用AppManager.getInstance().recreateAllActivity()方法重建栈中Activity，使得主题切换立即生效。</p><h2 id="三、组件主题"><a href="#三、组件主题" class="headerlink" title="三、组件主题"></a>三、组件主题</h2><p>配置某些组件跟随主题变换颜色等样式。</p><h3 id="3-1-AlertDialog"><a href="#3-1-AlertDialog" class="headerlink" title="3.1 AlertDialog"></a>3.1 AlertDialog</h3><p>配置Dialog的默认样式类似于Button的全局样式，但稍加复杂一些。</p><p>在theme-default.xml中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default application theme. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"alertDialogTheme"</span>&gt;</span>@style/AlertDialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTitleStyle"</span>&gt;</span>@style/AlertDialogTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialogTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textAppearance"</span>&gt;</span>@style/AlertDialogTitleStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialogTitleStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.DialogWindowTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>theme-dark.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dark application theme. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppDarkTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"alertDialogTheme"</span>&gt;</span>@style/DarkAlertDialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTitleStyle"</span>&gt;</span>@style/DarkAlertDialogTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/text_hint<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/colorDarkAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialogTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textAppearance"</span>&gt;</span>@style/DarkAlertDialogTitleStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialogTitleStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.DialogWindowTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/text_hint<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Activity中new AlertDialog即可，无需多余的样式设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mTypeDialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">    .setIcon(R.mipmap.ic_launcher_round)</span><br><span class="line">    .setTitle(<span class="string">"AlertDialog Theme"</span>)</span><br><span class="line">    .setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setPositiveButton(<span class="string">"Confirm"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).create();</span><br><span class="line">mTypeDialog.show();</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-theme-alertdialog-nal.png" alt></p><p>切换主题后，AlertDialog样式随之变化：</p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-alertdialog.png" alt></p><h3 id="3-2-获取当前主题属性"><a href="#3-2-获取当前主题属性" class="headerlink" title="3.2 获取当前主题属性"></a>3.2 获取当前主题属性</h3><p>在某些自定义组件中需要获取App主题色，比如在AlertDialog中添加一个轮滑选择器，自定义组件Whiew（在lib-ui\src\main\java\org\blackist\modulize\ui\widget\whiew下），当设置文本时需要获取当前主题的相关属性来设置样式。</p><h4 id="获取Color"><a href="#获取Color" class="headerlink" title="获取Color"></a>获取Color</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TypedValue typedValue = new TypedValue();</span><br><span class="line">Theme theme = context.getTheme();</span><br><span class="line">theme.resolveAttribute(R.attr.colorPrimary, typedValue, true);</span><br><span class="line">@ColorInt int color = typedValue.data;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="获取Dimen"><a href="#获取Dimen" class="headerlink" title="获取Dimen"></a>获取Dimen</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, context.getResources().getDimensionPixelSize(R.dimen.font_normal));</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-theme-prop.png" alt></p><hr><p>项目Github地址：<a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">https://github.com/blackist/modulize</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.25xt.com/android" target="_blank" rel="noopener">https://www.25xt.com/android</a></p><p><a href="https://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="noopener">https://blog.csdn.net/xyz_lmn/article/details/14524567</a></p><p><a href="https://material.io/design/color/#color-theme-creation" target="_blank" rel="noopener">https://material.io/design/color/#color-theme-creation</a></p><p><a href="https://stackoverflow.com/questions/29797134/how-to-use-and-style-new-alertdialog-from-appcompat-22-1-and-above" target="_blank" rel="noopener">https://stackoverflow.com/questions/29797134/how-to-use-and-style-new-alertdialog-from-appcompat-22-1-and-above</a></p><p><a href="https://stackoverflow.com/questions/17277618/get-color-value-programmatically-when-its-a-reference-theme" target="_blank" rel="noopener">https://stackoverflow.com/questions/17277618/get-color-value-programmatically-when-its-a-reference-theme</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;客户端开发中UI设计极其重要，直接影响用户体验和App的品质；其次UI设计应做到样式、排版统一，简化布局文件，方便全局修改和维护。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="UI" scheme="https://blackist.org/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>校友录-网站样式设计</title>
    <link href="https://blackist.org/2019/03/14/javaweb-ar-style/"/>
    <id>https://blackist.org/2019/03/14/javaweb-ar-style/</id>
    <published>2019-03-14T11:22:46.000Z</published>
    <updated>2019-06-29T13:53:20.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/blackist/ar" target="_blank" rel="noopener">校友录</a>项目网站样式设计简要说明。</p><a id="more"></a><h2 id="一、门户网站"><a href="#一、门户网站" class="headerlink" title="一、门户网站"></a>一、门户网站</h2><h3 id="1-1-首页轮播图"><a href="#1-1-首页轮播图" class="headerlink" title="1.1 首页轮播图"></a>1.1 首页轮播图</h3><p>在 ar-parent\ar-portal\src\main\webapp\WEB-INF\views\portal-main\index.jsp 中有如下代码：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index.png" alt></p><p>div.carousel中即使首页的轮播图，图片暂不支持后台手动设置，需要存放在 assets/images/school/ 下或assets其它文件夹下面。</p><p>图片尺寸建议采用2600x720的。</p><h3 id="1-2-导航栏样式"><a href="#1-2-导航栏样式" class="headerlink" title="1.2 导航栏样式"></a>1.2 导航栏样式</h3><p>导航栏由两部分组成：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index-header.png" alt></p><p>上面的header，下面的是导航菜单(nav)，这两部分在index.jsp中通过include引入，分别位于 WEB-INF/views/portal-common/header.jsp 和 WEB-INF/views/portal-common/navmenu.jsp。门户网站主要样式在 assets/css/style.css 中定义。</p><h4 id="Header样式"><a href="#Header样式" class="headerlink" title="Header样式"></a>Header样式</h4><p>在style.css中搜索 .top_bg，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-- header_top --*/</span></span><br><span class="line"><span class="selector-class">.top_bg</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#666666</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background就是header的背景色。</p><h4 id="Nav样式"><a href="#Nav样式" class="headerlink" title="Nav样式"></a>Nav样式</h4><p>在style.css中搜索 .mega_nav，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mega_nav</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">5px</span> <span class="number">#CCCBCB</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改background改变Nav整个背景色。Nav中菜单项的颜色在 assets/css/megamenu.css 中定义，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.skyblue</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.color1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#204056</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可修改菜单项hover的样式，菜单项背景色等可以自行探索。</p><p>修改后导航栏后整体样式如下（一不小心破相了~）：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index-style.png" alt></p><h3 id="1-3-表单样式"><a href="#1-3-表单样式" class="headerlink" title="1.3 表单样式"></a>1.3 表单样式</h3><p>门户网站表单组件绝大部分使用bootstrap样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-profile.png" alt></p><p>可根据bootstrap修改按钮等组件样式，本项目参考了一份模板进行设计，整个模板素材存在 ar\ar-tools\model-portal\Bracket1.5\ 下。</p><p>表单样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap.png" alt></p><p>按钮样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap-button.png" alt></p><p>表格及分页器：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap-pager.png" alt></p><p>门户网站风格和此模板素材基本保持一致，可参考修改。</p><h2 id="二、后台管理"><a href="#二、后台管理" class="headerlink" title="二、后台管理"></a>二、后台管理</h2><p>后台管理网站样式主要定义在 ar-manage\src\main\webapp\assets\css\admin.css 下。</p><h3 id="1-1-首页样式"><a href="#1-1-首页样式" class="headerlink" title="1.1 首页样式"></a>1.1 首页样式</h3><h4 id="管理页主题title"><a href="#管理页主题title" class="headerlink" title="管理页主题title"></a>管理页主题title</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-header.png" alt></p><p>在 WEB-INF/views/main/index.jsp 中搜索如下代码，修改此处即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 导航 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-topbar-brand"</span>&gt;</span><br><span class="line">    &lt;strong&gt;信电校友录&lt;/strong&gt;</span><br><span class="line">    &lt;small&gt;后台管理&lt;/small&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-footer.png" alt></p><p>在 WEB-INF/views/global/footer.jsp 中修改即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-padding-left"</span>&gt;</span><br><span class="line">CopyRight © 2015 . &lt;a href="#" target="_blank"&gt;徐州工程学院信电学院&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-sidebar.png" alt></p><p>在 WEB-INF/views/global/sidebar.jsp 中修改即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 公告 bookmark --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel am-panel-default admin-sidebar-panel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel-bd"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;span class="am-icon-bookmark"&gt;&lt;/span&gt; 公告</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;时光静好，与君语；细水流年，与君同。—— 信电校友录&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 社群 wiki --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel am-panel-default admin-sidebar-panel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel-bd"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;span class="am-icon-tag"&gt;&lt;/span&gt; 社群</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;欢迎来到信电校友录后台管理!&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-表单样式等"><a href="#1-2-表单样式等" class="headerlink" title="1.2 表单样式等"></a>1.2 表单样式等</h3><p>后台管理网站整站风格参考一套AmazeUI素材，素材存在 ar\ar-tools\model-admin\ 下，</p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui.png" alt></p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui-form.png" alt></p><p>按钮等组件样式可参考<a href="http://amazeui.org/" target="_blank" rel="noopener">Amaze官网</a>：</p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui-website.png" alt></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/blackist/ar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校友录&lt;/a&gt;项目网站样式设计简要说明。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="开源" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android测试-Monkey Test</title>
    <link href="https://blackist.org/2019/03/13/android-test-monkey-test/"/>
    <id>https://blackist.org/2019/03/13/android-test-monkey-test/</id>
    <published>2019-03-13T01:36:24.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>APP开发过程中，开人员往往自己做一些功能测试和稳定性测试，使用MonkeyTest做<strong>压力测试</strong>是常用方法，及时修复ANR、CRASH提高项目组整体的开发效率。</p><a id="more"></a><h2 id="一、Monkey简介"><a href="#一、Monkey简介" class="headerlink" title="一、Monkey简介"></a>一、Monkey简介</h2><p>Monkey是一种命令行工具，向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，这个工具存在于Android系统/system/framework/monkey.jar，Android设备/模拟器连接到PC后通过adb shell使用此工具，monkey测试流程如下。</p><p><img src="http://pic.blackist.top/android-test-monkey-framework.png" alt="monkey架构"></p><p>因此两种方式使用monkey，第一种在PC端直接运行命令行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey --[params]</span><br></pre></td></tr></table></figure><p>第二种进入shell中使用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">&gt; shell@android: monkey --[params]</span><br></pre></td></tr></table></figure><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>使用如下命令进行monkey测试：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p org.blackist.modulize --throttle <span class="number">100</span> -v -v <span class="number">100</span> &gt; test.log</span><br></pre></td></tr></table></figure><ul><li>-p org.blackist.modulize：测试包名为org.blackist.modulize</li><li>–throttle 100：每100ms发送一次事件</li><li>-v -v：指定日志级别</li><li>> test.log：输出日志到文件</li></ul><p>如下是monkey日志中测试到的ANR和CRASH：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Sleeping for 100 milliseconds</span><br><span class="line">:Sending Key (ACTION_DOWN): 23    // KEYCODE_DPAD_CENTER</span><br><span class="line">// CRASH: cn.edu.zstu.sdmp (pid 17698)</span><br><span class="line">// Short Msg: java.lang.NullPointerException</span><br><span class="line">// Long Msg: java.lang.NullPointerException: Attempt to invoke virtual method &apos;com.wuhenzhizao.titlebar.widget.CommonTitleBar cn.edu.zstu.sdmp.manage.view.ManageActivity.getCommonTitle()&apos; on a null object reference</span><br><span class="line">// Build Label: vivo/PD1603/PD1603:5.1.1/LMY47V/compiler07131528:user/release-keys</span><br><span class="line">// Build Changelist: eng.compiler.20180713.152451</span><br><span class="line">// Build Time: 1531466945000</span><br><span class="line">// java.lang.NullPointerException: Attempt to invoke virtual method &apos;com.wuhenzhizao.titlebar.widget.CommonTitleBar cn.edu.zstu.sdmp.manage.view.ManageActivity.getCommonTitle()&apos; on a null object reference</span><br><span class="line">//      at cn.edu.zstu.sdmp.manage.view.repair.RepairDetailFragment.initView(RepairDetailFragment.java:153)</span><br><span class="line">//      at cn.edu.zstu.sdmp.manage.view.repair.RepairDetailFragment.initViewAndData(RepairDetailFragment.java:113)</span><br><span class="line">//      at cn.edu.zstu.sdmp.common.base.BaseFragment.onCreateView(BaseFragment.java:135)</span><br><span class="line">//      at android.support.v4.app.Fragment.performCreateView(Fragment.java:2354)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1419)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1740)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1809)</span><br><span class="line">//      at android.support.v4.app.BackStackRecord.executeOps(BackStackRecord.java:799)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.executeOps(FragmentManager.java:2580)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2367)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2322)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2229)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl$1.run(FragmentManager.java:700)</span><br><span class="line">//      at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">//      at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">//      at android.os.Looper.loop(Looper.java:135)</span><br><span class="line">//      at android.app.ActivityThread.main(ActivityThread.java:5418)</span><br><span class="line">//      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">//      at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class="line">//      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1037)</span><br><span class="line">//      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:832)</span><br><span class="line">//</span><br><span class="line">// NOT RESPONDING: cn.edu.zstu.sdmp (pid 17698)</span><br><span class="line">ANR in cn.edu.zstu.sdmp (cn.edu.zstu.sdmp/.manage.view.ManageActivity)</span><br><span class="line">PID: 17698</span><br><span class="line">Reason: Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)</span><br></pre></td></tr></table></figure><p>可以清楚分析出错误所在的地方，所以monkey是个物美价廉的测试工具啊~</p><h2 id="三、参数说明"><a href="#三、参数说明" class="headerlink" title="三、参数说明"></a>三、参数说明</h2><p>monkey工具参数如下（图片<a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">来源</a>）：</p><p><img src="http://pic.blackist.top/android-test-monkey-params.png" alt="monkey参数"></p><h3 id="3-1-基础参数"><a href="#3-1-基础参数" class="headerlink" title="3.1 基础参数"></a>3.1 基础参数</h3><h4 id="p-lt-允许的包名列表-gt"><a href="#p-lt-允许的包名列表-gt" class="headerlink" title="-p &lt;允许的包名列表&gt;"></a>-p &lt;允许的包名列表&gt;</h4><p>用此参数指定一个或多个包。指定包之后，monkey将只允许系统启动指定的app。如果不指定包， monkey将允许系统启动设备中的所有app。  </p><p>指定一个包：adb shell monkey -p org.blackist.modulize 100   </p><p>指定多个包：adb shell monkey -p org.blackist.modulize  –p org.blackist.brouter  100</p><h4 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h4><p>用亍指定反馈信息级别（信息级别就是日志的详细程度），总共分3个级别，分别对应的参数如下： </p><p>Level 0  :  adb shell monkey -p org.blackist.modulize -v 100         // 缺省值，仅提供启动提示、测试完成和最终结果等少量信息   </p><p>Level 1  :  adb shell monkey -p org.blackist.modulize -v  -v 100     // 提供较为详细的日志，包括每个发送到Activity的事件信息</p><p>Level 2  :  adb shell monkey -p org.blackist.modulize -v  -v  -v 100 // 最详细的日志，包括了测试中选中/未选中的Activity信息</p><p>一般来说，使用Level0即可。</p><h4 id="s-随机数种子"><a href="#s-随机数种子" class="headerlink" title="-s  (随机数种子)"></a>-s <seed> (随机数种子)</seed></h4><p>用亍指定伪随机数生成器的seed值，如果seed相同，则两次Monkey测试所产生的事件序列也相同的。  示例：</p><p>monkey测试1：adb shell monkey -p org.blackist.modulize –s 101 100                </p><p>monkey测试2：adb shell monkey -p org.blackist.modulize –s 101 100 </p><p>这个参数其实比较重要，比如我们只看日志不容易确定错误位置，需要结合monkey的UI测试过程，这时需要执行相同的随机序列复现步骤。</p><h4 id="–throttle-延时ms"><a href="#–throttle-延时ms" class="headerlink" title="–throttle  (延时ms)"></a>–throttle <delay> (延时ms)</delay></h4><p>用亍指定用户操作（即事件）间的时延，单位是毫秒；如果不指定这个参数，monkey会尽可能快地生成和发送消息。 示例：</p><p>adb shell monkey -p org.blackist.modulize –throttle 3000 100   </p><h3 id="3-2-发送的事件类型"><a href="#3-2-发送的事件类型" class="headerlink" title="3.2 发送的事件类型"></a>3.2 发送的事件类型</h3><p>–pct-touch <percent> （点击事件）</percent></p><p>参数percent为此事件的百分比，比如要求monkey完成10次点击事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p org.blackist.modulize -v --pct-touch 100 10</span><br></pre></td></tr></table></figure><p>可以看到如下日志，Event percentages是事件百分比，点击事件100%，其余都是0：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">:Monkey: seed=<span class="number">1552849997195</span> count=<span class="number">10</span></span><br><span class="line">:AllowPackage: cn.edu.zstu.sdmp</span><br><span class="line">:IncludeCategory: android.intent.category.LAUNCHER</span><br><span class="line">:IncludeCategory: android.intent.category.MONKEY</span><br><span class="line">// Event percentages:</span><br><span class="line">//   <span class="number">0</span>: <span class="number">100</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">1</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">2</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">3</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">4</span>: -<span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">5</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">6</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">7</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">8</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">9</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">10</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">:Switch: #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=<span class="number">0</span>x10200000;component=cn.edu.zstu.sdmp/.main.view.SplashActivity;end</span><br><span class="line">    // Allowing <span class="built_in">start</span> of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=cn.edu.zstu.sdmp/.main.view.SplashActivity &#125; <span class="keyword">in</span> package cn.edu.zstu.sdmp</span><br></pre></td></tr></table></figure><p>–pct-motion <percent> （动作事件）</percent></p><p>–pct-trackball <percent> （轨迹球事件）</percent></p><p>–pct-nav <percent> （基本导航事件，输入设备的上、下、左、右）</percent></p><p>–pct-majornav <percent> （主要导航事件，兼容中间键，返回键，菜单按键）</percent></p><p>–pct-syskeys <percent> （系统导航事件，HOME、BACK及拨号音量键）</percent></p><p>–pct-appswitch <percent> （启动App事件）</percent></p><p>–pct-anyevent <percnet> (不常用事件)</percnet></p><p>–ignore-crashes （忽略崩溃事件 CRASH）</p><p>–ignore-timeouts （忽略超时事件 ANR）</p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>monkey test 执行后分析保存的日志，可以搜索CRASH、ANR、Exception等关键字查看错误信息，详细的日志分析参考<a href="http://www.cnblogs.com/wfh1988/archive/2010/11/16/1878224.html" target="_blank" rel="noopener">http://www.cnblogs.com/wfh1988/archive/2010/11/16/1878224.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yuti.site/2019/03/02/MonkeyTesting/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://yuti.site/2019/03/02/MonkeyTesting/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/p/4815134.html</a></p><p><a href="https://blog.csdn.net/gzh0222/article/details/6631988" target="_blank" rel="noopener">https://blog.csdn.net/gzh0222/article/details/6631988</a></p><p><a href="https://blog.csdn.net/viewsky11/article/details/53889143" target="_blank" rel="noopener">https://blog.csdn.net/viewsky11/article/details/53889143</a></p><p><a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/p/4815134.html</a></p><p><a href="https://blog.csdn.net/MTbaby/article/details/78792215" target="_blank" rel="noopener">https://blog.csdn.net/MTbaby/article/details/78792215</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;APP开发过程中，开人员往往自己做一些功能测试和稳定性测试，使用MonkeyTest做&lt;strong&gt;压力测试&lt;/strong&gt;是常用方法，及时修复ANR、CRASH提高项目组整体的开发效率。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="测试" scheme="https://blackist.org/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="monkey" scheme="https://blackist.org/tags/monkey/"/>
    
  </entry>
  
  <entry>
    <title>校友录-项目线上部署</title>
    <link href="https://blackist.org/2019/03/09/javaweb-ar-deploy-path/"/>
    <id>https://blackist.org/2019/03/09/javaweb-ar-deploy-path/</id>
    <published>2019-03-09T12:11:47.000Z</published>
    <updated>2019-06-29T13:53:20.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/blackist/ar" target="_blank" rel="noopener">校友录</a>作为一个具备门户网站服务、后台管理功能的完整项目，可以部署上线使用，线上部署需要注意些事项，本文就笔者的开发过程做个记录。</p><a id="more"></a><h2 id="一、项目编译"><a href="#一、项目编译" class="headerlink" title="一、项目编译"></a>一、项目编译</h2><p>校友录是基于maven构建的多模块项目，ar-parent是父模块，ar-common、ar-manage、ar-portal是子模块，ar-common中主要存放一些实体类、与数据库交互的Mapper文件以及一些基类和工具类，ar-manage、ar-portal皆依赖ar-common，在编译时需要首先编译ar-common并安装到本地，但其实编辑顺序maven可以自行判断，我们只需要执行编译命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─ar-parent</span><br><span class="line">   ├─ar-common</span><br><span class="line">   ├─ar-manage</span><br><span class="line">   └─ar-portal</span><br></pre></td></tr></table></figure><p>校友录项目配置了maven编译插件<strong>maven-war-plugin</strong>，推荐在本地编译项目不建议在服务器构建，项目将以war包的形式部署到tomcat，在ar-parent目录下执行编译命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean &amp;&amp; mvn install &amp;&amp; mvn package</span><br></pre></td></tr></table></figure><p>编译完成后可看到如下日志：</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-compile-ok.png" alt="校友录构建"></p><p>构建好的ar-portal.war在ar-parent/ar-portal/target/目录下。</p><h2 id="二、服务器配置"><a href="#二、服务器配置" class="headerlink" title="二、服务器配置"></a>二、服务器配置</h2><p>本文以服务器Ubuntu16.04，JDK1.8，Tomcat8.5为例</p><h3 id="2-1-安装JDK1-8"><a href="#2-1-安装JDK1-8" class="headerlink" title="2.1 安装JDK1.8"></a>2.1 安装JDK1.8</h3><p>添加Oracle的PPA(Personal Package Archive)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure><p>添加完成后依次执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>安装成功后验证下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure><p>设置java的环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>文件末尾添加如下内容（替换自己的java路径）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot;</span><br></pre></td></tr></table></figure></p><p>最后重载环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/environment</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure></p><h3 id="2-2-安装tomcat"><a href="#2-2-安装tomcat" class="headerlink" title="2.2 安装tomcat"></a>2.2 安装tomcat</h3><p>下载<a href="http://apache.cs.utah.edu/tomcat/tomcat-8/v8.5.38/bin/apache-tomcat-8.5.38-fulldocs.tar.gz" target="_blank" rel="noopener">Tomcat8.5</a>至服务器，建议放在 /opt/ 目录下解压缩即可。</p><p>tomcat默认使用8080端口，可在conf/server.xml中配置端口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class="line">   port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">   connectionTimeout=&quot;20000&quot;</span><br><span class="line">   redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-安装MySQL5-1数据库"><a href="#2-3-安装MySQL5-1数据库" class="headerlink" title="2.3 安装MySQL5.1数据库"></a>2.3 安装MySQL5.1数据库</h3><p>安装MySQL5.1数据库，使用可视化<a href="http://pic.blackist.top/spring-ar-deploy-path-NavicatPro.zip" target="_blank" rel="noopener">客户端Navicat等</a>新建ar数据库，编码utf-t，导入数据库表结构ar-mysql-data.sql。</p><p>如果数据库用户名密码和项目中<strong>ar-parent\ar-portal\src\main\resources\config.properties</strong>中不一致，则修改项目配置并重新编译上传服务器。</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-mysql-config.png" alt="校友录数据库"></p><h2 id="三、应用发布"><a href="#三、应用发布" class="headerlink" title="三、应用发布"></a>三、应用发布</h2><h3 id="3-1-war包发布"><a href="#3-1-war包发布" class="headerlink" title="3.1 war包发布"></a>3.1 war包发布</h3><p>war放在tomcat的webapps/目录下，执行tomcat/bin/下的./startup.sh，tomcat即可启动。</p><p>启动过程中可能出现异常，此时可监听tomcat日志，在tomcat/logs/下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><p>监听到如下日志，说明项目启动成功：</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-project-init.png" alt="校友录启动"></p><h3 id="3-2-静态资源路径"><a href="#3-2-静态资源路径" class="headerlink" title="3.2 静态资源路径"></a>3.2 静态资源路径</h3><p>笔者最初开发的时候，jsp页面中采用如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">// 获取ar-portal</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">// 获取 http://localhost:8080/</span><br><span class="line">String basePath = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort()</span><br><span class="line">+ path + &quot;/&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>如此，页面中的静态资源文件、a标签超链接和Form的action都以<a href>http://localhost:8080/ar-portal/</a>作为基础路径，在本地开发没有任何个问题，当部署到服务器时网站界面一篇空白，我的大脑一阵抽搐，知道肯定是路径出了问题。</p><p>经过排查就是这个basePath引起的，部署到公网服务器资源路径应该是<a href>http://公网ip:8080/ar-portal/</a>，可界面中静态资源等的路径依然是localhost…</p><p>解决路径问题较好的实践是在路径前加入项目环境路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 静态资源路径加入Spring的环境路径 $&#123;pageContext.request.contextPath&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ta/show.action?userId=$&#123;member.userId&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"min-height: 125px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;member.portrait&#125;"</span> <span class="attr">class</span>=<span class="string">"img-responsive center-block"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"max-height: 125px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        $&#123;member.trueName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- a标签超链接加入Spring的环境路径 $&#123;pageContext.request.contextPath&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/ta/show.action?userId=$&#123;member.userId&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"min-height: 125px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;member.portrait&#125;"</span> <span class="attr">class</span>=<span class="string">"img-responsive center-block"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"max-height: 125px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        $&#123;member.trueName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-js中处理环境路径"><a href="#3-3-js中处理环境路径" class="headerlink" title="3.3 js中处理环境路径"></a>3.3 js中处理环境路径</h3><p>独立的js文件无法通过 ${pageContext.request.contextPath} 获取环境路径，可以通过location获取contextPath，如下getContextPath()可放在全局js中，这样在任意文件中都可以调用此方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取 contextPath</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getContextPath() &#123;</span><br><span class="line">    var pathName = document.location.pathname;</span><br><span class="line">    var index = pathName.substr(1).indexOf(&quot;/&quot;);</span><br><span class="line">    var result = pathName.substr(0, index + 1);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.post(&apos;classroom/joinClass.action&apos;, &#123;</span><br><span class="line">&quot;userId&quot; : userId,</span><br><span class="line">&quot;classId&quot; : classId</span><br><span class="line">&#125;, function(data) &#123;</span><br><span class="line">window.location.reload();</span><br><span class="line">&#125;);</span><br><span class="line">// 在ajax的url中加入环境路径</span><br><span class="line">$.post(getContextPath() + &apos;/classroom/joinClass.action&apos;, &#123;</span><br><span class="line">&quot;userId&quot; : userId,</span><br><span class="line">&quot;classId&quot; : classId</span><br><span class="line">&#125;, function(data) &#123;</span><br><span class="line">window.location.reload();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>整个项目jsp、js的路径翻修一通，那可真是酸爽。</p><h2 id="四、Nginx域名解析"><a href="#四、Nginx域名解析" class="headerlink" title="四、Nginx域名解析"></a>四、Nginx域名解析</h2><p>自行安装nginx软件，域名商控制台设置域名解析到服务器ip，在/etc/nginx/conf.d/下新建配置文件，文件名任意以.conf结尾即可，如tomcat.conf，配置文件中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name tomcat.blackist.top;</span><br><span class="line">        listen      80;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即当通过域名访问时，访问被代理到本地tomcat的localhost:8080服务，通过域名<a href="http://tomcat.blackist.top/ar-portal/index.action" target="_blank" rel="noopener">http://tomcat.blackist.top/ar-portal</a>即可访问到部署在服务器上的Web应用。</p><hr><p>项目地址：<a href="https://github.com/blackist/ar" target="_blank" rel="noopener">https://github.com/blackist/ar</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/blackist/ar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校友录&lt;/a&gt;作为一个具备门户网站服务、后台管理功能的完整项目，可以部署上线使用，线上部署需要注意些事项，本文就笔者的开发过程做个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="开源" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>弱网测试环境搭建</title>
    <link href="https://blackist.org/2019/02/28/dev-network-weak-network-env/"/>
    <id>https://blackist.org/2019/02/28/dev-network-weak-network-env/</id>
    <published>2019-02-28T02:11:20.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Web应用、App应用测试中需要进行弱网测试，测试网络不稳定时应用做出的反应和提示是否友好、无歧义。通常情况下不稳定的网络环境使用工具来模拟，本文通过Fiddler设置网络规则限制应用的网络请求时间，达到弱网测试的目的。</p><a id="more"></a><h2 id="一、弱网环境搭建"><a href="#一、弱网环境搭建" class="headerlink" title="一、弱网环境搭建"></a>一、弱网环境搭建</h2><p>在windows操作系统中，下载解压<a href="http://pic.blackist.top/dev-network-Fiddler.rar" target="_blank" rel="noopener">Fiddler</a>(中文版，可到<a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">官网</a>安装最新原版)，打开软件主界面。</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-main.png" alt></p><h3 id="设置网络规则"><a href="#设置网络规则" class="headerlink" title="设置网络规则"></a>设置网络规则</h3><p>选项 Rule(规则)-&gt;Custom Rule(自定义规则)，弹出规则编辑器Fiddler Script编辑器，</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-main-script.png" alt></p><p>在编辑器中寻找如下代码段(Ctrl+F寻找关键字 m_SimulateModem)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">"300"</span>; </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">"150"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顾名思义，”request-trickle-delay”表示网络请求延时，”response-trickle-delay”表示网络响应延时，单位是毫秒(ms)。规则进行如下设置并保存，则网络请求延时3秒，网络响应延时3.5秒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">"3000"</span>; </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">"3500"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用网络限制"><a href="#应用网络限制" class="headerlink" title="应用网络限制"></a>应用网络限制</h3><p>修改并保存规则后，需要应用到系统中，选项 Rule(规则)-&gt;Performance(性能)-&gt;选中Simulate Modems Speeds(模拟调制解调器速度)，即可开启网络延迟</p><h3 id="扩展网络规则"><a href="#扩展网络规则" class="headerlink" title="扩展网络规则"></a>扩展网络规则</h3><p>设置固定的网络延时会使网络一直处于虚弱的环境，时好时坏的网络更贴近实际网络，修改规则可实现动态变化的网络环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机整数</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">randInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(max-min)+min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">""</span> + randInt(<span class="number">1</span>, <span class="number">6000</span>); </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">""</span> + randInt(<span class="number">1</span>, <span class="number">3000</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Web应用弱网环境测试"><a href="#Web应用弱网环境测试" class="headerlink" title="Web应用弱网环境测试"></a>Web应用弱网环境测试</h2><p>基于以上搭建的PC端弱网环境，在本机通过浏览器等访问Web应用即可实现弱网环境测试。</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-console-web.png" alt></p><h2 id="移动应用弱网环境测试"><a href="#移动应用弱网环境测试" class="headerlink" title="移动应用弱网环境测试"></a>移动应用弱网环境测试</h2><p>移动端进行弱网测试时，iPhone可通过系统设置实现弱网环境，但移动设备一般通过PC端配置弱网环境，移动端与PC处于同一网段并设置网络代理，由PC端控制移动端的网络环境。</p><h3 id="Fiddler设置远程连接"><a href="#Fiddler设置远程连接" class="headerlink" title="Fiddler设置远程连接"></a>Fiddler设置远程连接</h3><p>基于以上Fiddler配置，接着Tools(工具)-&gt;选项(Options)-&gt;Connection(连接)，配置如下：</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-remote-connection.png" alt></p><h3 id="安卓设备设置代理"><a href="#安卓设备设置代理" class="headerlink" title="安卓设备设置代理"></a>安卓设备设置代理</h3><p>在连接的wifi界面中，设置手动代理，填写PC端代理的的ip和端口号，配置完成后安卓设备上的所有网络请求都被代理到Fiddler。</p><p><img src="http://pic.blackist.top/dev-network-weak-android-proxy.jpg" alt></p><p>ip通过PC端命令ipconfig查看:</p><p><img src="http://pic.blackist.top/dev-network-weak-proxy-ip.png" alt></p><p>若PC连接wifi，则选择WLAN适配器的ip。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u010618194/article/details/76652513" target="_blank" rel="noopener">https://blog.csdn.net/u010618194/article/details/76652513</a><br><a href="https://www.jianshu.com/p/c0b5ec817617" target="_blank" rel="noopener">https://www.jianshu.com/p/c0b5ec817617</a><br><a href="http://insights.thoughtworkers.org/mobile-testing-traps/" target="_blank" rel="noopener">http://insights.thoughtworkers.org/mobile-testing-traps/</a><br><a href="https://www.jianshu.com/p/728a993329b2?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.jianshu.com/p/728a993329b2?tdsourcetag=s_pctim_aiomsg</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web应用、App应用测试中需要进行弱网测试，测试网络不稳定时应用做出的反应和提示是否友好、无歧义。通常情况下不稳定的网络环境使用工具来模拟，本文通过Fiddler设置网络规则限制应用的网络请求时间，达到弱网测试的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://blackist.org/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何为你的代码选择一个开源协议</title>
    <link href="https://blackist.org/2019/01/18/public-open-source-license/"/>
    <id>https://blackist.org/2019/01/18/public-open-source-license/</id>
    <published>2019-01-18T01:24:02.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>相信很多刚踏入软件这个行业的小伙伴一如当初的我，对开源软件的各种协议不甚了解被搞昏了头脑。毕竟对于一个新生程序员来说，如何写好代码才是亟待解决的问题，无暇了解这些。随着你项目做得多了代码写得多了，你会发现编码过程中会不时用到其他人的成果，一个项目下来多少会引入一些优秀的库，别人放在公网上开源的DLL，以及一些算法等等。细心的你会注意到即使只是一小段代码，优秀的作者都在最开始会简单地附上一段关于许可的声明，或者说是协议比如”Licensed under the MIT license”，并且一些博客也会标明”此文章发表在CC协议下”。而如果我们Copy了别人的代码或者文字同时没注意这些的话，在国外法律意识特别强的环境下，我们的作品会因触犯别人的权益而违法。因为好多开源协议最低要求是使用者需要保留原作者对代码的声明，不声不响地就拿来用了必然导致恶果。</p><p>所以开源不等于免费，开源也不等于没有约束。</p><a id="more"></a><h2 id="一、何为License"><a href="#一、何为License" class="headerlink" title="一、何为License"></a>一、何为License</h2><p>License是软件的授权许可，里面详尽表述了你获得代码后拥有的权利，可以对别人的作品进行何种操作，何种操作又是被禁止的。软件协议可分为开源和商业。当然本文要讨论的当然是开源协议。</p><p>对于商业协议，或者叫法律声明、许可协议，每个软件会有自己的一套行文，由软件作者或专门律师撰写。这是什么惊为天人的东西嘛还得请专门的律师。因为涉及到以后侵权打官司这种事情，这种商业条款的行文是非常严谨而讲究的，记得以前看到句调侃的话：’如果法律文件不写得那么生涩难懂，律师们就没饭吃了’，就是说任何文字一旦上升到法律的层次，不要说你接受完了九年义务教育，就是考了个专八也会觉得英语白学了，直接的法律协议什么的那不是给常人看的。而至于法律条款缘何会晦涩难懂，这个偏题有点偏远了，可以查看<a href="https://rararizal.wordpress.com/2011/12/04/why-is-the-legal-language-so-hard-to-understand-part-1/" target="_blank" rel="noopener">这里</a>了解。看累了？下面是欢乐时刻，奉上一个协议相关的Joke（<a href="http://news.mydrivers.com/1/277/277017.htm" target="_blank" rel="noopener">笑崩！苹果iOS7升级协议条款中员工神吐槽</a>）。</p><p>所以对于大多数人来说，不用自己花大把时间去写许可协议，选择一分广为流传的开源协议是个不错的选择，如果你的作品是开源的话，这样省时又省心。</p><h2 id="二、选择一分协议的好处"><a href="#二、选择一分协议的好处" class="headerlink" title="二、选择一分协议的好处"></a>二、选择一分协议的好处</h2><p>你的作品如果不是定性为全商业性质，可以考虑选择一分流行度比较高的开源协议。具体来说的话，你肯定希望作品能够被多数人分享查阅吧，不但提高自己业界的知名度，同时也方便了需要的人为开源做出了贡献。换句话说，你不分享出来的话你的作品的意义何在呢（当然，自己捣腾的私人东西还是自己保留吧）？可是一旦你把你的代码贴出来，这就表示任何人都可以看到并获取，之后发生的事情你无法控制，有的人或许稍微修改一下放进自己的代码中，有的把你的软件改个名字拿去贩卖，有的甚至会拿去把作者名字改为自己然后拿去找工作什么的，而不会有人知道这个作品的原作者，背后辛勤付出了的人。所以为了公开分享你的代码，同时又让你对代码保留一定权利，在作品中声明一个许可协议是非常有必要的，这是很多新人所忽略的问题，同时很多人在使用别人的劳动成果时也会忽视协议的存在，这样不好。所以你会看到我的博客里面时不时会给出连接指向来源页面，同时文末也会列出所有参考过的文章。我相信我做到了这点，别人在转载我的文章的时候，也可以做到这点，这样营造出来的氛围一定会非常和谐，互相尊重/Show Respect。</p><p>多说一句，一个事实让你了解国外开发者在尊重他人劳动成果方面做得是如何的到位，如果A的作品是因为B的作品的启发而来，A甚至都没有使用B任何一句代码，但A会在他的作品里面指明是受到了B的启发”Inspired by XXX link :<a href="http://www.blah.com&quot;。" target="_blank" rel="noopener">http://www.blah.com&quot;。</a></p><p>当然有人会觉得，有了一分协议声明在那里，我就需要鸟你么，我拿来用了把作者名字去掉同时还要加上我的名字，你咬我？！这是后话，只是在利益很小的情况下，或者作者不知情的情况下，作者不会追究什么责任，但如果你的产品做成功了，那就不一定了。另外就是，有协议和没声明协议的裸代码是有非常重要区别的，一般作品当中没声明协议的默认为Copy right的，也就是版权保留。此种情况表明他人没有任何授权，不得复制分发修改使用等等，但一如上面所讨论的，这样的话还何来开源，何来分享呢。有了协议的声明，在未来你的维权上面会方便很多，让你的作品在分享的同时保留了自身的一些权利。</p><h2 id="三、快速选择"><a href="#三、快速选择" class="headerlink" title="三、快速选择"></a>三、快速选择</h2><p>目前流行的开源协议有很多，并且同一款协议有很多变种，比如你或许看到过’ CC Attribution-NoDerivs’,’ CC Attribution-NonCommercial’同属CC协议（后面会有介绍）。如此纷繁的协议该如何选择？协议太宽松会导致作者丧失对作品的很多权利，太严格又不便于使用者使用及作品的传播。所以除了协议多之外，你还要考虑你对作品想保留哪些权利，放开哪些限制。</p><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。下方关于协议的选择及表格来自GitHub <a href="https://choosealicense.com/" target="_blank" rel="noopener">choosealicence</a>项目。</p><h3 id="3-1-简单宽松的协议"><a href="#3-1-简单宽松的协议" class="headerlink" title="3.1 简单宽松的协议"></a>3.1 简单宽松的协议</h3><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="https://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT协议</a>相对宽松但还是抓住了要点的。此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。jQuery和Rails就是MIT协议。</p><h3 id="3-2-考虑有专利的情况"><a href="#3-2-考虑有专利的情况" class="headerlink" title="3.2 考虑有专利的情况"></a>3.2 考虑有专利的情况</h3><p>如果你的作品中涉及到专利相关。</p><p><a href="https://choosealicense.com/licenses/apache-2.0/" target="_blank" rel="noopener">Apache协议</a>也是个相对宽松与MIT类似的协议，但它简单指明了作品归属者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。Apache服务器，SVN还有NuGet等是使用的Apache协议。</p><h3 id="3-3-代码分享与促进"><a href="#3-3-代码分享与促进" class="headerlink" title="3.3 代码分享与促进"></a>3.3 代码分享与促进</h3><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="https://choosealicense.com/licenses/gpl-2.0/" target="_blank" rel="noopener">V2</a>或<a href="https://choosealicense.com/licenses/gpl-3.0/" target="_blank" rel="noopener">V3</a>）是一种版本自由的协议（可以参照copy right来理解，后者是版本保留，那copyleft便是版权自由，或者无版权，但无版权不代表你可以不遵守软件中声明的协议）。此协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布。此协议的版本3与版本2相近，只是多3中加了条对于不支持修改后代码运行的硬件的限制（没太明白此句话的内涵）。</p><h3 id="四、各协议授权详情"><a href="#四、各协议授权详情" class="headerlink" title="四、各协议授权详情"></a>四、各协议授权详情</h3><p>下面是更多开源协议的一个表格任君选择，总有一款是你的菜。</p><p>不过先来了解一些下方表格中出现的用词的解释：</p><ul><li>协议和版权信息(License and copyright notice)：在代码中保留作者提供的协议和版权信息</li><li>声明变更(State Changes)：在代码中声明对原来代码的重大修改及变更</li><li>公开源码(Disclose Source)：代码必需公开。如果是基于LGPL协议 下，则只需使用的开源代码公开，不必将整个软件源码公开</li><li>库引用(Library usage)：该库可以用于商业软件中</li><li>责任承担(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果</li><li>商标使用(Use Trademark)：可以使用作者的姓名，作品的Logo，或商标</li><li>附加协议(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等</li></ul><p><img src="http://pic.blackist.top/public-open-source-license-how_to_choose_a_license.html.png" alt="开源协议"></p><p>最流行的六种—-<a href="https://choosealicense.com/licenses/gpl-2.0/" target="_blank" rel="noopener">GPL</a>、<a href="https://choosealicense.com/licenses/bsd-2-clause/" target="_blank" rel="noopener">BSD</a>、<a href="https://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT</a>、<a href="https://choosealicense.com/licenses/mpl-2.0/" target="_blank" rel="noopener">Mozilla</a>、<a href="https://choosealicense.com/licenses/apache-2.0/" target="_blank" rel="noopener">Apache</a>和<a href="https://choosealicense.com/licenses/lgpl-2.1/" target="_blank" rel="noopener">LGPL</a>，六种许可证之间的最大区别如下图（参考<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰文章</a>）：</p><p><img src="http://pic.blackist.top/public-open-source-license.png" alt="开源协议"></p><h2 id="五、非代码类作品的协议"><a href="#五、非代码类作品的协议" class="headerlink" title="五、非代码类作品的协议"></a>五、非代码类作品的协议</h2><p>上面各协议只是针对软件或代码作品，如果你的作品不是代码，比如视频，音乐，图片，文章等，共享于公众之前，也最好声明一下协议以保证自己的权益不被侵犯。针对非代码的数字作品的协议，最通用的莫过于<a href="https://creativecommons.org/choose/" target="_blank" rel="noopener">Creative Commons</a>(也是你经常在别人博客下面可以看到的CC协议)协议。所以现在你见到博客园别人文章下面的签名就不会感到陌生了。</p><h2 id="六、无协议"><a href="#六、无协议" class="headerlink" title="六、无协议"></a>六、无协议</h2><p>你没有义务也没人非要你必需在自己的代码作品里面加上一个开源协议。但一如上文所讨论过的优点，如果你想把代码分享出来，最好还是选择一个适合的开源协议，这样别人用着放心。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>转载自 <a href="http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a><br>参考 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多刚踏入软件这个行业的小伙伴一如当初的我，对开源软件的各种协议不甚了解被搞昏了头脑。毕竟对于一个新生程序员来说，如何写好代码才是亟待解决的问题，无暇了解这些。随着你项目做得多了代码写得多了，你会发现编码过程中会不时用到其他人的成果，一个项目下来多少会引入一些优秀的库，别人放在公网上开源的DLL，以及一些算法等等。细心的你会注意到即使只是一小段代码，优秀的作者都在最开始会简单地附上一段关于许可的声明，或者说是协议比如”Licensed under the MIT license”，并且一些博客也会标明”此文章发表在CC协议下”。而如果我们Copy了别人的代码或者文字同时没注意这些的话，在国外法律意识特别强的环境下，我们的作品会因触犯别人的权益而违法。因为好多开源协议最低要求是使用者需要保留原作者对代码的声明，不声不响地就拿来用了必然导致恶果。&lt;/p&gt;
&lt;p&gt;所以开源不等于免费，开源也不等于没有约束。&lt;/p&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="开源协议" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>怎样挑选合适的安全座椅</title>
    <link href="https://blackist.org/2019/01/02/public-how-to-buy-car-seat/"/>
    <id>https://blackist.org/2019/01/02/public-how-to-buy-car-seat/</id>
    <published>2019-01-02T09:14:38.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-1-大小"><a href="#1-1-大小" class="headerlink" title="1.1 大小"></a>1.1 大小</h3><p>安全座椅跟衣服和鞋子一样，也分大小和使用年龄的，合适的大小能最好地发挥保护作用。</p><p>按Britax美国的标准，分成以下几种类型：</p><ul><li>婴儿提篮（Infant Car Seats），适用于出生到13公斤</li><li>可变座椅（Convertible Car Seats），适用于出生到32公斤</li><li>增高垫（Booster），适用于11公斤到41公斤</li></ul><a id="more"></a><p>Britax在中国在欧洲和中国分得更细一些，有0+组、0+1组、1组、1+2+3组、2+3组这么多，上面的可变座椅（Convertible Car Seats）其实相当于0+1+2+3组，但中国区没卖的，只能从美国买了运回来。</p><p>其它品牌的，适用体重范围有一点点差别，分组和安全标准都是非常接近的。</p><p>厂商所说的适用范围，是从产品安全性能角度来说的，以婴儿提篮为例，厂家建议的最大体重是13公斤，就是说，14公斤的宝宝，再坐婴儿提篮就已经不安全了，超出了婴儿提篮的承重限制。实际上，根据中国的现实情况，13公斤的小孩基本都有两岁了，让他躺在婴儿提篮中是很难的，小孩自己会要求坐着，而不是躺着。</p><p><strong>选购指南</strong></p><ul><li>如果你的宝宝在2岁以内（或者还在妈妈肚子里），建议购买可变座椅（Convertible Car Seats），如Britax Advocate 70。</li><li>如果你的宝宝已经2岁以上，建议购买增高垫（Booster），如Britax Pinnacle 90。虽然2岁还可以继续坐Advocate 70，但Advocate 70最多只能用到70磅（32公斤），而Pinnacle 90最多能用到90磅（41公斤）</li><li>如果你的宝宝在2岁以内，且预算充足（比方案1多awx 1600-2000元），可以买一个婴儿提篮（Infant Car Seats），和一个1+2+3组的可变座椅（Convertible Car Seats）。婴儿提篮可以让宝宝平躺在提篮里睡觉，到家后，如果宝宝还没睡醒，就把提篮卡扣打开，从汽车座椅上卸下来，直接拎回家，这样就不会打扰宝宝睡觉。</li></ul><h3 id="1-2-汽车接口"><a href="#1-2-汽车接口" class="headerlink" title="1.2 汽车接口"></a>1.2 汽车接口</h3><p>我把汽车接口这个因素放在第二，就是因为这个因素在安全座椅选购当中不是最重要的因素。如果你有耐心阅读下面的文字，又有强迫症一定要汽车和座椅的接口完美匹配，可以把本章读完，涨涨经验。</p><p>如果你没耐心看下面的知识，只要能达到国外法定的安全标准就可以了，那么，买一个功能强大正在促销的就可以了（如本店推荐的Britax Advocate 70），不管你是什么车，都可以用安全带固定它。</p><p>—– 下面开始科普安全座椅接口 —–</p><p>安全座椅分三种固定方式：</p><ul><li>LATCH</li><li>ISOFIX</li><li>安全带</li></ul><p>有的品牌，可能会使用一些自己独创的名词，如标致308，宣传资料说是使用了Tti安全座椅接口，我去车上看过，其实就是LATCH。</p><p>安全座椅接口太专业了，我见过不少网店的卖家错误描述这些概念。例如【洋码头海外旗舰店】：<a href="http://detail.tmall.hk/hk/item.htm?id=21211059448，他说：【最近几年的新车都会有配备儿童安全座椅ISOFIX接口或者LATCH接口，这两种接口其实都是一样的，在美国叫做LATCH，在欧洲叫做ISOFIX】，其实这是完全不正确的说法。" target="_blank" rel="noopener">http://detail.tmall.hk/hk/item.htm?id=21211059448，他说：【最近几年的新车都会有配备儿童安全座椅ISOFIX接口或者LATCH接口，这两种接口其实都是一样的，在美国叫做LATCH，在欧洲叫做ISOFIX】，其实这是完全不正确的说法。</a></p><h4 id="1-2-1-LATCH接口"><a href="#1-2-1-LATCH接口" class="headerlink" title="1.2.1 LATCH接口"></a>1.2.1 LATCH接口</h4><p>LATCH接口是美国标准，从美国买安全座椅，多半情况会买到这个接口的。</p><p>LATCH是兼容ISOFIX的，如果车是LATCH接口的，买LATCH接口或者ISOFIX接口的座椅都可以。</p><p>它是三个固定锚点，比ISOFIX多一个头部固定点（在后排座椅头枕的后面）。</p><h4 id="1-2-2-ISOFIX接口"><a href="#1-2-2-ISOFIX接口" class="headerlink" title="1.2.2 ISOFIX接口"></a>1.2.2 ISOFIX接口</h4><p>ISOFIX是欧洲标准，如果要买ISOFIX接口的座椅，最好是从德国或者英国买。美国网站也有，但款式少一些，优惠幅度应该也不如欧洲。</p><p>ISOFIX接口的汽车，比LATCH接口的少一个固定锚点，因此网上的官方文章都说，ISOFIX的车不能装LATCH的座椅，但在实践中，也可以在ISOFIX的车上使用LATCH的座椅，这是因为：</p><ul><li>可以直接使用安全带固定法。这是合法和安全的</li><li>把LATCH座椅下面的两个带子固定到汽车的ISOFIX接口上之后，再用安全带固定一遍，双保险</li><li>有人在后备箱里找到了一个锚点，把LATCH座椅头部那根带子拉到后备箱去固定了。相当于自己把ISOFIX的车子改造成LATCH接口了（就是有点山寨）</li></ul><h4 id="1-2-3-安全带固定"><a href="#1-2-3-安全带固定" class="headerlink" title="1.2.3 安全带固定"></a>1.2.3 安全带固定</h4><p>有的车子两种接口都没，只能采用安全带固定。几乎所有的安全座椅都支持安全带固定。</p><p>安全带固定也可以上ISOFIX、LATCH同时使用。比方说，车是LATCH接口，买了Britax Advocate 70安全座椅，就可以把LATCH的三个锚点全部接好，同时安全带也绑到安全座椅上去，这样双保险固定后，固若金汤。我就是这么干的</p><h4 id="1-2-4-怎样知道我的车是什么接口"><a href="#1-2-4-怎样知道我的车是什么接口" class="headerlink" title="1.2.4 怎样知道我的车是什么接口"></a>1.2.4 怎样知道我的车是什么接口</h4><ul><li>最保险的办法是去你汽车的后排座椅上看，找到ISOFIX、LATCH的标志和挂钩</li><li>看你的汽车说明书，但要小心，一款车型会有乞丐版、中配版、顶配版、特别版等等很多个版本，不同版本都是共享同一本说明书的，别看错了。或者打汽车品牌官方客服电话问问，不要找4S店客服。</li><li>到汽车类网站上查询参数配置，这种方法准确度最低。网站的资料，准确度存在一些问题，安全座椅在中国是个冷门的东西，汽车网站没有动力把这个资料做得很准确。我就遇到过，汽车之家说本田思域全系标配LATCH接口，而我爬到朋友的车上看，ISOFIX和LATCH都没有。</li></ul><h3 id="1-3-品牌"><a href="#1-3-品牌" class="headerlink" title="1.3 品牌"></a>1.3 品牌</h3><h4 id="1-3-1-美国市场"><a href="#1-3-1-美国市场" class="headerlink" title="1.3.1 美国市场"></a>1.3.1 美国市场</h4><ul><li>Britax，百代适（又译：宝得适），专注母婴的品牌，英国品牌，线上线下都是排名第一的品牌</li><li>Eddie Bauer，埃迪堡，除了母婴，也做衣服鞋子，安全座椅是它收购来的</li><li>Maxi-Cosi，迈可适，荷兰品牌，线下超市和电商有售</li><li>Graco，葛莱，美国品牌，已在广东东莞生产。其鹦鹉螺3合1，常年139美元，适用于20到100磅，以较高的性价比力压Britax排名amazon销售第一</li></ul><h4 id="1-3-2-欧洲市场"><a href="#1-3-2-欧洲市场" class="headerlink" title="1.3.2 欧洲市场"></a>1.3.2 欧洲市场</h4><ul><li>CONCORD，协和/康科德</li><li>RECARO，里卡罗</li><li>STM，斯迪姆</li><li>Kiddy，可迪</li></ul><h2 id="2-海淘费用（适用于美国代购）"><a href="#2-海淘费用（适用于美国代购）" class="headerlink" title="2 海淘费用（适用于美国代购）"></a>2 海淘费用（适用于美国代购）</h2><h3 id="2-1-货款"><a href="#2-1-货款" class="headerlink" title="2.1 货款"></a>2.1 货款</h3><p>货款是通过Master或者Visa在信用卡里扣美元的。所以，货款计算方法是：</p><blockquote><p>美元价格 * 汇率（汇率按1美元=6.1人民币计算）</p></blockquote><h4 id="2-1-1-货物价格查询"><a href="#2-1-1-货物价格查询" class="headerlink" title="2.1.1 货物价格查询"></a>2.1.1 货物价格查询</h4><p>货物美元价格自行到美国网站查询，我一般在amazon, albeebaby买，地址：</p><ul><li><a href="http://www.albeebaby.com/" target="_blank" rel="noopener">http://www.albeebaby.com/</a></li><li><a href="http://www.amazon.com/" target="_blank" rel="noopener">http://www.amazon.com/</a></li></ul><p>要注意，不同花色价格也不同的，特价的时候，通常也不是全部的花色都特价</p><h3 id="2-2-消费税"><a href="#2-2-消费税" class="headerlink" title="2.2 消费税"></a>2.2 消费税</h3><p>消费税跟货款一样，由美国商家通过MasterCard/Visa收取，汇率也是6.1</p><h4 id="2-2-1-免税州"><a href="#2-2-1-免税州" class="headerlink" title="2.2.1 免税州"></a>2.2.1 免税州</h4><p>美国有的州是收消费税的，免税州不收。下单时用哪个州的地址，取决于使用哪个转运公司。我买安全座椅用360hitao，买耳温枪、包鞋子等小件就用友家。</p><p>360hitao有三个仓库，分别是：</p><ul><li>CA（加州），Amazon的货发到CA州收税，奶粉、米粉等食品免税。Albeebaby发到CA州不收税</li><li>DE（特拉华州），这个是免税州。无论哪个网站的东西，发到这里都不收税。这个州最近暴风雪天气，又因为黑五海淘的中国人多，已经爆仓不收货了</li><li>OR（俄勒冈州），这个也是免税州。</li></ul><h4 id="2-2-2-税率"><a href="#2-2-2-税率" class="headerlink" title="2.2.2 税率"></a>2.2.2 税率</h4><p>不同类目消费税也不同，安全座椅大约是9.5%-10%，即一个Britax Advocate 70 G3，在Amazon卖235美元，消费税大约是23美元。</p><p>要知道精确的税是多少，到Amazon上下个单，填一个CA州的收货地址，Amazon会自动把税金算出来，单列，并累加到订单总金额中去的。</p><h4 id="2-2-3-如何避免被税"><a href="#2-2-3-如何避免被税" class="headerlink" title="2.2.3 如何避免被税"></a>2.2.3 如何避免被税</h4><ul><li>在Albeebaby买，发到CA、DE、OR三个州都不收税</li></ul><p>等等，为什么不能在amazon买发到免税州？且看下面的转运费部分，海淘真心比淘宝麻烦多了好嘛 -_-!</p><h3 id="2-3-转运费"><a href="#2-3-转运费" class="headerlink" title="2.3 转运费"></a>2.3 转运费</h3><p>从商家到转运公司仓库，一般是免费的（Albeebaby满49美元免运费，安全座椅都不止49美元），如果达不到网站免运费的条件，就凑齐了再下单吧，习惯了国内的快递费，被美国网站收运费，会非常肉痛的。</p><h4 id="2-3-1-美国-中国转运费"><a href="#2-3-1-美国-中国转运费" class="headerlink" title="2.3.1 美国-中国转运费"></a>2.3.1 美国-中国转运费</h4><p>转运公司按磅计费，一磅是454克，0.454公斤，不足一磅按一磅算。</p><p>360hitao的运费价格在这里查询：<br><a href="http://www.360hitao.com/freight-calculate/?pagetype=fc" target="_blank" rel="noopener">http://www.360hitao.com/freight-calculate/?pagetype=fc</a></p><p>如Britax Advocate 70的重量大概是26磅，黄金卡运费是854.92元。为什么不是标准运费呢？因为花500就可以买个黄金卡了，一个安全座椅的运费铁定超过500，所以，买个黄金卡，再通过支付宝支付剩下的354.92，就可以享受黄金卡的折扣了，可以省165.8元。</p><h4 id="2-3-2-美国境内转运费"><a href="#2-3-2-美国境内转运费" class="headerlink" title="2.3.2 美国境内转运费"></a>2.3.2 美国境内转运费</h4><p>360hitao在美国虽然有3个仓库，但只有CA（加州）的仓库有直飞中国的航班，所以，如果买安全座椅为了省消费税，收货地址写了DE或者OR州，那么就要再付给360hitao一笔美国境内转运费，价格是1美元1磅。一个安全座椅一般是25磅左右。</p><p>对安全座椅来说，这个美国境内转运费都超过消费税了。所以，不值得发免税州。</p><h4 id="2-3-3-体积费"><a href="#2-3-3-体积费" class="headerlink" title="2.3.3 体积费"></a>2.3.3 体积费</h4><p>这个怎么算的我就不详细说了，我直接告诉你结果：安全座椅按体积运费非常非常不划算。360hitao按重收费，不收体积费，这就是我买选360hitao的原因。</p><h4 id="2-3-4-汇率"><a href="#2-3-4-汇率" class="headerlink" title="2.3.4 汇率"></a>2.3.4 汇率</h4><p>转运公司一般是美元报价（也有的人民币双币报价），收人民币（因为海淘的都是国内网民，支付宝收人民币便宜又方便，用Visa、Paypal的话，转运公司又要付一笔手续费）。</p><p>如果你仔细计算，你会发现，转运公司使用的汇率不是6.1，而是高出一些的，例如360hitao就是6.38，去年是6.5，其它转运公司，6.3， 6.4，6.5的都的，6.1的良心企业暂时还没发现。</p><h3 id="2-4-中国海关关税"><a href="#2-4-中国海关关税" class="headerlink" title="2.4 中国海关关税"></a>2.4 中国海关关税</h3><p>安全座椅体积大，货值高，进关几乎必被征税。<br>税金是126人民币，终于不用算汇率了，哦也！</p><p>从海关出来，换成国内快递公司，这个国内快递公司的运费包含在转运公司的转运费里了，不再额外收费。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/how_to_buy_car_seat.md" target="_blank" rel="noopener">https://github.com/qinjx/30min_guides/blob/master/how_to_buy_car_seat.md</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-大小&quot;&gt;&lt;a href=&quot;#1-1-大小&quot; class=&quot;headerlink&quot; title=&quot;1.1 大小&quot;&gt;&lt;/a&gt;1.1 大小&lt;/h3&gt;&lt;p&gt;安全座椅跟衣服和鞋子一样，也分大小和使用年龄的，合适的大小能最好地发挥保护作用。&lt;/p&gt;
&lt;p&gt;按Britax美国的标准，分成以下几种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;婴儿提篮（Infant Car Seats），适用于出生到13公斤&lt;/li&gt;
&lt;li&gt;可变座椅（Convertible Car Seats），适用于出生到32公斤&lt;/li&gt;
&lt;li&gt;增高垫（Booster），适用于11公斤到41公斤&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="个人思考" scheme="https://blackist.org/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>零售行业优惠规则分析</title>
    <link href="https://blackist.org/2019/01/02/public-comsumer-promotion-rule/"/>
    <id>https://blackist.org/2019/01/02/public-comsumer-promotion-rule/</id>
    <published>2019-01-02T07:49:56.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-优惠规则5要素"><a href="#1-优惠规则5要素" class="headerlink" title="1 优惠规则5要素"></a>1 优惠规则5要素</h2><h3 id="1-1-满足优惠条件的动作"><a href="#1-1-满足优惠条件的动作" class="headerlink" title="1.1 满足优惠条件的动作"></a>1.1 满足优惠条件的动作</h3><p>这个要素，是指触发优惠规则的动作，主要包括买和满两种。</p><p><strong>注</strong>：</p><ul><li>在数学上，买是满的一种特殊情况，只不过做文本串分析时，要同时考虑到这两种文本描述。</li><li>在电商行业，触发优惠的动作还包括：晒单、微博分享、微信关注、给好评、收藏、新用户注册、手机下单等行为，这里我只叙述与商品和订单相关的，与其它行为（注册、营销、手机下单等）相关的暂忽略。</li><li>抽奖，中奖要看运气，所以这时也暂不讨论</li></ul><a id="more"></a><h4 id="1-1-1-买"><a href="#1-1-1-买" class="headerlink" title="1.1.1 买"></a>1.1.1 买</h4><p>只要买就优惠，如买赠（买1送1）、买立减（买此商品立减5元）</p><h4 id="1-1-2-满"><a href="#1-1-2-满" class="headerlink" title="1.1.2 满"></a>1.1.2 满</h4><p>如满88减18</p><h3 id="1-2-优惠条件作用对象"><a href="#1-2-优惠条件作用对象" class="headerlink" title="1.2 优惠条件作用对象"></a>1.2 优惠条件作用对象</h3><p>这个要素，是指满的对象（上文已解释，买其实是满的一种特殊情况，故此处叙述时合并），满什么条件，主要有三种：</p><h4 id="1-2-1-订单金额（抵扣前金额）"><a href="#1-2-1-订单金额（抵扣前金额）" class="headerlink" title="1.2.1 订单金额（抵扣前金额）"></a>1.2.1 订单金额（抵扣前金额）</h4><p>如满88元减18元</p><h4 id="1-2-2-实付金额（抵扣后金额）"><a href="#1-2-2-实付金额（抵扣后金额）" class="headerlink" title="1.2.2 实付金额（抵扣后金额）"></a>1.2.2 实付金额（抵扣后金额）</h4><p>如实付100元再返20元代金券</p><h4 id="1-2-3-商品数量"><a href="#1-2-3-商品数量" class="headerlink" title="1.2.3 商品数量"></a>1.2.3 商品数量</h4><p>如买二送三，满2件每件165元，39元任选三件</p><h3 id="1-3-优惠方式"><a href="#1-3-优惠方式" class="headerlink" title="1.3 优惠方式"></a>1.3 优惠方式</h3><p>这个要素是指，商家以什么方式给予消费者优惠。</p><h4 id="1-3-1-减"><a href="#1-3-1-减" class="headerlink" title="1.3.1 减"></a>1.3.1 减</h4><p>在订单金额中减去部分金额，如满减，买立减，实付减</p><h4 id="1-3-2-折"><a href="#1-3-2-折" class="headerlink" title="1.3.2 折"></a>1.3.2 折</h4><p>订单金额或者商品单价打个折扣。如满188打8折，第二件半价。</p><p>折其实也是减的一种特殊情况，做文本串分析时当两种情况</p><h4 id="1-3-3-送-赠"><a href="#1-3-3-送-赠" class="headerlink" title="1.3.3 送/赠"></a>1.3.3 送/赠</h4><p>订单中赠送，或者订单完成后再赠送。如买1送1，买奶粉送奶瓶，买奶粉送京券</p><h4 id="1-3-4-换购"><a href="#1-3-4-换购" class="headerlink" title="1.3.4 换购"></a>1.3.4 换购</h4><p>满99元即可加1元换购超值礼品</p><h3 id="1-4-回馈内容"><a href="#1-4-回馈内容" class="headerlink" title="1.4 回馈内容"></a>1.4 回馈内容</h3><h4 id="1-4-1-现金"><a href="#1-4-1-现金" class="headerlink" title="1.4.1 现金"></a>1.4.1 现金</h4><ul><li>满减、满折就是减了现金</li></ul><h4 id="1-4-2-可折算成现金几无使用限制的卡-券-积分"><a href="#1-4-2-可折算成现金几无使用限制的卡-券-积分" class="headerlink" title="1.4.2 可折算成现金几无使用限制的卡/券/积分"></a>1.4.2 可折算成现金几无使用限制的卡/券/积分</h4><ul><li>赠送天猫积分、集分宝也等于赠送现金</li><li>京券、京东积分也等于现金</li></ul><h4 id="1-4-3-同主体商品"><a href="#1-4-3-同主体商品" class="headerlink" title="1.4.3 同主体商品"></a>1.4.3 同主体商品</h4><p>这条是指，赠送的商品与消费者购买的商品是同一个商品（可能保质期和生产批次略有不同，但总体上价值是一样的）</p><p>如一号店的德运全脂牛奶，买一升，赠一升，属于赠送同主体的商品。</p><h4 id="1-4-4-其它小赠品"><a href="#1-4-4-其它小赠品" class="headerlink" title="1.4.4 其它小赠品"></a>1.4.4 其它小赠品</h4><p>如买鞋送袜子，买奶粉送奶粉勺。</p><p>把同主体商品拿出来单独说，和其它小赠品区分开，是因为同主体商品有利于计算实际到手价，德运全指牛奶买1送1，就等于是5折了，但如果买1升德运牛奶送5克奥利奥饼干，就不方便衡量饼干的价值进而计算到手价。</p><h4 id="1-4-5-不可折算成现金的卡-券-积分"><a href="#1-4-5-不可折算成现金的卡-券-积分" class="headerlink" title="1.4.5 不可折算成现金的卡/券/积分"></a>1.4.5 不可折算成现金的卡/券/积分</h4><ul><li>送有限制条件的满减券、折扣券</li><li>送一号店积分</li><li>送淘金币</li><li>送航空公司里程等等</li></ul><p>这类回馈有的价值较高（如有限制条件的券），有的如同鸡肋（如淘金币、一号店积分）不好统一衡量价值，也不能拿来参与到手价计算</p><h3 id="1-5-是否有限制"><a href="#1-5-是否有限制" class="headerlink" title="1.5 是否有限制"></a>1.5 是否有限制</h3><p>是否有限制也影响到手价的计算</p><h4 id="1-5-1-有限制"><a href="#1-5-1-有限制" class="headerlink" title="1.5.1 有限制"></a>1.5.1 有限制</h4><ul><li>满150减15，每个订单仅限使用一次</li><li>买1送1，每个收货地址仅限5件</li><li>实付200再返10元，最高返200元</li></ul><h4 id="1-5-2-无限制"><a href="#1-5-2-无限制" class="headerlink" title="1.5.2 无限制"></a>1.5.2 无限制</h4><p>这个不多解释了</p><h2 id="2-常用优惠规则"><a href="#2-常用优惠规则" class="headerlink" title="2 常用优惠规则"></a>2 常用优惠规则</h2><p>上述5个因素，排列组合最多超过200种，但考虑到有些组合不可能存在，如“回馈内容”中的两种“赠品”只可能和“优惠方式”中的“送赠”组合，而不可能和“折、减”组合，实际常用的优惠方式约为几十种（有无限制我就不一一罗列了，读者朋友自行把下面优惠规则总数乘以二）：</p><h3 id="2-1-减折类（6种）"><a href="#2-1-减折类（6种）" class="headerlink" title="2.1 减折类（6种）"></a>2.1 减折类（6种）</h3><p>满折类的优惠条件主要是满N件和满N元，一般不会跟“实付xx元”搭配：</p><ul><li>买立减（买一件）</li><li>买立折（买一件）</li><li>满N件减x元 </li><li>满N件打x折</li><li>满N元减x元</li><li>满N元打x折</li></ul><h4 id="2-2-送（可折算现金）卡-券-积分、不可折算现金的卡-券-积分、其它小赠品（12种）"><a href="#2-2-送（可折算现金）卡-券-积分、不可折算现金的卡-券-积分、其它小赠品（12种）" class="headerlink" title="2.2 送（可折算现金）卡/券/积分、不可折算现金的卡/券/积分、其它小赠品（12种）"></a>2.2 送（可折算现金）卡/券/积分、不可折算现金的卡/券/积分、其它小赠品（12种）</h4><ul><li>买即送（买一件）</li><li>满N件送xx</li><li>满N元送xx</li><li>实付N元送xx</li></ul><p>在有的促销文案里，送虚拟卡券积分也叫满返。</p><p>以上四种场景乘以赠送的三种东西，就是12种。</p><h4 id="2-3-换购（4种）"><a href="#2-3-换购（4种）" class="headerlink" title="2.3 换购（4种）"></a>2.3 换购（4种）</h4><ul><li>买此商品即享换购资格</li><li>满N件即享换购资格</li><li>满N元即享换购资格</li><li>实付N元即享换购资格</li></ul><h4 id="2-4-送同主体商品（3种）"><a href="#2-4-送同主体商品（3种）" class="headerlink" title="2.4 送同主体商品（3种）"></a>2.4 送同主体商品（3种）</h4><ul><li>买N送M</li><li>满N元再送M件</li><li>实付N元再送M件</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/promotion_rule.md" target="_blank" rel="noopener">https://github.com/qinjx/30min_guides/blob/master/promotion_rule.md</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-优惠规则5要素&quot;&gt;&lt;a href=&quot;#1-优惠规则5要素&quot; class=&quot;headerlink&quot; title=&quot;1 优惠规则5要素&quot;&gt;&lt;/a&gt;1 优惠规则5要素&lt;/h2&gt;&lt;h3 id=&quot;1-1-满足优惠条件的动作&quot;&gt;&lt;a href=&quot;#1-1-满足优惠条件的动作&quot; class=&quot;headerlink&quot; title=&quot;1.1 满足优惠条件的动作&quot;&gt;&lt;/a&gt;1.1 满足优惠条件的动作&lt;/h3&gt;&lt;p&gt;这个要素，是指触发优惠规则的动作，主要包括买和满两种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在数学上，买是满的一种特殊情况，只不过做文本串分析时，要同时考虑到这两种文本描述。&lt;/li&gt;
&lt;li&gt;在电商行业，触发优惠的动作还包括：晒单、微博分享、微信关注、给好评、收藏、新用户注册、手机下单等行为，这里我只叙述与商品和订单相关的，与其它行为（注册、营销、手机下单等）相关的暂忽略。&lt;/li&gt;
&lt;li&gt;抽奖，中奖要看运气，所以这时也暂不讨论&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="个人思考" scheme="https://blackist.org/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发60分钟入门</title>
    <link href="https://blackist.org/2019/01/02/dev-ios-quiz/"/>
    <id>https://blackist.org/2019/01/02/dev-ios-quiz/</id>
    <published>2019-01-02T07:43:29.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文面向已有其它语言（如Java，C，PHP，Javascript）编程经验的iOS开发初学者，初衷在于让我的同事一小时内了解如何开始开发iOS App，学习目标包括：</p><ul><li>能使用Xcode IDE、模拟器</li><li>能修改、调试已有iOS App</li><li>能在已有应用内创建新模块</li><li>能创建新应用</li><li>能发布应用到App Store</li></ul><p>本文不包含任何高级的iOS开发知识，已学会iOS开发的同学不要看，看完这篇文章学会了的同学也不用再看了。</p><a id="more"></a><h2 id="不仅是学习一门新语言"><a href="#不仅是学习一门新语言" class="headerlink" title="不仅是学习一门新语言"></a>不仅是学习一门新语言</h2><p>有过脚本开发经验的人（如Javascript，PHP，Shell）在刚开始学习iOS开发的时候，会觉得iOS开发的学习曲线比脚本语言要高，是的，这种感觉是对的。因为学iOS开发，不仅是学习一门新语言，它包括：</p><ul><li>一门语言：Objective-C</li><li>一个框架：Cocoa Touch</li><li>一个IDE：Xcode</li></ul><p>初学脚本语言通常不会来绘制图形界面、与人交互，iOS如果不做图形界面，像脚本语言一样处理文本操作数据库，就没啥意思了。</p><p>所以，过去我写别的新手入门教程，通常都是写《XXX入门15分钟教程》，而iOS就要花数倍的时间来写了。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>做iOS开发一定要有苹果的软件环境：Mac OS操作系统、Objective-C编译器、设备模拟器等，开发工具倒不一定要用Xcode，只要是个源代码编辑工具就行（vim都行，只是没Xcode那么多功能）。</p><h3 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h3><p>拥有Mac OS环境最简单的方法是找一台苹果电脑，包括iMac, MacBook Pro, MacBook Air, Mac Mini，但不包括苹果的移动设备（iPod Touch, iPhone, iPad, iPad Mini，它们运行的是iOS系统，不是Mac OS），苹果电脑在出厂的时候就会预装Mac OS，目前最新版本是Mac OS X 10.8，主流的版本还有Mac OS X 10.6、Max OS X 10.7。</p><p>如果囊中羞涩，可以借一台，或者上淘宝买个二手的。</p><h4 id="黑苹果"><a href="#黑苹果" class="headerlink" title="黑苹果"></a>黑苹果</h4><p>提到iOS开发入门，似乎没办法不说黑苹果。所谓黑苹果，就是把Mac OS改造后安装在非苹果的硬件上，这是违反DMCA法案的，黑苹果的更多资料，<a href="http://en.wikipedia.org/wiki/OSx86" target="_blank" rel="noopener">可以在维基上找到</a></p><p>苹果电脑价格高，国内软件开发者生存压力大，所以黑苹果在国内也有一些真实的存在，国外当然也有啦。</p><p>黑苹果基本可以胜任iOS开发，但有一些问题：</p><ul><li>安装黑苹果是非法的</li><li>个人行为苹果公司一般不会追究，但会遭同行的鄙视</li><li>黑苹果超级难装，挑硬件。即使完全相同的型号，相同的批次，也有可能A机器装上了，B机器装不上</li><li>黑苹果系统多少都存在一些使用上的问题，像驱动Bug啦、待机恢复蓝屏啦、上网浏览有问题啦</li><li>黑苹果不能随意升级，可能升级一次safari就导致整个系统崩溃了</li></ul><p>上面这些虽然不会直接影响Xcode写代码、模拟器测试，但写着写着想上网查个东西的时候，safari不能翻页，确实挺影响心情的。所以，钱包允许的前提下，还是搞个苹果电脑省心一些。</p><h3 id="Xcode-和-模拟器"><a href="#Xcode-和-模拟器" class="headerlink" title="Xcode 和 模拟器"></a>Xcode 和 模拟器</h3><p>Xcode可以在苹果官网免费下载：<a href="https://developer.apple.com/Xcode/index.php" target="_blank" rel="noopener">Xcode下载地址</a></p><p>安装Xcode时会自动安装iOS SDK和模拟器。</p><p>这么强大的IDE居然是免费的，还是挺让人开心的。</p><h2 id="从改一个现成的应用开始吧"><a href="#从改一个现成的应用开始吧" class="headerlink" title="从改一个现成的应用开始吧"></a>从改一个现成的应用开始吧</h2><p>学一门新软件开发技能，能够第一时间做出一个可运行的产品非常重要，有助于给自己正面激励，我上大学的时候，有很多次想学一门新语言，往往花了半个月，还沉浸在数据类型和语法字典里，连第一个Hello World都没做出来。</p><p>这一次，就让我们从改一个现成的应用开始吧。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先，我们从苹果开发者中心下载一个示例代码回来。我选了<a href="https://developer.apple.com/library/ios/samplecode/ToolbarSearch/ToolbarSearch.zip" target="_blank" rel="noopener">ToolBarSearch</a>。</p><p>在本文档的末尾，还有一些其它的网址可以下载开源iOS产品或者代码段，但我试了一下，还是Apple Sample Code最容易成功。</p><p>下载回来的zip文件最好保存在”下载”或者”文稿”目录里，因为在Mac OS 10.8以前，有些目录（例如/var/private/tmp）在Finder中是看不到的，要通过Finder的“前往 &gt; 前往文件夹”功能才能进入。</p><h3 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h3><p>有三种方式可以打开一个iOS Project</p><h4 id="双击project文件"><a href="#双击project文件" class="headerlink" title="双击project文件"></a>双击project文件</h4><p>打开Finder，进入刚刚下载解压的ToolBarSearch目录，找到ToolBarSearch.Xcodeproj文件，双击之，Xcode会自动启动，并打开这个项目</p><h4 id="在Xcode里选择Project打开"><a href="#在Xcode里选择Project打开" class="headerlink" title="在Xcode里选择Project打开"></a>在Xcode里选择Project打开</h4><ul><li><p>在Xcode没启动的情况下（如果Xcode已经启动了，就先按Command Q退出），启动Xcode，会弹出“Welcome to Xcode”的欢迎页，点击左下角的“Open Other”按钮，找到ToolBarSearch目录，双击ToolBarSearch目录，或者双击ToolBarSearch.Xcodeproj文件都可以</p></li><li><p>如果Xcode处于打开状态，可以点击其菜单栏的File -&gt; Open，或者File -&gt; Open Recent，然后再选择要打开的项目</p></li></ul><h4 id="通过命令行打开"><a href="#通过命令行打开" class="headerlink" title="通过命令行打开"></a>通过命令行打开</h4><p>在Mac OS 10.8以前，有些目录（例如/var/private/tmp），在Finder和Xcode的File &gt; Open对话框中，点击鼠标是找不到的，这时候就要通过命令行终端来打开了。</p><p>打开终端，执行：</p><pre><code>cd /ToolBarSearch的父目录/ToolBarSearchopen -a Xcode</code></pre><p>open -a是mac os的系统命令，除了iOS项目，别的项目也可以这样打开。</p><h3 id="运行刚下载的应用"><a href="#运行刚下载的应用" class="headerlink" title="运行刚下载的应用"></a>运行刚下载的应用</h3><p>点击Xcode左上角的Run按钮（或者同时按下Comman和R键），Xcode会编译源码并在模拟器中运行这个应用。</p><p>编译成功会在屏幕上淡淡地显示“Build Succeeded”。反之，失败就显示“Build Failed”且不启动模拟器。</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>在模拟器上看到“Performed search using…”了吧，下面我们改掉它。</p><ul><li><p>在Xcode左上角的Run按钮下方，有一排小按钮，从左到右第三个是一个放大镜图标，鼠标移上去会显示“Show the Search Navigator”，点一下它，打开搜索界面，在它下方出现的Find输入框中输入“performed”</p></li><li><p>搜索结果只有一条：ToolbarSearchViewController.m，点文件名下方被高亮的“Performed”字串，右侧代码编辑区会自动打开这个文件，并滚动屏幕，使包含“Performed”的这一行出现在编辑区的中间。</p></li><li><p>修改双引号里的字串，随便改成啥，然后按“Command S”保存。</p></li></ul><p>当然，这些操作，你也可以在终端下通过grep和vim完成。</p><h3 id="运行修改后的应用"><a href="#运行修改后的应用" class="headerlink" title="运行修改后的应用"></a>运行修改后的应用</h3><p>按Command R运行，看看，是不是看到效果啦？</p><p>是的，修改一个应用就这么简单。</p><h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><p>Objective-C是苹果应用软件（包括苹果电脑上的Mac OS App和移动设备上的iOS App）的开发语言。它是一种面向对象的编程语言。</p><p>苹果公司还提供了一个软件，叫Interface Builder，简称IB，用于可视化的界面制作，就像用Dreamweaver做网页，或者像Visual Basic做桌面软件一样。后来IB就整合进了Xcode，成了Xcode的一部分。这篇文档不讲IB，只讲Objective-C，因为：</p><ul><li>基本上，每一本讲iOS开发的书（纸质书、电子书），都有大量的截图一步一步教如何用IB开发iOS应用，而讲Objective-C开发应用的书却没有那么多。</li><li>IB可以用来直观方便地画界面、设置控件属性、建立代码与控件的联系，但后台的业务逻辑和数据处理仍然要靠Objective-C，可见，不管用不用IB，Objective-C都是绕不过去的。</li></ul><h3 id="C的超集"><a href="#C的超集" class="headerlink" title="C的超集"></a>C的超集</h3><p>Objective-C扩展了ANSI C，是C的超集，也就是说：</p><ul><li>任何C源程序，不经修改，即可通过Objective-C编译器成功编译</li><li>Objective-C源程序中可以直接使用任何C语言代码</li></ul><p>除了面向对象有语法是SmallTalk风格的（下面会讲到），其它非面向对象的语法、数据类型，与C完全相同，所以本文就不再赘述。<br>来看一个经典的Hello World示例吧：</p><pre><code>#import &lt;Foundation/Foundation.h&gt;int main(int argc, char *argv[]){    @autoreleasepool{        NSLog(@&quot;Hello World!&quot;);    }    return 0;}</code></pre><p>是不是仿佛穿越回了大一学习C语言的时代，看起来和C几乎没有区别，是吧？是的，因为还没用到它的面向对象特性，哈哈！</p><h3 id="SmallTalk的消息传递语法风格"><a href="#SmallTalk的消息传递语法风格" class="headerlink" title="SmallTalk的消息传递语法风格"></a>SmallTalk的消息传递语法风格</h3><p>Objective-C的面向对象语法源自SmallTalk，消息传递（Message Passing）风格。在源码风格方面，这是它与C Family语言（包括C/C++、Java、PHP）差别最大的地方。</p><p>在Java、C++世界，我们调用一个对象的某方法，在Objective-C里，这称作给类型发送一个消息，这可不仅仅是文字游戏，他们的技术细节也是不同的。</p><p>在Java里，对象和方法关系非常严格，一个方法必须属于一个类/对象，否则编译是要报错的。而在Objective-C里，类型和消息的关系比较松散，消息处理到运行时（runtime）才会动态决定，给类型发送一个它无法处理的消息，也只会抛出一个异常，而不会挂掉。</p><pre><code>[obj undefinedMethod];</code></pre><p>在代码里调用没定义的方法（这是Java世界的习惯说法啊，专业的叫法是，给obj对象传递它无法处理的消息），Xcode会警告，但编译能成功，运行的时候会出错。它会输出这样一个错误：</p><pre><code>Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[NSObject undefinedMethod]: unrecognized selector sent to instance 0x8871710&apos;</code></pre><h3 id="类似Java的OOP概念"><a href="#类似Java的OOP概念" class="headerlink" title="类似Java的OOP概念"></a>类似Java的OOP概念</h3><p>Objective-C中一些面向对象的概念，也可以在Java中找到类似的实现（只能说是类似，不是完全相同），我的读者基本都是Java和PHP程序员，我会在下文中尽量用Java的概念来类比。</p><p>GoogleCode上有人整理了Java和Objective-C的概念、数据类型对应表，<a href="http://code.google.com/p/j2objc/wiki/JavaConversions" target="_blank" rel="noopener">参见这里</a></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Objective-C里有字符串是由双引号包裹，并在引号前加一个@符号，例如：</p><pre><code>title = @&quot;Hello&quot;;if(title == @&quot;hello&quot;) {}</code></pre><p>PHP程序员要注意，在这里不能用单引号，即使只有一个字符也不能用。Objective-C与Java、C一样，双引号表示字符串。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>前文述及，不涉及面向对象时，它和C是完全一样的。以下是几个函数调用的示例：</p><h4 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h4><pre><code>startedBlock();</code></pre><h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><pre><code>NSLog(@&quot;decrypted string: %@&quot;, str);CGRectMake(0,0,0,0);</code></pre><h3 id="传递消息给类-实例方法"><a href="#传递消息给类-实例方法" class="headerlink" title="传递消息给类/实例方法"></a>传递消息给类/实例方法</h3><h4 id="不带参数-1"><a href="#不带参数-1" class="headerlink" title="不带参数"></a>不带参数</h4><pre><code>[obj method];</code></pre><p>对应的Java版本</p><pre><code>obj.method();</code></pre><h4 id="带一个参数："><a href="#带一个参数：" class="headerlink" title="带一个参数："></a>带一个参数：</h4><pre><code>[counter increase:1];</code></pre><p>对应的Java版本</p><pre><code>counter.increase(1);</code></pre><h4 id="带多个参数"><a href="#带多个参数" class="headerlink" title="带多个参数"></a>带多个参数</h4><p>对C Family程序员来说，这是最难接受的，最反人类的：</p><pre><code>- (void) setColorToRed: (float)red Green: (float)green Blue:(float)blue {...} //定义方法[myObj setColorToRed: 1.0 Green: 0.8 Blue: 0.2]; //调用方法</code></pre><p>对应的Java版</p><pre><code>public void setColorToRedGreenBlue(float red, float green, float blue) {...}myObj.setColorToRedGreenBlue(1.0, 0.8, 0.2);</code></pre><h4 id="消息嵌套"><a href="#消息嵌套" class="headerlink" title="消息嵌套"></a>消息嵌套</h4><pre><code>UINavigationBar *bar = [[[UINavigationBar alloc] init] autorelease];</code></pre><p>对应的Java版</p><pre><code>UINavigationBar bar = UINavigationBar.alloc().init().autorelease();//Java没有指针，所以星号去掉了</code></pre><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="接口和实现"><a href="#接口和实现" class="headerlink" title="接口和实现"></a>接口和实现</h4><p>Objective-C的类分为接口定义和实现两个部分。接口定义（Interface）放在头文件中，文件扩展名是.h，实现（implementation）放在实现文件中，文件扩展名是.m（也有.mm的扩展名，表示Objective-C和C++混编的代码）。</p><p><code>接口定义也可以写在.m文件中，但最好不要这么干</code></p><p>需要注意的是，与Objective-C的interface概念最接近的是C和C++里的头文件，它与implementation是成双成对出现的，作用是声明类的成员变量和方法。它与Java的interface概念完全不同：</p><ul><li>Objective-C里，interface有且只有一个实现，Java的interface可以有0-N个实现</li><li>Objective-C里，interface可以定义成员属性，Java里不可以</li></ul><p>在Objective-C里，和Java的Interface概念相似的是Protocol，下文会讲到。</p><p>请看示例：</p><p>Interface</p><pre><code>@interface MyClass {    int memberVar1;    id  memberVar2;}-(return_type) instance_method1; -(return_type) instance_method2: (int) p1;-(return_type) instance_method3: (int) p1 andPar: (int) p2;@end</code></pre><p>Implementation</p><pre><code>@implementation MyClass {    int memberVar3;}-(return_type) instance_method1 {    ....}-(return_type) instance_method2: (int) p1 {    ....}-(return_type) instance_method3: (int) p1 andPar: (int) p2 {    ....}@end</code></pre><p>接口和实现以@interface、@implementation开头，都以@end结束。“@”符号在Objective-C中是个很神奇的符号。</p><p>冒号也是方法名的一部分，method和method:是两个不同的方法名，不是overload，第二个带参数。</p><p>上述代码对应的Java版：</p><pre><code>public class MyClass {    protected int memberVar1;    protected pointer memberVar2;    private int memberVar3;    public (return_type) instance_method1() {        ....    }    public (return_type) instance_method2(int p1) {        ....    }    public (return_type) instance_method3andPar(int p1, int p2) {        ....    }}</code></pre><h4 id="私有方法和公开方法"><a href="#私有方法和公开方法" class="headerlink" title="私有方法和公开方法"></a>私有方法和公开方法</h4><p>写在.h头文件里的方法都是公开的，Objective-C里没有私有方法的概念（没有你说个蛋啊，哈哈哈哈）。</p><p>官方并没有提到Objective-C怎么实现私有方法，我查阅了stackoverflow，统一的答案是，要实现私有方法的效果只能借助Category，不过，根据我的测试，即使采用了Category，也不能阻止外部的代码调用这个“私有方法”，只是Xcode不支持“私有方法”的自动完成，并会有警告提示，运行的时候，还是会成功的。各位看官知道有这么回事就可以了，这里不深讲。</p><h4 id="变量和属性"><a href="#变量和属性" class="headerlink" title="变量和属性"></a>变量和属性</h4><h4 id="类方法和实例方法"><a href="#类方法和实例方法" class="headerlink" title="类方法和实例方法"></a>类方法和实例方法</h4><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><p>类方法就是Java、PHP里的Static Method，不用实例化就能调。类方法有一个加号前缀。<br>示例：</p><p>类定义</p><pre><code>@interface MyClass    +(void) sayHello;@end@implementation MyClass+(void) sayHello {    NSLog(@&quot;Hello, World&quot;);}@end</code></pre><p>使用</p><pre><code>[MyClass sayHello];</code></pre><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><p>实例方法就是Java、PHP里的普通方法，必须实例化才能调。实例方法有一个减号前缀。<br>示例：</p><p>类定义</p><pre><code>@interface MyClass : NSObject-(void) sayHello;@end@implementation MyClass-(void) sayHello {    NSLog(@&quot;Hello, World&quot;);}@end</code></pre><p>使用</p><pre><code>mycls = [MyClass new];[mycls sayHello];</code></pre><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h4><p>selector就是一个方法指针，类似PHP里的动态方法名：</p><pre><code>&lt;?phpclass Hello {    public function sayHello() {}    public function test() {        $fun_name = &quot;sayHello&quot;;        $this-&gt;$fun_name();    }}</code></pre><p>在Objective-C里，selector主要用来做两类事情：</p><h5 id="绑定控件触发的动作"><a href="#绑定控件触发的动作" class="headerlink" title="绑定控件触发的动作"></a>绑定控件触发的动作</h5><pre><code>@implementation DemoViewController- (void)downButtonPressed:(id)sender {//响应“按钮被按下事件”的方法    UIButton *button = (UIButton*)sender;    [button setSelected:YES];}- (void)drawAnButton {    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];     btn.frame = _frame;     btn.tag = 1;    btn.backgroundColor = [UIColor clearColor];    [btn addTarget: self         action: @selector(downButtonPressed:)         forControlEvents: UIControlEventTouchUpInside];//当这个按钮被按下时，触发downButtonPressed:方法}@end</code></pre><h5 id="延时异步执行"><a href="#延时异步执行" class="headerlink" title="延时异步执行"></a>延时异步执行</h5><pre><code>@implementation ETHotDealViewController- (void)viewDidLoad {    //获取数据源    HotDealDataSource *ds = [[HotDealDataSource alloc]init];    [ds reload];    _items = ds.items;    [self performSelector: @selector(refreshTable)          withObject: self          afterDelay: 0.5];//延迟0.5秒调用refreshTable方法}-(void)refreshTable{    [self.tableView reloadData];}@end</code></pre><p>这个例子中，获取数据源是通过ASIHTTP组件异步调用服务端HTTP接口，refreshTable要用到数据源返回回来的数据，如果不延迟0.5秒，就会立刻执行，执行的时候数据还在路上呢，页面就要变空白了。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是写在Interface定义里面的。语法为：子类名在左，父类名在右，中间用冒号分隔。<br>示例：</p><pre><code>@interface MyClass : NSObject@end</code></pre><p>对应的Java版本是：</p><pre><code>public class MyClass extends NSObject {}</code></pre><h3 id="协议（Protocol）"><a href="#协议（Protocol）" class="headerlink" title="协议（Protocol）"></a>协议（Protocol）</h3><p>就是Java、PHP里的Interface。</p><h4 id="协议的定义"><a href="#协议的定义" class="headerlink" title="协议的定义"></a>协议的定义</h4><p>协议的定义用@protocol关键字：</p><pre><code>@protocol Printable    -(void)print:(NSString)str;@end</code></pre><p>对应的Java版本是：</p><pre><code>publilc interface Printable {    public void print(String str);}</code></pre><h5 id="协议的继承"><a href="#协议的继承" class="headerlink" title="协议的继承"></a>协议的继承</h5><p>协议本身也可以继承别的协议：</p><pre><code>@protocol Printable &lt;NSObject&gt;    -(void)print:(NSString)str;@end</code></pre><p>对应的Java版本：</p><pre><code>public interface Printable extends NSObject {    public void print (String str);}</code></pre><h5 id="可选方法"><a href="#可选方法" class="headerlink" title="可选方法"></a>可选方法</h5><p>协议可以包含可选方法，顾名思义，可选方法可以不被类实现：</p><pre><code>@protocol Printable@optional    -(void)print:(NSString)str;@end</code></pre><p>加了@optional关键字，一个类在implements这个协议时，便可以不实现print:方法。</p><p>Java里没有类似的实现，除了Collection里会有一些方法带有optional的注释，但Collection是个特例。</p><h4 id="协议的实现"><a href="#协议的实现" class="headerlink" title="协议的实现"></a>协议的实现</h4><p>一个类实现某些协议是写在Interface定义里面的。语法为：协议名用尖括号包裹，多个协议名用逗号隔开，协议写在父类的右边（如果没有父类就直接写在子类右边）。</p><p>示例：</p><pre><code>@interface MyClass : NSObject &lt;Printable, Drawable&gt;@end</code></pre><p>Printable, Drawablw就是两个协议。</p><p>对应的Java版本是：</p><pre><code>public class MyClass extends NSObject implements Printable, Drawable {}</code></pre><h3 id="分类（Category）"><a href="#分类（Category）" class="headerlink" title="分类（Category）"></a>分类（Category）</h3><p>分类可以给一个已经存在的类增加方法，而不用去改它的源码。Java和PHP中都没有类似的特性。</p><p>比如说，NSObject是一个Objective-C内置的系统类，我们想给它增加toJson方法，就像这样：</p><p>头文件：NSObject+Json.h</p><pre><code>@interface NSObject (Json)    -(NSString)toJson;@end</code></pre><p>实现文件：NSObject+Json.m</p><pre><code>@implementation NSObject (Json)    -(NSString)toJson {        //...    }@end</code></pre><p>使用的时候，只要包含NSObject+Json.h，实例化NSObject类，就可以使用toJson方法了：</p><pre><code>import &quot;NSObject+Json.h&quot;@implementation XYZController    -(void)test {        NSObject *obj = [[NSObject alloc]init];        NSString *str = [obj toJson];    }@end</code></pre><p>当然了，NSObject本来的那些方法依然还是可以用的，什么都没变，只是多了个toJson方法。看起来是不是和继承没太多差别呢（除了使用的时候实例化的是NSObject，而不是JsonObject）？再看一个继承实现不了的例子：</p><p>头文件：NSObject+Json+XML.h</p><pre><code>@interface NSObject (Json)    -(NSString)toJson;@end@interface NSObject (XML)    -(NSString)toXML;@end</code></pre><p>实现文件：NSObject+Json+XML.m</p><pre><code>@implementation NSObject (Json)    -(NSString)toJson {        //...    }@end@implementation NSObject (XML)    -(NSString)toXML {        //...    }@end</code></pre><p>使用：</p><pre><code>import &quot;NSObject+Json+XML.h&quot;@implementation XYZController    -(void)test {        NSObject *obj = [[NSObject alloc]init];        NSString *json = [obj toJson];        NSString *xml = [obj toXML];    }@end</code></pre><h2 id="Cocoa-Touch"><a href="#Cocoa-Touch" class="headerlink" title="Cocoa Touch"></a>Cocoa Touch</h2><p>Cocoa是Mac OS App的开发框架，Cocoa Touch是iOS开发用的框架，Cocoa Touch和Cocoa大部分是一样的，只是Cocoa Touch多了一些移动设备特有的东西，如：触摸屏、加速度传感器、GPS定位。Cocoa中多任务、多窗口的特性，在Cocoa Touch中也是没有的（或者跟Cocoa不完全一样的）。</p><p>就像学了Java语言还要再学一些Spring、Hibernate、Struts（或者其它类似的Java类库）才能开始做J2EE应用一样，学过Objective-C语言之后，也要再学习Cocoa Touch框架才能顺利地开发iOS应用。</p><h3 id="最常用设计模式之Delegate"><a href="#最常用设计模式之Delegate" class="headerlink" title="最常用设计模式之Delegate"></a>最常用设计模式之Delegate</h3><p>Cocoa Touch大量使用Delegate（委派）设计模式。</p><h3 id="常用控件：按钮、文本块、图片、输入框"><a href="#常用控件：按钮、文本块、图片、输入框" class="headerlink" title="常用控件：按钮、文本块、图片、输入框"></a>常用控件：按钮、文本块、图片、输入框</h3><h3 id="TableView"><a href="#TableView" class="headerlink" title="TableView"></a>TableView</h3><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><h3 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h3><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>快捷键：Comman R</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h4 id="搜索文本"><a href="#搜索文本" class="headerlink" title="搜索文本"></a>搜索文本</h4><h4 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h4><h3 id="新建文件-目录"><a href="#新建文件-目录" class="headerlink" title="新建文件/目录"></a>新建文件/目录</h3><p>推荐在Finder中新建好的再添加进来</p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><h2 id="模拟器和真机测试"><a href="#模拟器和真机测试" class="headerlink" title="模拟器和真机测试"></a>模拟器和真机测试</h2><h3 id="模拟器测试"><a href="#模拟器测试" class="headerlink" title="模拟器测试"></a>模拟器测试</h3><p>在Xcode中打开你的项目，在Xcode顶部工具栏的Stop按钮（Run按钮右边那个黑色正方形按钮）右边，有个下拉菜单，显示着 “ToolBarSearch &gt; iPhone 5.0 Simulator” （即 你的应用英文名 &gt; 当前选中的调试 ），点击这个下拉菜单，选中iPhone 5.0 Simulator（这里的5.0是指iOS版本，不是iPhone5的意思，如果你的项目是iPad应用，请选iPad 5.0 Simulator），再按“Run”按钮，Xcode就会自动把当前正在编辑开发的应用编译并安装到模拟器上。</p><p>在模拟器上操作时，如果执行过程中遇到了你在Xcode里设置的断点，模拟器会暂停运行，并将当前活动窗口切换回Xcode，供你调试。</p><p>在Xcode里增加或者取消了断点，不需要重新编译和安装应用即可生效。</p><h4 id="切换被模拟的设备"><a href="#切换被模拟的设备" class="headerlink" title="切换被模拟的设备"></a>切换被模拟的设备</h4><p>模拟器的“硬件”菜单，可以选择想要模拟什么设备，有iPad、iPhone可选。</p><ul><li>Retina：表示视网膜屏，iPhone(Retina)代表iPhone4，iPhone4S</li><li>4-Inch：表示4英寸的iPhone，iPhone(Retina 4-Inch)就是iPhone 5</li></ul><h4 id="切换模拟的iOS版本"><a href="#切换模拟的iOS版本" class="headerlink" title="切换模拟的iOS版本"></a>切换模拟的iOS版本</h4><p>在模拟器的“版本”菜单，可以选择要模拟什么版本的iOS。设备和版本是彼此独立的，iPhone 4S可以有5.0，5.1，6.1几种iOS版本，当然了，iPhone 5不可能有4.3的iOS版本。</p><h4 id="触摸屏"><a href="#触摸屏" class="headerlink" title="触摸屏"></a>触摸屏</h4><p>用鼠标点击（不区分左右键）模拟器上的iPhone、iPad屏幕，就是在模拟用手指触摸iPhone，iPad的屏幕，可以实现一些触摸效果比如：</p><ul><li>鼠标单击 等于 手指轻触</li><li>鼠标长按 等于 手指长按（例如你可以在模拟器上长按应用icon调出删除应用的确认框）</li><li>鼠标按住拖动 等于 手指拖动</li><li>双击和单击模拟器的Home键也等于双击和单击真机的Home键</li></ul><h5 id="多指手势"><a href="#多指手势" class="headerlink" title="多指手势"></a>多指手势</h5><p>多指手势比较复杂，在白苹果笔记本上可以模拟简单的双指手势，白苹果的触控板天然支持多指触摸，但要定位到模拟器的区域再响应多指手势就需要借助一些额外的键啦：</p><ul><li>按住Option键，再用两个手指去操作触摸板，可模拟双指拖动、旋转</li><li>按住Option+Shift，可模拟双指合拢</li></ul><h4 id="输入法和键盘"><a href="#输入法和键盘" class="headerlink" title="输入法和键盘"></a>输入法和键盘</h4><h5 id="输入中文"><a href="#输入中文" class="headerlink" title="输入中文"></a>输入中文</h5><p>手机上特有的输入法（比如九宫格输入法）不能模拟。模拟器默认的iOS软键盘只有英文输入，在测试应用的时候，我们要用到中文，有两个办法：</p><ul><li>使用剪贴板，在Mac OS里复制，再到模拟器运行的应用中的输入框上长按鼠标（模拟手指长按）3秒以上，等弹出“粘贴”的时候选择之，即可。</li><li>在模拟器里，按Home键，找到Setting那个App icon（不是Mac OS顶部的模拟器菜单啊，那里没有Setting的），打开被模拟iOS设备的设置，依次点击”General - Keyboard - International Keyboards - Add New Keyboard…”，加个中文键盘，以后就可以使用被模拟iOS设备软件盘输入中文了，跟在iPhone/iPad真机上一样。</li></ul><h4 id="使用Mac电脑的键盘"><a href="#使用Mac电脑的键盘" class="headerlink" title="使用Mac电脑的键盘"></a>使用Mac电脑的键盘</h4><p>如果要输入大量文本，使用模拟器里的软键盘效率太低，这时候可以使用物理键盘，方法是：在Mac OS顶部的模拟器菜单栏，点击”硬件”菜单，勾选下拉菜单中的“模拟硬件键盘”。以后再用模拟器运行iOS应用时，点击iOS应用中的输入框，软键盘就不弹出来了，可直接使用Mac电脑的物理键盘输入。</p><p><em>注意</em>：</p><ul><li>模拟器中的iOS接管了物理键盘输入，所以，调用的是模拟器iOS的输入法，不是你的Mac电脑的输入法。打个比方，你的Mac OS装的是搜狗五笔，模拟器中iOS加了个拼音输入法（Add New Keyboard），那么，在iOS应用中输入中文会调用拼音输入法。</li><li>要切换模拟器中iOS的中英文输入法，也只能按iOS设备软键盘上的小地球图标，按Mac电脑上的Command+空格键是不行的。</li></ul><h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><p>但Mac电脑没有定位用的硬件（GPS）和软件基础，因此模拟器不能自动获得当前的地理位置，不能用模拟器测试定位功能。（注意，虽然WiFi也可以独立定位——iPad WiFi版没有GPS也可以定位，但Mac电脑的WiFi不具备定位相关的软件）</p><p>要在模拟器里测试依赖地理位置的功能（如”我附近的xx”），可以手工指定一个经纬度给模拟器，方法：在Mac电脑顶部的模拟器菜单，点击”调试 - 位置 - 自定位置”，会弹出一个对话框，在弹出的框内填入经纬度即可。</p><p>如何获得经纬度？<br>上谷歌地图（ditu.google.cn），在地图上找到你想要的位置（比如你想知道杭州大厦的位置，就在通过搜索框找到杭州大厦），点击右键，选择“这儿是什么”，搜索框中就会出现这个位置的经纬度了，前面是纬度，后面是经度。咱们天朝的版图，都是北纬和东经。</p><h4 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h4><p>Mac电脑有摄像头，但Mac OS没有设计API给iOS模拟器调用，所以，不能用模拟器测试对焦闪光灯等功能。</p><p>要在模拟器上测试依赖照片的功能，可以在代码里做一个workaround，即当代码检测到摄像头不可用时，弹出一个照片选择器，让测试人员从相册里选择一幅照片，来进行后续的操作（如照片美化、人脸识别、条码扫描）。</p><h3 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h3><p>模拟器能验证你开发的iOS应用的大部分功能，但有些Mac设备上不具备的硬件，模拟器是不能模拟的。前文提到了一个绕过这些限制的办法，但获取当前位置、拍照、加速度感应这些是模拟不了的，一款应用发布给消费者之前，必须要在真实设备上验证过。</p><p>将未提交App Store审核通过的应用安装到iOS设备上测试，有三种办法：</p><ul><li>加入苹果的Developer Program，成为付费会员，有了这个付费会员资格，就可以直接在Xcode中点击”Run”将刚刚改过的代码编译打包安装到开发测试用的iOS设备上。在iOS真机上操作被测试的程序能激活Xcode中设置的断点。</li><li>越狱iOS设备。将iPhone和iPad越狱后，可以通过SSH直接上传Xcode编译好的ipa包（一个iOS App本质上就是一个ipa包）。</li><li>越狱的iOS设备，配合破解过的Xcode，甚至可以实现和付费开发者计划一样的功能：在Xcode上点击”Run”，就自动编译安装到iOS设备上去运行了</li><li>企业部署方案。就像阿里巴巴的<a href="http://xyj.im" target="_blank" rel="noopener">轩辕剑</a>一样，用iPhone/iPad访问这个网址，点击里面的轩辕剑链接就可以安装轩辕剑这个应用了。</li></ul><p>破解Xcode是违法行为（越狱是合法的），而且挑版本挑得厉害，不是所有Xcode版本都能破解，也不是所有Xcode的破解版都能和越狱的iOS配合好。越狱+SSH上传跟企业部署一样效率低（部署效率低，无法激活Xcode中的断点），只能用于QA验收，不适合开发自测。综上所述，最适合开发实时测试的就是第一个正规途径了。下面重点讲这个：</p><h4 id="拥有一个开发者账号"><a href="#拥有一个开发者账号" class="headerlink" title="拥有一个开发者账号"></a>拥有一个开发者账号</h4><p>苹果的Developer Program分为个人开发者和公司开发者，分别是每年99美元和每年299美元，分别可以注册100台和500台苹果测试设备。这个台数限制在一个付费年度内不会清空，比如说，2013年4月1日付费成功的，付费会员资格在2014年3月31日之前有效，这期间，注册一台就少一个名额，哪怕这个设备注册进来用了之后一分钟马上又删掉了，减少的这个名额也不会回来。</p><p>在交钱之前，最好问一下，周围的同事，有没有已经交了钱的。如果有，你只需要注册一个免费的Apple ID（就是你在App Store安装软件用的Apple ID），请他发个邀请邮件给你，把你的Apple ID加入他的团队就可以了，苹果会认为你们两个人是一个团队的，你们分别用自己的账号，共享100台设备的限额，这是合法的。</p><h4 id="安装证书和私钥"><a href="#安装证书和私钥" class="headerlink" title="安装证书和私钥"></a>安装证书和私钥</h4><h5 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h5><p>不想看下面各种点击各种页面跳转的直接用浏览器访问<a href="https://developer.apple.com/ios/manage/certificates/team/index.action" target="_blank" rel="noopener">证书管理</a>，你要登录你就用Apple ID登录（前提是交过钱，或者找交了钱的人把你加入团队了）。<br>&gt;<br>不嫌烦，或者想知道下次没我这个文档的时候怎么进证书管理吗？按这个步骤操作：</p><ul><li>进入 <a href="https://developer.apple.com/" target="_blank" rel="noopener">苹果开发者中心</a></li><li>点击iOS Dev Center</li><li>点蓝色“Login”按钮，用你的Apple ID登录，登录成功会跳到 <a href="https://developer.apple.com/devcenter/ios/index.action" target="_blank" rel="noopener">开发者首页</a></li><li>点击右上角的<a href="https://developer.apple.com/ios/manage/overview/index.action" target="_blank" rel="noopener">iOS Provisioning Portal</a>（别找了，直接Command F搜索多好）</li><li>点左侧菜单栏里的<a href="https://developer.apple.com/ios/manage/certificates/team/index.action" target="_blank" rel="noopener">Certificates</a></li></ul><p>页面上有一个“Your Certificate”区域，下方有个Download圆角按钮，这是你的个人证书，下载下来。再下面一行，有一句“If you do not have the WWDR intermediate certificate installed, <a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer" target="_blank" rel="noopener">click here to download now</a>”，这个是苹果的公共证书，也下下来。</p><p>双击下载回来的证书，装证书时，会提示你输入密码，这是【钥匙串访问工具】在问你要你的Mac OS账号开机密码（相当于linux里面的sudo），不是Apple ID的密码，不要搞错了。</p><h5 id="安装私钥"><a href="#安装私钥" class="headerlink" title="安装私钥"></a>安装私钥</h5><p>如果你是和其它同事公用的账号，让他给你一个私钥即可，就是一个扩展名为p12的文件，双击之，钥匙串访问会自动出来，需要你输入一个密码，这个密码问给你p12文件的人要，不是你的Mac OS系统开机密码，也不是你的Apple ID密码。</p><h4 id="将设备注册到Provisioning-Portal"><a href="#将设备注册到Provisioning-Portal" class="headerlink" title="将设备注册到Provisioning Portal"></a>将设备注册到Provisioning Portal</h4><ul><li>打开Xcode，从Xcode的Window菜单中找到Organizer，打开之（Shift Command 2）。</li><li>把iOS设备连上电脑，Organizer会自动识别出你的设备，并显示在左侧边栏。</li><li>在Organizer左侧边栏找到你的设备，右键，点击“Add Device to Provisioning Portal”，然后等Organizer提示你操作成功即可。（选中设备后，右边设备详情区域会显示一个按钮“Use for Development”，点它也可以）。</li></ul><h4 id="到iOS真机上运行测试版程序"><a href="#到iOS真机上运行测试版程序" class="headerlink" title="到iOS真机上运行测试版程序"></a>到iOS真机上运行测试版程序</h4><p>回到Xcode主界面，在Stop按钮（Run按钮右边那个黑色正方形按钮）右边，有个下拉菜单，显示着 “ToolBarSearch &gt; iPhone 5.0 Simulator” （即 你的应用英文名 &gt; 当前选中的调试 ），点击这个下拉菜单，选中你的真机设备名，再按“Run”按钮，Xcode就会自动把当前正在编辑开发的应用编译并安装到真机上测试啦！</p><h4 id="发布到App-Store"><a href="#发布到App-Store" class="headerlink" title="发布到App Store"></a>发布到App Store</h4><h4 id="打IPA包"><a href="#打IPA包" class="headerlink" title="打IPA包"></a>打IPA包</h4><p>IPA包本质上是一个ZIP压缩包，只不过它有着特殊的目录结构，扩展名是ipa，制作方法如下：</p><ul><li>在Xcode中Build项目，快捷键Command B</li><li>在左侧项目导航器中，展开Products文件夹，找到你要打包的应用，你的应用名.app，右键，选择show in finder</li><li>到Finder中Copy这个.app目录（选中，按Command C），复制到一个你新建的名为Payload（区分大小写）的文件夹中</li><li>找到你的应用Logo，即一个512 * 512像素的PNG文件，copy到与Payload一起（与Payload并列，不要放进Payload了），并重命名为iTunesArtwork（区分大小写，没有扩展名）</li><li>将Payload目录、ItunesArtwork文件打成一个zip包，并更改扩展名为ipa</li><li>双击这个ipa文件，会用iTunes打开，如果打开成功，且在iTunes里有应用Logo显示，就成功了                </li></ul><h4 id="批量自动打包"><a href="#批量自动打包" class="headerlink" title="批量自动打包"></a>批量自动打包</h4><p>除App Store外，还有许多其它的iOS应用市场（如91助手，同步推等等），如果一个应用需要发布到很多个应用市场，且他们的代码略有不同（比如说，统计代码不同），按上述方法手工修改源码再打包，再还原，比较容易出错。好消息是，Xcode是有命令行的，我们可以写一个shell脚本，先用se自动修改源码，再调用Xcode的命令行来编译以得到your——app.app目录，最后调用zip、mv等命令把上一个章节讲的ipa打包动作自动执行。</p><h2 id="阅读应用代码"><a href="#阅读应用代码" class="headerlink" title="阅读应用代码"></a>阅读应用代码</h2><h2 id="从头新建一个应用：Hello-World"><a href="#从头新建一个应用：Hello-World" class="headerlink" title="从头新建一个应用：Hello World"></a>从头新建一个应用：Hello World</h2><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="代码里的控件尺寸"><a href="#代码里的控件尺寸" class="headerlink" title="代码里的控件尺寸"></a>代码里的控件尺寸</h3><p>iOS App里的控件尺寸和字体大小都是指Point，Retina设备（iPhone 4，4S，5；the new Pad）和非Retina设备（iPhone 3GS，iPad，iPad 2）的Point数是一样的，尽管iPhone 4的分辨率是3GS的2倍。比如说，10point在Retina设备里是20 pixel，在非Retina设备（iPhone 3G）上则是10 pixel。</p><p>项目成员间交流时，应使用Point，不要使用pixel。</p><h3 id="SVN操作含有-符号的文件"><a href="#SVN操作含有-符号的文件" class="headerlink" title="SVN操作含有@符号的文件"></a>SVN操作含有@符号的文件</h3><p>iOS应用中经常出现xxxx@2x.png这样的文件名,它们是给retina设备用的高分辨率大图，用svn命令行操作它们的时候会被@符号干扰,解决方案是在svn命令末尾加上一个@符号,如:</p><pre><code>svn del icon@2x.png@svn info Default@2x.png@</code></pre><p>如果一次移动了几十个png文件再svn commit的,可以用shell批处理:</p><pre><code>svn status | awk &apos;($1==&quot;!&quot;){print $2}&apos; | grep -v @ | xargs svn del</code></pre><p>上面这个命令是将文件名不包含@符号的,且已经不在硬盘上的文件从svn version controll中删掉</p><pre><code>for file in `svn status | awk &apos;($1==&quot;!&quot;){print $2}&apos; `; do svn del $file&quot;@&quot;; done     </code></pre><p>上面这个命令是将文件名包含@符号的,且已经不在硬盘上的文件从svn version controll中删掉</p><p>svn add同上, 如法炮制即可.</p><h3 id="Xcode中的代码结构与操作系统上的文件系统并不一致"><a href="#Xcode中的代码结构与操作系统上的文件系统并不一致" class="headerlink" title="Xcode中的代码结构与操作系统上的文件系统并不一致"></a>Xcode中的代码结构与操作系统上的文件系统并不一致</h3><p>推荐在Finder里建好目录再到Xcode的Project Navigator中点击“Add Files to”添加到项目中</p><h3 id="iPhone-5适配"><a href="#iPhone-5适配" class="headerlink" title="iPhone 5适配"></a>iPhone 5适配</h3><p>iPhone 5与之前的iPhone不一样，采用了4寸Retina屏，所以它的Point数变成了320 * 568 points</p><h3 id="开源代码"><a href="#开源代码" class="headerlink" title="开源代码"></a>开源代码</h3><ul><li><a href="https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&amp;topic=Sample%20Code" target="_blank" rel="noopener">Apple官方的Sample Code</a></li><li><a href="http://en.wikipedia.org/wiki/List_of_free_and_open_source_iOS_applications" target="_blank" rel="noopener">维基百科上的开源iOS App</a></li><li><a href="http://www.iosopensource.com/" target="_blank" rel="noopener">iOS Opensource</a> –Domain Parking了，以前可以下载Twitter和Wordpress客户端的</li><li><a href="http://code4app.com/" target="_blank" rel="noopener">code 4 app</a></li><li><a href="http://ui4app.com/" target="_blank" rel="noopener">UI 4 app</a>， code4app的姐妹站</li></ul><h3 id="Objective-C教程"><a href="#Objective-C教程" class="headerlink" title="Objective-C教程"></a>Objective-C教程</h3><ul><li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html" target="_blank" rel="noopener">Apple官方教程</a></li><li><a href="http://cocoadevcentral.com/d/learn_objectivec/" target="_blank" rel="noopener">Cocoa Dev Center</a></li><li><a href="http://zh.wikipedia.org/wiki/Objective-C" target="_blank" rel="noopener">维基上的Objective-C语言简介</a> –中文，十分钟可读完，推荐</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="noopener">https://github.com/qinjx/30min_guides/blob/master/ios.md</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文面向已有其它语言（如Java，C，PHP，Javascript）编程经验的iOS开发初学者，初衷在于让我的同事一小时内了解如何开始开发iOS App，学习目标包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能使用Xcode IDE、模拟器&lt;/li&gt;
&lt;li&gt;能修改、调试已有iOS App&lt;/li&gt;
&lt;li&gt;能在已有应用内创建新模块&lt;/li&gt;
&lt;li&gt;能创建新应用&lt;/li&gt;
&lt;li&gt;能发布应用到App Store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文不包含任何高级的iOS开发知识，已学会iOS开发的同学不要看，看完这篇文章学会了的同学也不用再看了。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://blackist.org/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>生活和开发的一些良好建议</title>
    <link href="https://blackist.org/2019/01/02/life-tips-awesome/"/>
    <id>https://blackist.org/2019/01/02/life-tips-awesome/</id>
    <published>2019-01-02T06:56:30.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.一个浪头打过来，最好的办法是迎上去了解个究竟，而不是漠视，或者干脆当事情没有发生。</p><p>2.记住这个教训：别猜，去问！去查！</p><p>3.隔一段时间重顾知识是记忆的关键方法。不要一次性学完一项知识就不管了，这样你无法真正的掌握。隔一段时间回顾一下，每次重复，你都会加深自己的<br>理解，次数多了，你就会理解每个细节，成为真正的专家。</p><a id="more"></a><p>4.对于一个技术通常我们需要抱有这样的疑问</p><p>它是什么 一句话概括<br>解决了什么问题 存在的意义<br>怎样去使用它<br>怎样解决了问题 内部的实现<br>它的缺点是什么 多角度分析</p><p>5.高效率的学习方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">理清楚概念很重要</span><br><span class="line">做好控制变量法</span><br><span class="line">多动手实践，与理论结合</span><br><span class="line">抓住重点，剔除干扰因素</span><br></pre></td></tr></table></figure><p>6.关于如何选择第三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">确定这个库是否是必需的</span><br><span class="line">这个库能否带来开发效率的提升，降低代码的维护成本</span><br><span class="line">这个库的学习成本如何 比如rxjava其实学习成本会相对高一些。</span><br><span class="line">这个库的质量如何，不要仅仅看star，更要看issue的处理情况。</span><br></pre></td></tr></table></figure><p>7.怎样练习算法题？</p><p>每道算法题都先自己去实现，先写思路，然后自己去实现一遍，然后再看看答案，记住答案的思路，第二天再重新按照答案的思路实现一遍。</p><p>8.”另类”的学习方法</p><p>抄书的奥妙——那就是延缓阅读速度，不至遗漏每一个重要的细节：眼到，手到，心到，其实不仅书抄得，代码(优秀源码)也抄得。</p><p>9.建议：建立逐字稿</p><p>计算机网络相关的逐字稿<br>计算机操作系统相关的逐字稿<br>数据库相关的逐字稿<br>设计模式相关的逐字稿<br>数据结构与算法相关的逐字稿<br>Java知识相关的逐字稿<br>Kotlin知识相关的逐字稿<br>Python知识相关的逐字稿<br>React Native知识相关的逐字稿<br>Flutter知识相关的逐字稿<br>小程序知识相关的逐字稿<br>JS知识相关的逐字稿<br>Android知识相关的逐字稿<br>与技术无关的逐字稿</p><p>10.如何提升你的阅读能力？</p><p>只字不差的反复阅读<br>真正的获取知识，是通过阅读，深入思考与践行</p><p>11.如何高效阅读一篇文章？</p><p>由主题扩展为知识树<br>尝试描述<br>尝试记忆</p><p>12.如何阅读源码？</p><p>准备：<br>Java设计模式(模板方法，单例，观察者，工厂方法，代理，策略，装饰者)，<br>Java高级相关<br>熟练掌握这个库<br>先Google了解软件的整体架构设计<br>搭建系统，把源码跑起来</p><p>开始阅读：<br>根据你对系统的理解，设计几个主要的测试案例，定义好输入，输出。(Debug一遍肯定是不行的，需要Debug很多遍)<br>第一篇抛弃细节，抓住主要流程，第二篇，第三篇，再去看各个部分的细节。<br>阅读的时候同时使用UML画出系统的类图。<br>主要的测试案例明白了，丰富测试案例，考虑一些分支。<br>这一步会非常非常地花费时间，但是你做完了，对系统的理解绝对有质的飞跃。</p><p>13.想象一个来自未来的自己，他非常自信，非常成功，<br>拥有你现在所希望的一切，他会对现在的你说些什么？<br>他怎么说，你就怎么去做，10年之后，你就变成了他。</p><p>14.重视实践，充分运用感性认知潜能，在项目中磨炼自<br>己，才是正确的学习之道。在实践中，在某些关键动作<br>上刻意练习，也会取得事半功倍的效果。</p><p>15.我们需要从别人身上学习。从老师、领导、同事、<br>下属甚至对手身上学习，是快速成长的重要手段。</p><p>16.多多总结，多多分享，善莫大焉。</p><p>17.解答别人的问题也是个人成长的重要手段。有时候，<br>某个问题自己本来不太懂，但是在给别人讲解的时候却<br>豁然开朗。所以，“诲人不倦”利人惠己。</p><p>18.学习计划最好能结合工作计划，理论联系实际结合，快速学以致用。</p><p>19.良好的用人方式应该如下：</p><p>首选选择相信，在面临失败后，收缩信任度。</p><p>查找失败的原因，提供改进意见，提升下属的能力。</p><p>总是给下属机会，在恰当地时机给下属更高的挑战。 总之，苍天大树来自一颗小种子，要相信成长的力量。</p><p>20.学习就是不断地刻意联系，刻意练习，就是有目的的练习，先规划好，<br>再去练习。首先给自己定一个目标，目标可以有效的引导你学习，然后使<br>用3F练习法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1： 专注（Focus），专注在眼前的任务上，在学习过程中保持专注，可以尝试使用番茄工作法。</span><br><span class="line"></span><br><span class="line">2：反馈（Feedback），意识到自己的不足，学习完之后进行反思，思考下自己哪些方面不足，为什么不足，</span><br><span class="line"></span><br><span class="line">3： 修正（Fix），改进自己的不足。</span><br></pre></td></tr></table></figure></p><p>不停的练习和思考可以改变大脑结构，大脑像肌肉一样，挑战越大，影响越大，学习更高效，并且也会产生突破性。</p><p>21.写一篇博客的过程，其实就是对一件事情，学习、理解、思考、转化，最终输出成一篇博客的过程。</p><p>22.深入浅出SQL给出的学习法则：</p><p>如何快速记忆知识？<br>将文字转换为图片（将文字嵌入图片效果比较好)，如果能转换为令人惊奇，有趣的情景模拟，那么可以让你的大脑意识到这是重要的东西，记忆效果会更好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.慢慢来，理解越多，需要强记得就越少。</span><br><span class="line"></span><br><span class="line">2.勤做笔记，写下你的心得笔记。</span><br><span class="line"></span><br><span class="line">3.你的大脑会需要一段时间来消化新知识，如果之后再学别的知识，会使之前的记忆效果减弱，因此，在睡前看最重要的知识。</span><br><span class="line"></span><br><span class="line">4.喝水，多喝水。</span><br><span class="line"></span><br><span class="line">5.大声说出你想要记忆的知识，如果能与别人进行一问一答则效果更佳。</span><br><span class="line"></span><br><span class="line">6.当学习知识时，达到了漫不经心或过目即忘的状态，则应该让大脑好好休息。</span><br><span class="line"></span><br><span class="line">7.用心感受，让你的大脑知道这很重要，将学习的内容尽量以情景化+惊奇+幽默的形式展示出来。</span><br><span class="line"></span><br><span class="line">8.用学到的知识解决实际的难题（真实的情景演练）。</span><br></pre></td></tr></table></figure></p><p>23.想要学习新技术，想要提升自己，不是看见新技术就去学，沉下心来认真钻研才行，吃透它，不再为缓解焦虑而学习。</p><p>24.业务代码一样很牛逼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.使用封装和抽象可以使业务代码更具扩展性。</span><br><span class="line">2.多和产品交流以便更好地理解和实现业务。</span><br><span class="line">3.日志记录好了问题定位效率可以提升10倍。</span><br></pre></td></tr></table></figure><p>25.在工作中学习、实战提升是效果最好的，其余时间可有目的去碎片化学习<br>一整块知识，也可以快速构建牢固的知识体系。</p><p>26.三做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">做更多：</span><br><span class="line">工作中熟悉多个业务代码，端到端（前后端）的业务代码，自学。</span><br><span class="line"></span><br><span class="line">做更好：</span><br><span class="line">1.提升项目稳定性，引进单元测试和UI测试。</span><br><span class="line">2.重构解耦项目。</span><br><span class="line">3.性能优化。</span><br><span class="line">4.设计模式去除重复代码。</span><br><span class="line"></span><br><span class="line">做练习：</span><br><span class="line">1.学习</span><br><span class="line">2.尝试</span><br><span class="line">3.教学</span><br></pre></td></tr></table></figure><p>27.一项新技术的出现，应该先去了解它，看它是否对自身的技术成长有比较大的帮助，有的话按优先级加入计划表</p><p>28.重复记忆时间间隔：1小时、早上/晚上、1天、3天、7天、1个月、3个月形成长期记忆~</p><p>29.学习一个新的知识点的流程：<br>what、why、how、原理/源码、优缺点~<br>注意”先主后从“原则，多实践加深理解。</p><p>==== 告诉我自己 ====</p><p>30.对自己狠一点</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jsonchao.github.io/2018/04/22/Some%20awesome%20tips/" target="_blank" rel="noopener">https://jsonchao.github.io/2018/04/22/Some%20awesome%20tips/</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.一个浪头打过来，最好的办法是迎上去了解个究竟，而不是漠视，或者干脆当事情没有发生。&lt;/p&gt;
&lt;p&gt;2.记住这个教训：别猜，去问！去查！&lt;/p&gt;
&lt;p&gt;3.隔一段时间重顾知识是记忆的关键方法。不要一次性学完一项知识就不管了，这样你无法真正的掌握。隔一段时间回顾一下，每次重复，你都会加深自己的&lt;br&gt;理解，次数多了，你就会理解每个细节，成为真正的专家。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://blackist.org/categories/Life/"/>
    
    
      <category term="成长之路" scheme="https://blackist.org/tags/%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>总结2018展望2019</title>
    <link href="https://blackist.org/2018/12/31/life-summary-2018/"/>
    <id>https://blackist.org/2018/12/31/life-summary-2018/</id>
    <published>2018-12-31T02:36:21.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是2018年12月31日，2018年的最后一天，做个年终总结，再来个2019Flags。</p><a id="more"></a><h2 id="回顾2018"><a href="#回顾2018" class="headerlink" title="回顾2018"></a>回顾2018</h2><p>这一年来的匆匆，走的匆匆，努力了才会留下些什么。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>今年，感谢大宝贝婷子陪我走，并一路走来，感谢她给予的爱和关怀。因为她的可爱和活泼，我们的生活有很多乐趣；因为她的睿智和耐心，我认识到自己很多不足的地方；因为她的督促和鞭策，我努力改变自己、完善自己，让一个更好的自己陪在她身边。</p><p>平日里，我多数时间用在代码上、项目里，很容易忽略她的感受，对于这一点我比较自责。有时我能陪她聊会天、走一走，她都会很开心，吃东西她也希望我们一人一半，所以说她是个可爱也知足的女孩，我很喜欢很爱她。</p><p>也许像别人说的本命年，会有一劫吧，家里也发生了一些事情，好在一家人同心协力，难关走了过去。</p><p>明白了一些做人的道理，人外有人天外有天，要保持一颗谦卑的心；好多时候好多事情做之前要让别人理解，因为不是我们一个人。</p><p>记一些琐碎的事情，5月份：</p><ul><li>帮朋友忙，朋友请吃牛排，这是婷子第一次说喜欢牛排</li><li>在华元发现一家酸菜鱼面馆，之后和婷子经常去</li><li>婷子这么爱吃，却仍然保持着魔鬼般的身材</li><li>我开始健身，并坚持了一个多月</li></ul><p><img src="http://pic.blackist.top/life-yuti-IMG_1666%2820181231-113156%29.jpg" alt></p><p>6月份：</p><ul><li>在学校遇到一个巴基斯坦哥们，了解了穆斯林月</li><li>和婷子去工商食堂吃饭，看到了可爱的HelloKitty主题食堂</li><li>修好了婷子的小蓝车，开始两个人在晴天一起骑车去学校</li><li>在和达成抓到了好多娃娃</li><li>我把实验室的冰箱彻底收拾了一遍，可以称为造福人类的举动</li><li>抓到了大猪佩奇，把抓到的好多小娃娃封箱</li><li>2号楼乒乓球桌被搬走之后好久没打球，在15号楼发现一个乒乓球台，和婷子去玩，结果婷子自己背靠墙等我，我跟别人在玩</li><li>开始在实验室煮东西吃</li><li>看了雷哥的超时空恋爱</li><li>开始关注世界杯</li><li>第一次收到交通罚单，因为骑车载人</li></ul><p><img src="http://pic.blackist.top/life-yuti-0181231115311.jpg" alt></p><p>7月份：</p><ul><li>带婷子去弗雷德买个条长裙，很好看</li><li>我嫂子准备自己去苏州打工，我让朋友接待了，一天折腾下来直接回家啦，哈哈</li><li>在实验室煮面条、煮菜粥</li><li>程咬金拿五杀</li><li>和大海去25号楼拍晚霞</li><li>开始和婷子去学校游泳馆游泳</li><li>婷子搬进研究生寝室楼</li><li>我急性肠胃炎，婷子陪我去医院，感谢婷子不嫌弃的陪伴</li><li>婷子开始健身，为了暑假回家可以受一点，每天做一次平板支撑</li><li>向青从老家来杭州看婷子，俩人整天形影不离的，我都羡慕了</li><li>婷子第一次单手骑车，一只手拿太阳伞</li><li>经历了杭州的大雨，整个下沙一片水世界</li></ul><p><img src="http://pic.blackist.top/life-yuti-IMG_1668%28201.jpg" alt></p><p>8月份：</p><ul><li>和婷子一起做了小猪佩奇的“纹身”</li><li>买了件透明雨衣，婷子第一次穿雨衣很开心</li><li>上钻石段位</li><li>婷子从研究生寝室楼搬回10号楼</li><li>婷子回老家</li><li>我回老家考驾照科目三</li><li>回到家，吃了好久没吃的老妈做的饭</li><li>送我侄子去汉城国际上小学</li></ul><p><img src="http://pic.blackist.top/life-yuti-02D126C4784F3151C58F36BE2AC172C1.jpg" alt></p><p>9月份：</p><ul><li>回到学校</li><li>和婷子去吃素食餐厅</li><li>实验室新生都来了</li><li>给婷子搞了一个书架放在实验室，很实用</li><li>实验室去真味馆聚餐</li><li>四人行学期总结</li><li>我学习vue，用在了时时刻刻项目里</li><li>婷子开始学习ios，做智能家居客户端开发</li><li>和婷子去图书馆找ios开发的书</li><li>参加点赞送书活动，拿到了SpringCloud书</li></ul><p><img src="http://pic.blackist.top/life-yuti-F01C2F8D164FB7D0AF88B2ECDCADBCDA.png" alt></p><p>10月份：</p><ul><li>国庆节和婷子去南京玩</li><li>去南京博物馆、玄武湖、夫子庙、1865创意管、达摩洞、长江</li><li>去奥特莱斯买大衣</li><li>和徐兴去钱塘江看潮，最后和婷子小窦昊五人一起去吃晚饭</li><li>大气突然很冷，给侄子买衣服，婷子帮忙选的</li><li>婷子送我一个ikbc的机械键盘</li><li>参加Kylin开源项目线下沙龙杭州站讲座</li></ul><p><img src="http://pic.blackist.top/life-yuti-DF2C2A34AAC4E1D50B36A09FE7856E0D.png" alt></p><p>11月份：</p><ul><li>买了一副锤子耳钉，程序媛的风格</li><li>跟婷子去工商，和小窦昊、老黄一起吃饭</li><li>去华元看毒液</li><li>婷子考软件评测师</li><li>瓜皮过生日，在寝室吃了吃蛋糕，等老唐和小柳柳一直没回来，我们先吃了。这才知道我和瓜皮生日仅隔一天</li><li>送婷子去阿姨家，来回46站路，就花了两块钱；婷子在阿姨家很开心，还谈婚论嫁的，一顿紧张</li><li>惹婷子不开心，哭了一大晚上，第二天去工商找小窦昊散散心，发现了一个心理咨询室，嗓子都喊哑了</li><li>学林街的枫树都红了</li><li>把婷子的宿舍彻底收拾了一边</li><li>向青给婷子买了小包包做生日礼物，大大的金链子，贼耀眼；话说拍完买家秀就没背过了</li><li>芳芳、林妹妹都给瑜婷寄来了生日礼物</li></ul><p><img src="http://pic.yuti.site/yuti-birthday-24-%E5%90%91%E9%9D%92%E5%8C%85%E5%8C%85.jpg" alt></p><p>12月份：</p><ul><li>给婷子过生日，和梦琳、小颖、博威在和达成吃火锅</li><li>迎来2018杭州第一场雪，带上了粉色的耳套子，暖和最重要</li><li>发现一个60多岁的程序员老大爷，做Android开发的</li><li>学校一区食堂举办了美食大赛</li><li>裸考六级</li><li>婷子拿到软件评测师证书</li><li>冬至和婷子在食堂吃水饺，晚上和实验室同学聚餐，第一次喝江小白</li><li>圣诞节，Coding举办彩蛋兑换奖品活动，其他也就没啥了</li><li>集齐1.98个码币，换了一只Coding猴子</li></ul><p><img src="http://pic.blackist.top/life-yuti-00E55B447F20192C1C155DC16631EEBB.png" alt></p><p>这是一年中我还没遗忘，能够记录下来的事情。好多事情让我成长、明白了一些道理，也更明确生活需要努力，未来并不遥远–就是现在，为了让明天的我感谢今天的自己，用心生活。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>主要还是学习开发方面的东西，涉及到Android、Vue、Nodejs、微信小程序、SpringBoot，开始学习一些简单的算法，认真写博客。</p><p>Android：</p><ul><li>WakefulBroadcastReceiver结合IntentService做长连接心跳机制</li><li>可视对讲中音视频卡顿优化，视频帧处理</li><li>Android7.0源码阅读和修改，定制SystemUI、系统预装等</li><li>入门RxJava，但不怎么用还是生疏了</li><li>入门模块化开发，研究组件间通信、主题统一、MVP</li><li>提交开源组件化开发项目<a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">Modulize</a></li><li>编写组件间通信工具<a href="https://github.com/blackist/BRouter" target="_blank" rel="noopener">BRouter</a>，发布到jcenter，可通过gradle 来导入</li><li>研究Fragment在Activity中的出入栈管理</li></ul><p>Vue：</p><ul><li>Vue入门语法、实践</li><li>vue-router的使用</li><li>axios网络访问框架</li></ul><p>Nodejs：</p><ul><li>Koa路由框架</li><li>数据库框架Sequelize</li><li>开源脚手架项目<a href="https://github.com/blackist/node-koa-restful" target="_blank" rel="noopener">node-koa-restful</a>，可以快速搭建一个后台接口服务</li><li>基于脚手架项目，大家极光、小米推送后台服务</li></ul><p>微信小程序：</p><ul><li>基于vue学习mvvue框架开发小程序，但没有实战项目，浅尝辄止</li></ul><p>SpringBoot：</p><ul><li>SpringBoot入门</li></ul><p>RxJava以及Kotlin对于Java开发是很重要，一直列在TODO list上却没有执行，模块化开的几篇笔记还没有完成，SPringBoot系列框架还没有熟悉，SpringBoot脚手架还没有搭建。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>今年主要在做三个项目，智能门禁以及客户端项目(Android)、时时刻刻课程系统项目(Vue)、智慧宿管平台项目(Android+Spring)，感受比较深的就是需要做好团队内的沟通工作，大家一起向着一个目标努力。</p><p>因为智能家居项目，去贵州出差过，但项目发展中遇到一些问题，还没有正式上线，对于做开发的我来说缺乏一些鼓励。做项目需要做好需求分析以及目标管理，项目的实施和落地才是最好的动力。</p><h2 id="展望2019"><a href="#展望2019" class="headerlink" title="展望2019"></a>展望2019</h2><p>2019是亥猪年，也就是我的本命年，兴许我也会遇到自己的“一劫”，我不会畏惧，反而要勇敢的面对，不能把后背留给“敌人”–困难。把问题清楚地写下来，问题就解决一半了，我能想到的问题：</p><ul><li>发一级期刊小论文</li><li>找工作、面试</li><li>职业方向选择</li></ul><p>我现在不知道论文怎么写的，论文怎么发的，更不知道一级期刊长什么样子；就业方面我打算留在杭州，从事Android开发还是Java后端开发是我在思考的一个问题。</p><p>2019年，我将围绕这些困扰我的问题来做事情，</p><ul><li>做好论文研究，为一级期刊小论文打基础</li><li>研究、学习算法，刷牛客网、leetcode关于java的算法题，为找工作做准备</li><li>深入学习RxJava、JVM基础知识、Java8&amp;java9新特性、</li><li>Kotlin入门并深入，写个小app或在modulize中使用</li><li>SpringBoot系列框架入门、脚手架项目搭建、项目管理工入门(SpringBoot、JPA、Swagger、Jenkins、Sonar)</li><li>Docker容器技术入门</li><li>定期阅读阮一峰老师的博客</li><li>关注并参与GoogleIO 2019，多关注Android开发者大会，做一个合格的Androider</li><li>六级必过</li><li>驾照到手</li></ul><p>有人说，最好的爱情就是两个人共同成长，听起来似乎有点难度，细想来，两个人一起学习相互督促不正是所说的最好的爱情吗？!正如婷子现在在做英语阅读，我在做年终总结一样。</p><p>婷子也有自己的Flags，为她贴在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">少吃辣</span><br><span class="line">多读书</span><br><span class="line">多睡觉</span><br></pre></td></tr></table></figure><p>不愧是个小可爱的目标，都是为了成就美美的自己，嘿嘿嘿。</p><p>2019，扬帆起航。</p><p>元旦快乐！！！</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2018年12月31日，2018年的最后一天，做个年终总结，再来个2019Flags。&lt;/p&gt;
    
    </summary>
    
      <category term="年终总结" scheme="https://blackist.org/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="成长之路" scheme="https://blackist.org/tags/%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="2018" scheme="https://blackist.org/tags/2018/"/>
    
      <category term="2019" scheme="https://blackist.org/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本编程30分钟入门</title>
    <link href="https://blackist.org/2018/12/29/linux-shell-script/"/>
    <id>https://blackist.org/2018/12/29/linux-shell-script/</id>
    <published>2018-12-29T05:15:14.000Z</published>
    <updated>2019-06-16T09:47:35.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="什么是Shell脚本"><a href="#什么是Shell脚本" class="headerlink" title="什么是Shell脚本"></a>什么是Shell脚本</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>看个例子吧：</p><a id="more"></a><pre><code>#!/bin/shcd ~mkdir shell_tutcd shell_tutfor ((i=0; i&lt;10; i++)); do    touch test_$i.txtdone</code></pre><h3 id="示例解释"><a href="#示例解释" class="headerlink" title="示例解释"></a>示例解释</h3><ul><li>第1行：指定脚本解释器，这里是用/bin/sh做解释器的</li><li>第2行：切换到当前用户的home目录</li><li>第3行：创建一个目录shell_tut</li><li>第4行：切换到shell_tut目录</li><li>第5行：循环条件，一共循环10次</li><li>第6行：创建一个test_0…9.txt文件</li><li>第7行：循环体结束</li></ul><p>mkdir, touch都是系统自带的程序，一般在/bin或者/usr/bin目录下。for, do, done是sh脚本语言的关键字。</p><h3 id="shell和shell脚本的概念"><a href="#shell和shell脚本的概念" class="headerlink" title="shell和shell脚本的概念"></a>shell和shell脚本的概念</h3><p>shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson的sh是第一种Unix Shell，Windows Explorer是一个典型的图形界面Shell。</p><p>shell脚本（shell script），是一种为shell编写的脚本程序。业界所说的shell通常都是指shell脚本，但读者朋友要知道，shell和shell script是两个不同的概念。由于习惯的原因，简洁起见，本文出现的“shell编程”都是指shell脚本编程，不是指开发shell自身（如Windows Explorer扩展开发）。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>shell编程跟java、php编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>当前主流的操作系统都支持shell编程，本文档所述的shell编程是指Linux下的shell，讲的基本都是POSIX标准下的功能，所以，也适用于Unix及BSD（如Mac OS）。</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Linux默认安装就带了shell解释器。</p><h4 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h4><p>Mac OS不仅带了sh、bash这两个最基础的解释器，还内置了ksh、csh、zsh等不常用的解释器。</p><h4 id="Windows上的模拟器"><a href="#Windows上的模拟器" class="headerlink" title="Windows上的模拟器"></a>Windows上的模拟器</h4><p>windows出厂时没有内置shell解释器，需要自行安装，为了同时能用grep, awk, curl等工具，最好装一个cygwin或者mingw来模拟linux环境。</p><ul><li><a href="http://www.cygwin.com" target="_blank" rel="noopener">cygwin</a></li><li><a href="http://www.mingw.org" target="_blank" rel="noopener">mingw</a></li></ul><h3 id="脚本解释器"><a href="#脚本解释器" class="headerlink" title="脚本解释器"></a>脚本解释器</h3><h4 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h4><p>即Bourne shell，POSIX（Portable Operating System Interface）标准的shell解释器，它的二进制文件路径通常是/bin/sh，由Bell Labs开发。</p><p>本文讲的是sh，如果你使用其它语言用作shell编程，请自行参考相应语言的文档。</p><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><p>Bash是Bourne shell的替代品，属GNU Project，二进制文件路径通常是/bin/bash。业界通常混用bash、sh、和shell，比如你会经常在招聘运维工程师的文案中见到：熟悉Linux Bash编程，精通Shell编程。</p><p>在CentOS里，/bin/sh是一个指向/bin/bash的符号链接:</p><pre><code>[root@centosraw ~]# ls -l /bin/*sh-rwxr-xr-x. 1 root root 903272 Feb 22 05:09 /bin/bash-rwxr-xr-x. 1 root root 106216 Oct 17  2012 /bin/dashlrwxrwxrwx. 1 root root      4 Mar 22 10:22 /bin/sh -&gt; bash</code></pre><p>但在Mac OS上不是，/bin/sh和/bin/bash是两个不同的文件，尽管它们的大小只相差100字节左右:</p><pre><code>iMac:~ wuxiao$ ls -l /bin/*sh-r-xr-xr-x  1 root  wheel  1371648  6 Nov 16:52 /bin/bash-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/csh-r-xr-xr-x  1 root  wheel  2180736  6 Nov 16:52 /bin/ksh-r-xr-xr-x  1 root  wheel  1371712  6 Nov 16:52 /bin/sh-rwxr-xr-x  2 root  wheel   772992  6 Nov 16:52 /bin/tcsh-rwxr-xr-x  1 root  wheel  1103984  6 Nov 16:52 /bin/zsh</code></pre><h4 id="高级编程语言"><a href="#高级编程语言" class="headerlink" title="高级编程语言"></a>高级编程语言</h4><p>理论上讲，只要一门语言提供了解释器（而不仅是编译器），这门语言就可以胜任脚本编程，常见的解释型语言都是可以用作脚本编程的，如：Perl、Tcl、Python、PHP、Ruby。Perl是最老牌的脚本编程语言了，Python这些年也成了一些linux发行版的预置解释器。</p><p>编译型语言，只要有解释器，也可以用作脚本编程，如C shell是内置的（/bin/csh），Java有第三方解释器Jshell，Ada有收费的解释器AdaScript。</p><p>如下是一个PHP Shell Script示例（假设文件名叫test.php）：</p><pre><code>#!/usr/bin/php&lt;?phpfor ($i=0; $i &lt; 10; $i++)        echo $i . &quot;\n&quot;;</code></pre><p>执行：</p><pre><code>/usr/bin/php test.php</code></pre><p>或者：</p><pre><code>chmod +x test.php./test.php</code></pre><h2 id="如何选择shell编程语言"><a href="#如何选择shell编程语言" class="headerlink" title="如何选择shell编程语言"></a>如何选择shell编程语言</h2><h3 id="熟悉-vs-陌生"><a href="#熟悉-vs-陌生" class="headerlink" title="熟悉 vs 陌生"></a>熟悉 vs 陌生</h3><p>如果你已经掌握了一门编程语言（如PHP、Python、Java、JavaScript），建议你就直接使用这门语言编写脚本程序，虽然某些地方会有点啰嗦，但你能利用在这门语言领域里的经验（单元测试、单步调试、IDE、第三方类库）。</p><p>新增的学习成本很小，只要学会怎么使用shell解释器（Jshell、AdaScript）就可以了。</p><h3 id="简单-vs-高级"><a href="#简单-vs-高级" class="headerlink" title="简单 vs 高级"></a>简单 vs 高级</h3><p>如果你觉得自己熟悉的语言（如Java、C）写shell脚本实在太啰嗦，你只是想做一些备份文件、安装软件、下载数据之类的事情，学着使用sh，bash会是一个好主意。</p><p>shell只定义了一个非常简单的编程语言，所以，如果你的脚本程序复杂度较高，或者要操作的数据结构比较复杂，那么还是应该使用Python、Perl这样的脚本语言，或者是你本来就已经很擅长的高级语言。因为sh和bash在这方面很弱，比如说：</p><ul><li>它的函数只能返回字串，无法返回数组</li><li>它不支持面向对象，你无法实现一些优雅的设计模式</li><li>它是解释型的，一边解释一边执行，连PHP那种预编译都不是，如果你的脚本包含错误(例如调用了不存在的函数)，只要没执行到这一行，就不会报错</li></ul><h3 id="环境兼容性"><a href="#环境兼容性" class="headerlink" title="环境兼容性"></a>环境兼容性</h3><p>如果你的脚本是提供给别的用户使用，使用sh或者bash，你的脚本将具有最好的环境兼容性，perl很早就是linux标配了，python这些年也成了一些linux发行版的标配，至于mac os，它默认安装了perl、python、ruby、php、java等主流编程语言。</p><h2 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h2><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><p>打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用php写shell 脚本，扩展名就用php好了。</p><p>输入一些代码，第一行一般是这样：</p><pre><code>#!/bin/bash#!/usr/bin/php</code></pre><p>“#!”是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>运行Shell脚本有两种方法：</p><h4 id="作为可执行程序"><a href="#作为可执行程序" class="headerlink" title="作为可执行程序"></a>作为可执行程序</h4><pre><code>chmod +x test.sh./test.sh</code></pre><p>注意，一定要写成./test.sh，而不是test.sh，运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。</p><p>通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。</p><p>这里的”系统”，其实就是shell这个应用程序（想象一下Windows Explorer），但我故意写成系统，是方便理解，既然这个系统就是指shell，那么一个使用/bin/sh作为解释器的脚本是不是可以省去第一行呢？是的。</p><h4 id="作为解释器参数"><a href="#作为解释器参数" class="headerlink" title="作为解释器参数"></a>作为解释器参数</h4><p>这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：</p><pre><code>/bin/sh test.sh/bin/php test.php</code></pre><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量时，变量名不加美元符号（$），如：</p><pre><code>your_name=&quot;qinjx&quot;</code></pre><p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。</p><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><pre><code>for file in `ls /etc`</code></pre><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><pre><code>your_name=&quot;qinjx&quot;echo $your_nameecho ${your_name}</code></pre><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre><code>for skill in Ada Coffe Action Java; do    echo &quot;I am good at ${skill}Script&quot;done</code></pre><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。IntelliJ IDEA编写shell script时，IDE就会提示加花括号。</p><h3 id="重定义变量"><a href="#重定义变量" class="headerlink" title="重定义变量"></a>重定义变量</h3><p>已定义的变量，可以被重新定义，如：</p><pre><code>your_name=&quot;qinjx&quot;echo $your_nameyour_name=&quot;alibaba&quot;echo $your_name</code></pre><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>以“#”开头的行就是注释，会被解释器忽略。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>sh里没有多行注释，只能每一行加一个#号。就像这样：</p><pre><code>#--------------------------------------------# 这是一个自动打ipa的脚本，基于webfrogs的ipa-build书写：https://github.com/webfrogs/xcode_shell/blob/master/ipa-build# 功能：自动为etao ios app打包，产出物为14个渠道的ipa包# 特色：全自动打包，不需要输入任何参数#--------------------------------------------##### 用户配置区 开始 ######## 项目根目录，推荐将此脚本放在项目的根目录，这里就不用改了# 应用名，确保和Xcode里Product下的target_name.app名字一致###### 用户配置区 结束  #####</code></pre><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了，哈哈），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><pre><code>str=&apos;this is a string&apos;</code></pre><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><pre><code>your_name=&apos;qinjx&apos;str=&quot;Hello, I know your are \&quot;$your_name\&quot;! \n&quot;</code></pre><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><pre><code>your_name=&quot;qinjx&quot;greeting=&quot;hello, &quot;$your_name&quot; !&quot;greeting_1=&quot;hello, ${your_name} !&quot;echo $greeting $greeting_1</code></pre><h4 id="获取字符串长度："><a href="#获取字符串长度：" class="headerlink" title="获取字符串长度："></a>获取字符串长度：</h4><pre><code>string=&quot;abcd&quot;echo ${#string} #输出：4</code></pre><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><pre><code>string=&quot;alibaba is a great company&quot;echo ${string:1:4} #输出：liba</code></pre><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h4><pre><code>string=&quot;alibaba is a great company&quot;echo `expr index &quot;$string&quot; is`#输出：3，这个语句的意思是：找出字母i在这名话中的位置，要在linux下运行，mac下会报错</code></pre><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><p>参见本文档末尾的参考资料中<a href="http://tldp.org/LDP/abs/html/string-manipulation.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guid Chapter 10.1</a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如：</p><pre><code>&lt;?phpif (isset($_GET[&quot;q&quot;])) {    search(q);}else {    //do nothing}</code></pre><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>还要注意，sh里的if [ $foo -eq 0 ]，这个方括号跟Java/PHP里if后面的圆括号大不相同，它是一个可执行程序（和ls, grep一样），想不到吧？在CentOS上，它在/usr/bin目录下：</p><pre><code>ll /usr/bin/[-rwxr-xr-x. 1 root root 33408 6月  22 2012 /usr/bin/[</code></pre><p>正因为方括号在这里是一个可执行程序，方括号后面必须加空格，不能写成if [$foo -eq 0]</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code>if conditionthen    command1     command2    ...    commandN fi</code></pre><p>写成一行（适用于终端命令提示符）：</p><pre><code>if `ps -ef | grep ssh`;  then echo hello; fi</code></pre><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的</p><h4 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h4><pre><code>if conditionthen    command1     command2    ...    commandNelse    commandfi</code></pre><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h4><pre><code>if condition1then    command1elif condition2    command2else    commandNfi</code></pre><h3 id="for-while"><a href="#for-while" class="headerlink" title="for while"></a>for while</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>在开篇的示例里演示过了：</p><pre><code>for var in item1 item2 ... itemNdo    command1    command2    ...    commandNdone</code></pre><p>写成一行：</p><pre><code>for var in item1 item2 ... itemN; do command1; command2… done;</code></pre><h4 id="C风格的for"><a href="#C风格的for" class="headerlink" title="C风格的for"></a>C风格的for</h4><pre><code>for (( EXP1; EXP2; EXP3 ))do    command1    command2    command3done</code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre><code>while conditiondo    commanddone</code></pre><h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><pre><code>while :do    commanddone</code></pre><p>或者</p><pre><code>while truedo    commanddone</code></pre><p>或者</p><pre><code>for (( ; ; ))</code></pre><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><pre><code>until conditiondo    commanddone</code></pre><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><pre><code>case &quot;${opt}&quot; in    &quot;Install-Puppet-Server&quot; )        install_master $1        exit    ;;    &quot;Install-Puppet-Client&quot; )        install_client $1        exit    ;;    &quot;Config-Puppet-Server&quot; )        config_puppet_master        exit    ;;    &quot;Config-Puppet-Client&quot; )        config_puppet_client        exit    ;;    &quot;Exit&quot; )        exit    ;;    * ) echo &quot;Bad option, please choose again&quot;esac</code></pre><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>可以使用source和.关键字，如：</p><pre><code>source ./function.sh. ./function.sh</code></pre><p>在bash里，source和.是等效的，他们都是读入function.sh的内容并执行其内容（类似PHP里的include），为了更好的可移植性，推荐使用第二种写法。</p><p>包含一个文件和执行一个文件一样，也要写这个文件的路径，不能光写文件名，比如上述例子中:</p><pre><code>. ./function.sh</code></pre><p>不可以写作：</p><pre><code>. function.sh</code></pre><p>如果function.sh是用户传入的参数，如何获得它的绝对路径呢？方法是：</p><pre><code>real_path=`readlink -f $1`#$1是用户输入的参数，如function.sh. $real_path</code></pre><h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><h3 id="执行脚本时传入"><a href="#执行脚本时传入" class="headerlink" title="执行脚本时传入"></a>执行脚本时传入</h3><h3 id="脚本运行中输入"><a href="#脚本运行中输入" class="headerlink" title="脚本运行中输入"></a>脚本运行中输入</h3><h3 id="select菜单"><a href="#select菜单" class="headerlink" title="select菜单"></a>select菜单</h3><h2 id="stdin和stdout"><a href="#stdin和stdout" class="headerlink" title="stdin和stdout"></a>stdin和stdout</h2><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><p>sh脚本结合系统命令便有了强大的威力，在字符处理领域，有grep、awk、sed三剑客，grep负责找出特定的行，awk能将行拆分成多个字段，sed则可以实现更新插入删除等写操作。</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>查看进程列表</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><h4 id="排除grep自身"><a href="#排除grep自身" class="headerlink" title="排除grep自身"></a>排除grep自身</h4><h4 id="查找与target相邻的结果"><a href="#查找与target相邻的结果" class="headerlink" title="查找与target相邻的结果"></a>查找与target相邻的结果</h4><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://tldp.org/LDP/abs/html/" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a>，非常详细，非常易读，大量example，既可以当入门教材，也可以当做工具书查阅</li><li><a href="http://www.tutorialspoint.com/unix/unix-shell.htm" target="_blank" rel="noopener">Unix Shell Programming</a></li><li><a href="http://bash.cyberciti.biz/guide/Main_Page" target="_blank" rel="noopener">Linux Shell Scripting Tutorial - A Beginner’s handbook</a></li></ul><p>转载 <a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="noopener"></a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Shell脚本&quot;&gt;&lt;a href=&quot;#什么是Shell脚本&quot; class=&quot;headerlink&quot; title=&quot;什么是Shell脚本&quot;&gt;&lt;/a&gt;什么是Shell脚本&lt;/h2&gt;&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;p&gt;看个例子吧：&lt;/p&gt;
    
    </summary>
    
      <category term="OPS" scheme="https://blackist.org/categories/OPS/"/>
    
    
      <category term="OPS" scheme="https://blackist.org/tags/OPS/"/>
    
  </entry>
  
  <entry>
    <title>Fragment与Activity管理之出入栈、点击事件穿透</title>
    <link href="https://blackist.org/2018/12/28/android-fragment-manage/"/>
    <id>https://blackist.org/2018/12/28/android-fragment-manage/</id>
    <published>2018-12-28T07:35:20.000Z</published>
    <updated>2019-06-16T09:47:35.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>单Activity管理多个Fragment进行界面展示、页面跳转是很常见的界面编程方式，Fragment在使用时有一些使用技巧和“坑人”的地方，本文进行总结与分享。</p><a id="more"></a><h2 id="Activity管理Fragment"><a href="#Activity管理Fragment" class="headerlink" title="Activity管理Fragment"></a>Activity管理Fragment</h2><p>Activity控制Fragment的展示、布局。</p><h3 id="Fragment的展示和切换-出入栈"><a href="#Fragment的展示和切换-出入栈" class="headerlink" title="Fragment的展示和切换(出入栈)"></a>Fragment的展示和切换(出入栈)</h3><p>通过FragmentManager管理Fragment出入栈，建议为每个Fragment定义一个tag(字符串常量)，方便Fragment管理、Activity与Fragment通信，FragmentManager管理Fragment核心代码如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_LEAVE = <span class="string">"tag_leave"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_LEAVE_APPLY = <span class="string">"tag_leave_apply"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">navigateToTargetFragment</span><span class="params">(String tag, Bundle param)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// get fragment</span></span><br><span class="line">    BaseFragment targetFragment;</span><br><span class="line">    <span class="comment">// 根据tag加载指定的fragment，假定每种fragment只有一个实例存在栈中</span></span><br><span class="line">    <span class="keyword">if</span> (TAG_LEAVE.equals(tag)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leaveFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            leaveFragment = <span class="keyword">new</span> LeaveFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        targetFragment = leaveFragment;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_LEAVE_APPLY.equals(tag)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leaveApplyFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            leaveApplyFragment = <span class="keyword">new</span> LeaveApplyFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        targetFragment = leaveApplyFragment;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (leaveFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">            leaveFragment = <span class="keyword">new</span> LeaveFragment();</span><br><span class="line">        &#125;</span><br><span class="line">        targetFragment = leaveFragment;</span><br><span class="line">        tag = TAG_LEAVE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check whether fragment is showing.</span></span><br><span class="line">    <span class="keyword">if</span> (targetFragment == <span class="keyword">null</span> || targetFragment.isVisible() || targetFragment.isAdded()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新界面，比如activity的titleBar</span></span><br><span class="line">    displayLayout(tag);</span><br><span class="line">    <span class="comment">// 设置Fragment参数</span></span><br><span class="line">    <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">        targetFragment.setArguments(param);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果FrameLayout为空则用replace方法添加Fragment，</span></span><br><span class="line">    <span class="comment">// FrameLayout不为空，直接添加Fragment(注意设置Fragment背景为不透明，如?android:windowBackground)</span></span><br><span class="line">    <span class="comment">// 添加Fragment设置tag、压入栈中</span></span><br><span class="line">    <span class="keyword">if</span> (currentFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">        fragmentManager.beginTransaction()</span><br><span class="line">                .replace(R.id.fragment_container, targetFragment, tag)</span><br><span class="line">                .addToBackStack(tag)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fragmentManager.beginTransaction()</span><br><span class="line">                .add(R.id.fragment_container, targetFragment, tag)</span><br><span class="line">                .addToBackStack(tag)</span><br><span class="line">                .commit();</span><br><span class="line">    &#125;</span><br><span class="line">    currentFragment = targetFragment;</span><br><span class="line">    fragmentTag = tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据tag设置当前界面UI，通常是设置Activity标题栏</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">displayLayout</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">    setCommonRightIcon(R.drawable.common_transparent);</span><br><span class="line">    <span class="keyword">switch</span> (tag) &#123;</span><br><span class="line">        <span class="keyword">case</span> TAG_LEAVE: &#123;</span><br><span class="line">            <span class="comment">//设置titleBar标题栏</span></span><br><span class="line">            setCommonTitle(R.string.room_leave_resign_manage);</span><br><span class="line">            <span class="comment">// 设置titleBar右上角图标点击事件</span></span><br><span class="line">            setCommonRightIcon(R.drawable.action_bar_add);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TAG_LEAVE_APPLY: &#123;</span><br><span class="line">            setCommonTitle(R.string.room_leave_apply);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上是Activity添加Fragment到当前界面，并在Fragment入栈时设置Activity UI。</p><p>通常情况下，当用户点击返回键(物理返回键、界面虚拟返回键)时，需要返回到上一个Activity而不是直接FinishActivity，而Fragment无法直接拦截物理返回键点击事件，因此需要通过宿主Activity来管理Fragment的出栈。核心代码在Activity，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    backFragment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">backFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fragmentManager.popBackStackImmediate();</span><br><span class="line">    <span class="keyword">if</span> (fragmentManager.getBackStackEntryCount() == <span class="number">0</span>) &#123;</span><br><span class="line">        finish();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fragmentTag = fragmentManager.getFragments().get(fragmentManager.getBackStackEntryCount() - <span class="number">1</span>).getTag();</span><br><span class="line">        displayLayout(fragmentTag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment通信"><a href="#Fragment通信" class="headerlink" title="Fragment通信"></a>Fragment通信</h2><p>Fragment和Activity通信、Fragment之间通信(例如左右布局)</p><h3 id="Fragment和Activity通信"><a href="#Fragment和Activity通信" class="headerlink" title="Fragment和Activity通信"></a>Fragment和Activity通信</h3><ul><li>通过接口回调实现Fragment向Activity的通信，宿主Activity实现通信接口，Fragment调用FragmentEvent的Activity实例传递事件和参数。通信接口类如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FragmentEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fragment communicate with activity with FragmentEvent listener.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event  event event</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param event param</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">onFragmentEvent</span><span class="params">(String event, Object param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Activity实现接口，Fragment获取实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">FragmentEvent</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">onFragmentEvent</span><span class="params">(String event, Object param)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (CommonUtil.isEmpty(event)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">          <span class="keyword">case</span> TAG_LEAVE_DETAIL: &#123;</span><br><span class="line">              Bundle params = <span class="keyword">new</span> Bundle();</span><br><span class="line">              params.putLong(LeaveDetailFragment.PARAM_LEAVE_ID, (Long) param);</span><br><span class="line">              navigateToTargetFragment(TAG_LEAVE_DETAIL, params);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> TITLE_TAG: &#123;</span><br><span class="line">              fragmentTag = param.toString();</span><br><span class="line">              displayLayout(fragmentTag);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> BACK_TAG: &#123;</span><br><span class="line">              backFragment();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在BaseFragment中onAttatch()及以后的生命周期方法皆可获取实例Fragment实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (getActivity() <span class="keyword">instanceof</span> FragmentEvent) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mFragmentEvent = (FragmentEvent) getActivity();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment中通过接口实例和Activity通信</span></span><br><span class="line">mFragmentEvent.onFragmentEvent(BACK_TAG, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><ul><li>通过广播，在Activity中注册广播，Fragment发送广播； </li></ul><h3 id="Activity向Fragment通信"><a href="#Activity向Fragment通信" class="headerlink" title="Activity向Fragment通信"></a>Activity向Fragment通信</h3><ul><li><p>通过fragmet的setArguments()方法，在fragment初始化的时候传递参数和事件；</p></li><li><p>Fragment中定义public方法，通过Activity中的fragment实例调用；</p></li><li><p>通过EventBus在activity中向fragment传递事；</p></li></ul><h3 id="Fragment之间通信"><a href="#Fragment之间通信" class="headerlink" title="Fragment之间通信"></a>Fragment之间通信</h3><ul><li><p>通过fragment的public方法，首先fragmentA通过getActivity().getFragmentManager().getFragment…()获取到fragmentB，然后调用fragmentB的public方法，比较繁琐。</p></li><li><p>使用接口（推荐），首先如上通过接口实现fragment向activity的通信，其次通过public方法实现activity向Fragment的通信，从而间接实现Fragment之间的通信。</p></li><li><p>使用setTargetFragment()、onActivityResult()、getTargetFragment()进行fragment间的通信</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">FragmentA &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">setTargetFragment(fargmentB, ...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FragmentB &#123;</span><br><span class="line">getTargetFragment().onActivityResult(requestCode, resultCode, Intent data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## Fragment一些坑点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Fragment点击事件穿透</span><br><span class="line"></span><br><span class="line">Fragment入栈后若没有被hide，上层Fragment的点击事件会被下发到下一层，通过拦截点击事件消除此影响。</span><br><span class="line">在BaseFragment中为rootView设置点击属性，消化掉此层的点击事件，代码如下：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rootView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        rootView = inflater.inflate(<span class="keyword">this</span>.getLayoutResId(), container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rootView.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ((ViewGroup) rootView.getParent()).removeView(rootView);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// preventing click penetration</span></span><br><span class="line">rootView.setClickable(<span class="keyword">true</span>);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://blog.csdn.net/u012881042/article/details/51798736" target="_blank" rel="noopener">https://blog.csdn.net/u012881042/article/details/51798736</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单Activity管理多个Fragment进行界面展示、页面跳转是很常见的界面编程方式，Fragment在使用时有一些使用技巧和“坑人”的地方，本文进行总结与分享。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
  </entry>
  
</feed>
