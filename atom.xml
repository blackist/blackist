<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>董亮亮的开发笔记</title>
  
  <subtitle>安卓和后台开发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blackist.org/"/>
  <updated>2019-08-28T03:29:45.697Z</updated>
  <id>https://blackist.org/</id>
  
  <author>
    <name>董亮亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法 - PNPoly处理点和多边形</title>
    <link href="https://blackist.org/2019/08/28/arithmetic-coordinate-point-segment-dist/"/>
    <id>https://blackist.org/2019/08/28/arithmetic-coordinate-point-segment-dist/</id>
    <published>2019-08-28T01:53:02.000Z</published>
    <updated>2019-08-28T03:29:45.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近做了一个算法题【盒马配货】：</p><blockquote><p>（题目大意）盒马店的配送范围由一些点组成的多边形确定，给定一个点判断其是否在配送范围内，若在，则此点不需要挪动，打印”no 0”；若不在，则给出此点需要挪动到配送范围的最短距离，打印”yes 距离”。</p></blockquote><a id="more"></a><h2 id="如何求解点到多边形的距离"><a href="#如何求解点到多边形的距离" class="headerlink" title="如何求解点到多边形的距离"></a>如何求解点到多边形的距离</h2><p>此题求解需要解决两个问题：</p><ul><li>点到多边形的边的最短距离。</li><li>点是否包含在多边形内。</li></ul><h2 id="点到边的距离"><a href="#点到边的距离" class="headerlink" title="点到边的距离"></a>点到边的距离</h2><p>计算点到多边形最短距离的基本原理是：依次计算点到多边形每条边的距离，然后筛选出最短距离。</p><p><img src="http://pic.blackist.top/dev-201908281020-772.png" alt></p><p>如下图，假设AB为多边形的一条边，现在求点P到AB的距离。</p><p><img src="http://pic.blackist.top/dev-201908281021-296.png" alt></p><p>根据向量内积公式(\vec a \cdot \vec b=|a||b|\cos\theta)，我们可以推出：</p><p><img src="http://pic.blackist.top/dev-201908281029-861.png" alt></p><p>根据以上公式，我们可以求出t，进而求出点D的坐标，最终PD的长度就很容易求得了。</p><p>但是还有一些边界条件需要注意，即最终D点不是落在AB上，有以下三种情况：</p><ul><li>t &lt; 0，D在BA延长线上，此时最短距离取PA；</li><li>0 &lt;= t &lt;= 1，D在AB上，此时最短距离取PD；</li><li>t &gt; 1，D在AB延长线上，此时最短距离取PB；</li></ul><p><img src="http://pic.blackist.top/dev-201908281031-290.png" alt></p><p>Java实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pointToSegmentDist</span><span class="params">(<span class="keyword">double</span> px, <span class="keyword">double</span> py, <span class="keyword">double</span> ax, <span class="keyword">double</span> ay, <span class="keyword">double</span> bx, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> ABx = bx - ax;</span><br><span class="line">    <span class="keyword">double</span> ABy = by - ay;</span><br><span class="line">    <span class="keyword">double</span> APx = px - ax;</span><br><span class="line">    <span class="keyword">double</span> APy = py - ay;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> AB_AP = ABx * APx + ABy * APy;</span><br><span class="line">    <span class="keyword">double</span> distAB2 = ABx * ABx + ABy * ABy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> Dx = ax, Dy = ay;</span><br><span class="line">    <span class="keyword">if</span> (distAB2 != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> t = AB_AP / distAB2;</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            Dx = bx;</span><br><span class="line">            Dy = by;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Dx = ax + ABx * t;</span><br><span class="line">            Dy = ay + ABy * t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Dx = ax;</span><br><span class="line">            Dy = ay;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> PDx = Dx - px, PDy = Dy - py;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.sqrt(PDx * PDx + PDy * PDy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点是否包含在多边形内"><a href="#点是否包含在多边形内" class="headerlink" title="点是否包含在多边形内"></a>点是否包含在多边形内</h2><p>根据W. Randolph Franklin 提出的<a href="https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html" target="_blank" rel="noopener">PNPoly</a>算法，只需区区几行代码就解决了这个问题。</p><p>假设配送范围多边形的点横纵坐标分别存放在两个数组xs、ys里，(x,y)表示配送点的坐标，先贴代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">polygon</span><span class="params">(<span class="keyword">double</span>[] xs, <span class="keyword">double</span>[] ys, <span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> contained = <span class="keyword">false</span>; <span class="comment">// 点是否包含在多边形内</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> xMin = Arrays.stream(xs).min().getAsDouble();</span><br><span class="line">    <span class="keyword">double</span> xMax = Arrays.stream(xs).max().getAsDouble();</span><br><span class="line">    <span class="keyword">double</span> yMin = Arrays.stream(ys).min().getAsDouble();</span><br><span class="line">    <span class="keyword">double</span> yMax = Arrays.stream(ys).max().getAsDouble();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; xMax || x &lt; xMin || y &gt; yMax || y &lt; yMin) &#123;</span><br><span class="line">        contained = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 核心算法部分</span></span><br><span class="line">    <span class="keyword">int</span> N = xs.length;</span><br><span class="line">    <span class="keyword">double</span> dist = Double.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = N - <span class="number">1</span>; i &lt; N; j = i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (((ys[j] &gt; y) != (ys[i] &gt; y))</span><br><span class="line">            &amp;&amp; (x &lt; (xs[j] - xs[i]) * (y - ys[i]) / (ys[j] - ys[i]) + xs[i])) &#123;</span><br><span class="line">            contained = !contained;</span><br><span class="line">        &#125;</span><br><span class="line">        dist = Math.min(dist, pointToSegmentDist(x, y, xs[i], ys[i], xs[j], ys[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(contained ? <span class="string">"no 0"</span> : <span class="string">"yes"</span> + <span class="string">" "</span> + dist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们需要取得该数组在横坐标和纵坐标的最大值和最小值，根据这四个点算出一个四边型，判断目标坐标点是否在这个四边型之内，如果在这个四边型之外，那可以跳过后面较为复杂的计算，直接返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; xMax || x &lt; xMin || y &gt; yMax || y &lt; yMin) &#123;</span><br><span class="line">    contained = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是核心算法部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = N - <span class="number">1</span>; i &lt; N; j = i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((ys[j] &gt; y) != (ys[i] &gt; y))</span><br><span class="line">    &amp;&amp; (x &lt; (xs[j] - xs[i]) * (y - ys[i]) / (ys[j] - ys[i]) + xs[i])) &#123;</span><br><span class="line">    contained = !contained;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次计算都涉及到相邻的两个点和待测试点，然后考虑两个问题：</p><ul><li><p>被测试点的纵坐标testy是否在本次循环所测试的两个相邻点纵坐标范围之内，即</p><p>ys[i] &lt;y &lt; ys[j]</p><p>或者</p><p>ys[j] &lt;y &lt; ys[i]。</p></li><li><p>待测点test是否在i,j两点之间的连线之下（相交判断）。</p></li></ul><p><strong>每次这两个条件同时满足的时候我们把返回的布尔量取反</strong>。</p><p>这个表达式的意思是说，随便画个多边形，随便定一个点，然后通过这个点水平划一条线，先数数看这条横线和多边形的边相交几次（可先排除那些不相交的边，即第一个判断条件），然后再数这条横线穿越多边形的次数是否为奇数，如果是奇数，那么该点在多边形内，如果是偶数，则在多边形外（射线法）。</p><h3 id="点在直线下-相交判断"><a href="#点在直线下-相交判断" class="headerlink" title="点在直线下 - 相交判断"></a>点在直线下 - 相交判断</h3><p>如下图，ab与过p点的水平线相交于c，</p><p><img src="http://pic.blackist.top/dev-201908281110-490.png" alt></p><p>则有：</p><p><img src="http://pic.blackist.top/dev-201908281111-204.png" alt></p><p>Java代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (((ys[j] &gt; y) != (ys[i] &gt; y))</span><br><span class="line">&amp;&amp; (x &lt; (xs[j] - xs[i]) * (y - ys[i]) / (ys[j] - ys[i]) + xs[i])) &#123;</span><br><span class="line">contained = !contained;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点在多边形内部-射线法"><a href="#点在多边形内部-射线法" class="headerlink" title="点在多边形内部 - 射线法"></a>点在多边形内部 - 射线法</h3><p>判断点是否在多边形内，可以从这个点做一条射线，计算它跟多边形边界的交点个数，如果交点个数为奇数，那么点在多边形内部，否则点在多边形外。参考<a href="https://www.cnblogs.com/anningwang/p/7581545.html" target="_blank" rel="noopener">https://www.cnblogs.com/anningwang/p/7581545.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html" target="_blank" rel="noopener">https://wrf.ecse.rpi.edu//Research/Short_Notes/pnpoly.html</a></p><p><a href="https://www.cnblogs.com/anningwang/p/7581545.html" target="_blank" rel="noopener">https://www.cnblogs.com/anningwang/p/7581545.html</a></p><p><a href="https://jingsam.github.io/2016/09/26/polydist.html" target="_blank" rel="noopener">https://jingsam.github.io/2016/09/26/polydist.html</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个算法题【盒马配货】：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（题目大意）盒马店的配送范围由一些点组成的多边形确定，给定一个点判断其是否在配送范围内，若在，则此点不需要挪动，打印”no 0”；若不在，则给出此点需要挪动到配送范围的最短距离，打印”yes 距离”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="https://blackist.org/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://blackist.org/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="坐标计算" scheme="https://blackist.org/tags/%E5%9D%90%E6%A0%87%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>JVM - 运行时内存区域</title>
    <link href="https://blackist.org/2019/07/07/java-jvm-jmm/"/>
    <id>https://blackist.org/2019/07/07/java-jvm-jmm/</id>
    <published>2019-07-07T12:38:34.000Z</published>
    <updated>2019-08-28T01:47:20.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java源代码文件(.java后缀)会被Java编译器编译为字节码文件(.class后缀)，然后由JVM中的类加载器加载各个类的字节码文件，加载完毕之后，交由<strong>JVM执行引擎</strong>执行。</p><p>那在整个程序执行过程中，JVM中怎么存取数据和相关信息呢？</p><p>事实上在JVM中是用一段空间来存储程序执行期间需要用到的数据和相关信息，这段空间一般被称作为Runtime Data Area（运行时数据区），也就是我们常说的JVM内存。</p><a id="more"></a><h2 id="一、运行时数据区域包括哪些"><a href="#一、运行时数据区域包括哪些" class="headerlink" title="一、运行时数据区域包括哪些"></a>一、运行时数据区域包括哪些</h2><p><img src="http://pic.blackist.top/dev-201907071428-3.png" alt></p><p>根据《Java虚拟机规范》的规定，运行时数据区通常包括这几个部分：</p><ul><li><p><strong>程序计数器(Program Counter Register)</strong>：线程私有的，记录当前线程的行号指示器，为线程的切换提供保障；</p></li><li><p><strong>Java虚拟机栈(Java Vitual Machine Stack)</strong>：线程私有的，主要存放<em>局部变量表</em>，操作数栈，动态链接和方法出口等；</p></li><li><p><strong>本地方法栈(Native Method Stack)</strong></p></li><li><p><strong>方法区(Method Area)</strong>：线程共享的，主要存储<strong>类信息、常量池、静态变量、JIT编译后的代码</strong>等数据。方法区理论上来说是堆的逻辑组成部分；<strong>运行时常量池</strong>是方法区的一部分，用于存放编译期生成的各种字面量和符号引用；</p></li><li><p><strong>堆(Heap)</strong>：所有线程共享的，主要用来存储对象。其中，堆可分为：<strong>年轻代和老年代</strong>两块区域。使用NewRatio参数来设定比例。对于年轻代，一个Eden区和两个Suvivor区，使用参数SuvivorRatio来设定大小；</p></li></ul><h2 id="二、各个部分存储的信息和负责的职能"><a href="#二、各个部分存储的信息和负责的职能" class="headerlink" title="二、各个部分存储的信息和负责的职能"></a>二、各个部分存储的信息和负责的职能</h2><h3 id="1、程序计数器"><a href="#1、程序计数器" class="headerlink" title="1、程序计数器"></a>1、程序计数器</h3><p>这个内存区域是Java虚拟机规范中唯一一个没有规定任何OOM（OutOfMemoryError）情况的区域，这是这个区域最大的特点之一，这是因为程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的。</p><p>这个区域主要是负责记录正在执行的虚拟机字节码指令地址，即当前线程执行的字节码的行号指示器（注意：JVM不是直接执行Java代码，而是执行.class文件，所以只要其他编程语言能翻译成.class文件一样能放入JVM中执行）。 <strong>JVM会给每个线程一个独立的程序计数器</strong>，计数器之间互不影响 ，且通过线程轮流切换并且分配处理器执行时间来实现JVM的多线程。不过当线程执行的是Native方法的时候这个计数器中的值为undefined。</p><h3 id="2、Java虚拟机栈"><a href="#2、Java虚拟机栈" class="headerlink" title="2、Java虚拟机栈"></a>2、Java虚拟机栈</h3><p>和程序计数器一样的是<strong>Java虚拟机栈是线程私有</strong>，生命周期和线程相同。虚拟机栈描述的是<strong>Java方法</strong>执行的内存模型：每个<strong>方法在执行的时候都会创建栈帧</strong>，用来存储局部变量表，操作数栈，动态链接，方法出口等信息，每个方法从调用到执行完成的过程，就对应一个栈帧在虚拟机中入栈到出栈的过程，其中64位长度的long和double类型的数据会占用2个局部变量空间，其余的数据类型只占用1个。 这里需要理解一下的就是为什么要用栈这个结构呢，比如A方法中调用了B方法，虚拟机中是先让A方法的栈帧进入虚拟机栈执行，当执行到调用B方法的语句就让B栈帧进入，执行完之后B栈帧就出栈，A栈就继续执行。这里注意的是如果递归的方法递归的太深很容易抛出下面两种异常，所以递归虽然写起来方便，但是性能会有所下降，并且容易抛出异常。</p><p>Java虚拟机规范中，对这个区域规定了两种异常状况</p><p>i. 线程请求栈的深度大于虚拟机所允许栈的深度，将抛出Stack Overflow Error</p><p>ii. 如果虚拟机栈可以动态扩展且扩展时无法申请到足够的内存，会抛出OutOfMemoryError</p><h3 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h3><p>与虚拟机栈作用相似，不过是虚拟机栈为虚拟机执行Java方法提供，而本地方法为虚拟机使用到的Native方法服务，Native方法多是用C++写的。抛出的异常和虚拟机栈相同。</p><h3 id="4、Java堆"><a href="#4、Java堆" class="headerlink" title="4、Java堆"></a>4、Java堆</h3><p>Java堆是与前面的区域不同的是：这个区域是 <strong>被所有线程共享</strong> 的一块内存区域，用来<strong>存放对象实例，并为对象实例分配好内存</strong>。Java虚拟机规范中这样描述：所有对象实例以及数组都要在堆上分配。Java堆也是垃圾收集器管理的主要区域，也叫”GC堆“。由于现在的垃圾回收算法多是分代收集，所以Java堆里面又可分为：新生代和老年代。 并且根据Java虚拟机规范的规定：Java堆可以处于物理上不连续的内存空间中，只要逻辑上连续即可。有实例没有被分配，且堆无法再扩展的时候会抛出OutOfMemoryError异常，虚拟机调优其实也主要关注的是这个区域。</p><h3 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h3><p>与Java堆一样，<strong>线程共享</strong>，用来存储被虚拟机加载的<strong>类信息、常量、静态变量</strong>。这个区域Java虚拟机规范对其特别宽松，既可以像Java堆那样不需要连续内存，又可以选择固定大小和可扩展。还可以选择不实现垃圾收集，这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载。当无法满足内存分配需求时，将抛出OutOfMemoryError异常。</p><h4 id="永久代和元空间"><a href="#永久代和元空间" class="headerlink" title="永久代和元空间"></a>永久代和元空间</h4><p>方法区是Java虚拟机规范中的定义，是一种规范，而永久代是HotSpot对方法区的一种实现，一个是标准一个是实现，即<strong>使用永久代来实现方法区</strong>；</p><ul><li>存储位置不同，永久代物理上是堆的一部分，和新生代，老年代地址是连续的，而元空间属于本地内存；</li><li>存储内容不同，<strong>元空间(一块区域)存储类的元信息</strong>，<strong>静态变量和常量池等并入堆中</strong>。相当于永久代的数据被分到了堆和元空间中。</li></ul><p>对于Java8， HotSpots取消了永久代， 取代永久代的就是元空间。虚拟机Hotspot已经将这部分存储空间<strong>从使用JVM内存换成使用本地内存</strong>，即这部分不再叫永久代，而是<strong>元空间</strong>。这个元空间实际上是JVM动态规定内存大小。</p><p>这个替换有什么优势呢？因为字符串常量池是存在永久代中，很容易出现性能问题，并且类和方法信息大小难确定，给永久代的的大小指定带来困难，而且GC会对永久代特殊处理，这就增加了GC的复杂性。从JDK1.7开始，<strong>字符串常量池就划分进了堆中</strong>，也使得元空间在内存划分的算法上更趋于合理。</p><h4 id="Class文件常量池"><a href="#Class文件常量池" class="headerlink" title="Class文件常量池"></a><strong>Class文件常量池</strong></h4><p>Class 文件常量池指的是编译生成的 class 字节码文件，其结构中有一项是常量池（Constant Pool Table），用于存放编译期生成的各种<strong>字面量和符号引用</strong>，这部分内容将<strong>在类加载后进入方法区的运行时常量池中存放</strong>。</p><p>这里的字面量是指<strong>字符串字面量和声明为 final 的（基本数据类型）常量值</strong>。</p><ul><li>字符串字面量：除了类中所有双引号括起来的字符串(包括方法体内的)，还包括所有用到的类名、方法的名字和这些类与方法的字符串描述、字段(成员变量)的名称和描述符；</li><li>声明为final的常量值：指的是类的<strong>成员变量</strong>，不包含本地变量，<strong>本地变量是属于方法的</strong>。这些都在常量池的 UTF-8 表中(逻辑上的划分)；</li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池是方法区的一部分，是一块内存区域。Class 文件常量池将在类加载后进入方法区的运行时常量池中存放。<strong>一个类加载到 JVM 中后对应一个运行时常量池</strong>，运行时常量池相对于 Class 文件常量池来说具备动态性，Class 文件常量只是一个静态存储结构，里面的引用都是符号引用。而运行时常量池可以在运行期间<strong>将符号引用解析为直接引用</strong>。可以说运行时常量池就是用来<strong>索引和查找字段和方法名称和描述符</strong>的。给定任意一个方法或字段的索引，通过这个索引最终可得到该方法或字段所属的类型信息和名称及描述符信息，这涉及到方法的调用和字段获取。</p><h4 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h4><p><strong>字符串常量池是全局</strong>的，JVM 中独此一份，因此也称为全局字符串常量池。</p><p>运行时常量池中的字符串字面量若是成员的，则在类的加载初始化阶段就使用到了字符串常量池；若是本地的，则在使用到的时候（执行此代码时）才会使用到字符串常量池。其实，“使用常量池”对应的字节码是一个 ldc 指令，在给 String 类型的引用赋值的时候会先执行这个指令，看常量池中是否存在这个字符串对象的引用，若有就直接返回这个引用，若没有，就在堆里创建这个字符串对象并在字符串常量池中记录下这个引用（jdk1.7)。</p><p>常量不一定只有编译期才能产生，运行期间也可以将新的常量放入池中。例如<strong>String的Intern()方法</strong>，同样抛出OutOfMemoryError异常。</p><h4 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h4><p>JVM 中除了字符串常量池，8种基本数据类型中除了两种浮点类型剩余的6种基本数据类型的包装类，都使用了缓冲池技术，但是 Byte、Short、Integer、Long、Character 这5种整型的包装类也只是在对应值在 [-128,127] 时才会使用缓冲池，超出此范围仍然会去创建新的对象。其中：</p><ul><li>在 jdk1.6（含）之前也是方法区的一部分，并且其中存放的是字符串的实例；</li><li>在 jdk1.7（含）之后是在堆内存之中，存储的是字符串对象的引用，字符串实例是在堆中；</li><li>jdk1.8 已移除永久代，字符串常量池是在本地内存当中，存储的也只是引用。</li></ul><h2 id="三、直接内存"><a href="#三、直接内存" class="headerlink" title="三、直接内存"></a>三、直接内存</h2><p>这个区域并不是属于运行时数据区域，但是这个区域也会被频繁使用，并且抛出OOM异常。这个区域主要是由于在JDK1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道与缓冲区的I/O方式，它可以使用Native函数库直接分配堆外内存，通过一个储存在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。</p><p>这样能避免在Java堆和Native堆中来回复制数据，从而在一些场景中显著提高性能。直接内存分配不会受到Java堆大小的限制，会受到本机总内存大小及处理器寻址空间的限制。会抛出OutOfMemoryError异常</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>只有程序计数器不会报出任何相关OOM异常，而Java虚拟机栈有可能会报出OOM或Stack Overflow异常。<strong>Java虚拟机栈主要是存储方法的一些信息</strong>，能让方法顺利的执行，而<strong>Java堆存储的是对象的信息</strong>。虚拟机的垃圾回收算法主要在这一块，并且平常调优的区域也是在这一块。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/xiaotian15/p/6971353.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaotian15/p/6971353.html</a></p><p><a href="https://www.tuicool.com/articles/Av6RZnU" target="_blank" rel="noopener">https://www.tuicool.com/articles/Av6RZnU</a></p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java源代码文件(.java后缀)会被Java编译器编译为字节码文件(.class后缀)，然后由JVM中的类加载器加载各个类的字节码文件，加载完毕之后，交由&lt;strong&gt;JVM执行引擎&lt;/strong&gt;执行。&lt;/p&gt;
&lt;p&gt;那在整个程序执行过程中，JVM中怎么存取数据和相关信息呢？&lt;/p&gt;
&lt;p&gt;事实上在JVM中是用一段空间来存储程序执行期间需要用到的数据和相关信息，这段空间一般被称作为Runtime Data Area（运行时数据区），也就是我们常说的JVM内存。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="jvm" scheme="https://blackist.org/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM - 类加载过程</title>
    <link href="https://blackist.org/2019/07/06/java-jvm-classload-process/"/>
    <id>https://blackist.org/2019/07/06/java-jvm-classload-process/</id>
    <published>2019-07-06T05:53:54.000Z</published>
    <updated>2019-08-28T01:47:20.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>开启Java程序员进阶之旅，比较难啃的JVM。</p><a id="more"></a><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><p>在聊 Java 类加载机制之前，需要先了解一下 Java 字节码，因为它和类加载机制息息相关。</p><p>计算机只认识 0 和 1，所以任何语言编写的程序都需要编译成机器码才能被计算机理解，然后执行，Java 也不例外。</p><p>Java 在诞生的时候喊出了一个非常牛逼的口号：“Write Once, Run Anywhere”，为了达成这个目的，Sun 公司发布了许多可以在不同平台（Windows、Linux）上运行的 Java 虚拟机（JVM）——负责载入和执行 Java 编译后的字节码。</p><p><img src="http://pic.blackist.top/dev-201907061328-272.png" alt></p><p>我们借助一段简单的代码来看一看，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.blackist.jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"董亮亮的开发笔记"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码编译过后，通过十六进制工具 xxd JvmDemo.class命令查看这个字节码文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span>: cafe babe <span class="number">0000</span> <span class="number">0034</span> <span class="number">0022</span> <span class="number">0</span>a00 <span class="number">0600</span> <span class="number">1409</span>  .......<span class="number">4</span>."......</span><br><span class="line"><span class="number">00000010</span>: <span class="number">0015</span> <span class="number">0016</span> <span class="number">0800</span> <span class="number">170</span>a <span class="number">0018</span> <span class="number">0019</span> <span class="number">0700</span> <span class="number">1</span>a07  ................</span><br><span class="line"><span class="number">00000020</span>: <span class="number">001</span>b <span class="number">0100</span> <span class="number">063</span>c <span class="number">696</span>e <span class="number">6974</span> <span class="number">3</span>e01 <span class="number">0003</span> <span class="number">2829</span>  .....&lt;init&gt;...()</span><br><span class="line"><span class="number">00000030</span>: <span class="number">5601</span> <span class="number">0004</span> <span class="number">436</span>f <span class="number">6465</span> <span class="number">0100</span> <span class="number">0</span>f4c <span class="number">696</span>e <span class="number">654</span>e  V...Code...LineN</span><br><span class="line"><span class="number">00000040</span>: <span class="number">756</span>d <span class="number">6265</span> <span class="number">7254</span> <span class="number">6162</span> <span class="number">6</span>c65 <span class="number">0100</span> <span class="number">124</span>c <span class="number">6</span>f63  umberTable...Loc</span><br><span class="line"><span class="number">00000050</span>: <span class="number">616</span>c <span class="number">5661</span> <span class="number">7269</span> <span class="number">6162</span> <span class="number">6</span>c65 <span class="number">5461</span> <span class="number">626</span>c <span class="number">6501</span>  alVariableTable.</span><br></pre></td></tr></table></figure><p>这段字节码中的 <code>cafe babe</code> 被称为“魔数”，是 JVM 识别 .class 文件的标志。文件格式的定制者可以自由选择魔数值（只要没用过），比如说 .png 文件的魔数是 <code>89504e47</code>。</p><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>JVM结束生命周期的几种情况：</p><ul><li>执行了System.exit()方法</li><li>程序正常执行结束</li><li>程序执行过程中遇到异常或错误而异常终止</li><li>操作系统出现错误而导致JVM进程终止</li></ul><p>Java 的<strong>类加载过程</strong>可以分为 5 个阶段：载入、验证、准备、解析和初始化。这 5 个阶段一般是顺序发生的，但在动态绑定的情况下，解析阶段发生在初始化阶段之后。</p><p><img src="http://pic.blackist.top/dev-201907061107-828.png" alt></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>查找并加载类的二进制数据。</p><p>将类的.class文件中的二进制数据读入到内存，将其放在<strong>运行时数据区的方法区</strong>内，然后在堆去创建java.lang.Class对象，用来封装类在方法区内的数据结构。</p><p><img src="http://pic.blackist.top/dev-201907061321-381.png" alt></p><h4 id="加载-class的方式"><a href="#加载-class的方式" class="headerlink" title="加载.class的方式"></a>加载.class的方式</h4><ul><li>从本地加载</li><li>从网络上加载（URLClassLoader(URL[] urls)）</li><li><strong>从zip, jar等归档文件中加载.class文件</strong></li><li>从专有数据库提取.class文件</li><li>将Java源文件动态编译成.class文件</li></ul><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>确保被加载的类的正确性，符合JVM字节码规范，该阶段是保证 JVM 安全的重要屏障，下面是一些主要的检查。</p><ul><li>确保二进制字节流格式符合预期（比如说是否以 <code>cafe bene</code> 开头）。</li><li>是否所有方法都遵守访问控制关键字的限定。</li><li>方法调用的参数个数和类型是否正确。</li><li>确保变量在使用之前被正确初始化了。</li><li>检查变量是否被赋予恰当类型的值。</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>JVM 会在该阶段对类变量（也称为静态变量， <code>static</code> 关键字修饰的）分配内存并初始化（对应数据类型的默认初始值，如 0、0L、null、false 等）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String blackist = <span class="string">"Blackist"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String note = <span class="string">"Note"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String bnote = <span class="string">"Note-of-Blackist"</span>;</span><br></pre></td></tr></table></figure><p>blackist不会被分配内存，而 note会；但 bnote的初始值不是“王二”而是 <code>null</code>。</p><p>需要注意的是， <code>static final</code> 修饰的变量被称作为常量，和类变量不同。常量一旦赋值就不会改变了，所以 bnote 在准备阶段的值为“沉默王二”而不是 <code>null</code>。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>该阶段将常量池中的符号引用转化为直接引用。</p><p><strong>符号引用</strong>以一组符号（任何形式的字面量，只要在使用时能够无歧义的定位到目标即可）来描述所引用的目标。</p><p>在编译时，Java 类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如 <code>org.blackist.Quiz</code> 类引用了 <code>org.blackist.Bnote</code>类，编译时 Quiz类并不知道 Bnote类的实际内存地址，因此只能使用符号 <code>org.blackist.Bnote</code>。</p><p><strong>直接引用</strong>通过对符号引用进行解析，找到引用的实际内存地址。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>类变量已经被赋过默认初始值，而在初始化阶段为类的静态变量赋予正确的初始值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="comment">// 准备阶段默认值为0，初始化阶段赋值3</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 也可写为</span></span><br><span class="line">peivate <span class="keyword">static</span> <span class="keyword">int</span> foo;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">foo = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态代码块从上到下顺序执行，foo最终等于4</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">foo = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换句话说，初始化阶段是执行类构造器方法的过程。</p><h2 id="Java程序对类的使用"><a href="#Java程序对类的使用" class="headerlink" title="Java程序对类的使用"></a>Java程序对类的使用</h2><h3 id="主动使用（六种）"><a href="#主动使用（六种）" class="headerlink" title="主动使用（六种）"></a>主动使用（六种）</h3><ul><li>创建类的实例（new Test();）</li><li>访问某个类的或接口的静态变量，或对该静态变量赋值（int b = Test.a; Test.a = b;）</li><li>调用类的静态方法 （Test.foo()）</li><li>反射（ClassForName(“org.blackst.demo.Quiz”)）</li><li>初始化类的子类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化子类，对父类进行了主动使用</span></span><br><span class="line">Child.a = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>JVM启动时被标为启动类的类（如JavaTest，java  org.blackist.Test）</li></ul><p>所有JVM实现必须在每个类或接口被Java程序 <strong>首次主动使用</strong> 时才初始化。</p><h3 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h3><p>除了主动使用以外的使用，都不会导致类的初始化。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>如下程序：</p><p><img src="http://pic.blackist.top/dev-201907061030-765.png" alt></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开启Java程序员进阶之旅，比较难啃的JVM。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="jvm" scheme="https://blackist.org/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>设计模式 - 6大原则</title>
    <link href="https://blackist.org/2019/07/02/java-design-patterns-6principles/"/>
    <id>https://blackist.org/2019/07/02/java-design-patterns-6principles/</id>
    <published>2019-07-02T02:13:03.000Z</published>
    <updated>2019-07-02T15:55:08.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于设计模式的六大设计原则的资料网上很多，但是很多地方解释地都太过于笼统化，我也找了很多资料来看，发现CSDN上有几篇关于设计模式的六大原则讲述的比较通俗易懂，因此转载过来。</p><a id="more"></a><h2 id="一-单一职责原则"><a href="#一-单一职责原则" class="headerlink" title="一.单一职责原则"></a>一.单一职责原则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7536542" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7536542</a></p><p>　　单一职责原则是最简单的面向对象设计原则，它用于控制类的粒度大小。单一职责原则定义如下：</p><blockquote><p>单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p></blockquote><p>​      单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。</p><p>​      单一职责原则是实现<strong>高内聚、低耦合</strong>的指导方针，它是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，而发现类的多重职责需要设计人员具有较强的分析设计能力和相关实践经验。</p><p>​      下面通过一个简单实例来进一步分析单一职责原则：</p><p>​      Sunny软件公司开发人员针对某CRM（Customer Relationship  Management，客户关系管理）系统中客户信息图形统计模块提出了如图1所示初始设计方案：</p><p><img src="http://pic.blackist.top/dev-201907020942-209.png" alt="图1  初始设计方案结构图"></p><p>​      在图1中，CustomerDataChart类中的方法说明如下：getConnection()方法用于连接数据库，findCustomers()用于查询所有的客户信息，createChart()用于创建图表，displayChart()用于显示图表。</p><p>​      在图1中，CustomerDataChart类承担了太多的职责，既包含与数据库相关的方法，又包含与图表生成和显示相关的方法。如果在其他类中也需要连接数据库或者使用findCustomers()方法查询客户信息，则难以实现代码的重用。无论是修改数据库连接方式还是修改图表显示方式都需要修改该类，它不止一个引起它变化的原因，违背了单一职责原则。因此需要对该类进行拆分，使其满足单一职责原则，类CustomerDataChart可拆分为如下三个类：</p><p>​      (1) DBUtil：负责连接数据库，包含数据库连接方法getConnection()；</p><p>​      (2) CustomerDAO：负责操作数据库中的Customer表，包含对Customer表的增删改查等方法，如findCustomers()；</p><p>​      (3) CustomerDataChart：负责图表的生成和显示，包含方法createChart()和displayChart()。</p><p>​      使用单一职责原则重构后的结构如图2所示：</p><p><img src="https://images0.cnblogs.com/i/288799/201408/181908472844755.jpg" alt="img"></p><h2 id="二-开闭原则"><a href="#二-开闭原则" class="headerlink" title="二.开闭原则"></a>二.开闭原则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7537584" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7537584</a></p><p>　　开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。开闭原则由<strong>Bertrand  Meyer</strong>于1988年提出，其定义如下：</p><blockquote><p>开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p></blockquote><p>​      在开闭原则的定义中，<strong>软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类</strong>。</p><p>​      任何软件都需要面临一个很重要的问题，即它们的需求会随时间的推移而发生变化。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。随着软件规模越来越大，软件寿命越来越长，软件维护成本越来越高，设计满足开闭原则的软件系统也变得越来越重要。</p><p>​      为了满足开闭原则，需要对系统进行抽象化设计，<strong>抽象化是开闭原则的关键</strong>。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p><p>​      Sunny软件公司开发的CRM系统可以显示各种类型的图表，如饼状图和柱状图等，为了支持多种图表显示方式，原始设计方案如图1所示：</p><p><img src="http://pic.blackist.top/dev-201907020944-314.png" alt="图1 初始设计方案结构图"></p><p>​    在ChartDisplay类的display()方法中存在如下代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"pie"</span>)) &#123;</span><br><span class="line">    PieChart chart = <span class="keyword">new</span> PieChart();</span><br><span class="line">    chart.display();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"bar"</span>)) &#123;</span><br><span class="line">    BarChart chart = <span class="keyword">new</span> BarChart();</span><br><span class="line">    chart.display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      在该代码中，如果需要增加一个新的图表类，如折线图LineChart，则需要修改ChartDisplay类的display()方法的源代码，增加新的判断逻辑，违反了开闭原则。</p><p>​      在本实例中，由于在ChartDisplay类的display()方法中针对每一个图表类编程，因此增加新的图表类不得不修改源代码。可以通过抽象化的方式对系统进行重构，使之增加新的图表类时无须修改源代码，满足开闭原则。具体做法如下：</p><p>​      (1) 增加一个抽象图表类AbstractChart，将各种具体图表类作为其子类；</p><p>​      (2)  ChartDisplay类针对抽象图表类进行编程，由客户端来决定使用哪种具体图表。</p><p>​      重构后结构如图2所示：</p><p><img src="http://pic.blackist.top/dev-201907020952-241.png" alt="图2"></p><p><strong>图2 重构后的结构图</strong></p><p>​      在图2中，我们引入了抽象图表类AbstractChart，且ChartDisplay针对抽象图表类进行编程，并通过setChart()方法由客户端来设置实例化的具体图表对象，在ChartDisplay的display()方法中调用chart对象的display()方法显示图表。如果需要增加一种新的图表，如折线图LineChart，只需要将LineChart也作为AbstractChart的子类，在客户端向ChartDisplay中注入一个LineChart对象即可，无须修改现有类库的源代码。    </p><p>​       注意：因为xml和properties等格式的配置文件是纯文本文件，可以直接通过VI编辑器或记事本进行编辑，且无须编译，因此在软件开发中，一般不把对配置文件的修改认为是对系统源代码的修改。如果一个系统在扩展时只涉及到修改配置文件，而原有的Java代码或C#代码没有做任何修改，该系统即可认为是一个符合开闭原则的系统。</p><h2 id="三-里氏替换原则"><a href="#三-里氏替换原则" class="headerlink" title="三.里氏替换原则"></a>三.里氏替换原则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7540445" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7540445</a></p><p>　　里氏代换原则由2008年图灵奖得主、美国第一位计算机科学女博士<strong>Barbara Liskov</strong>教授和卡内基·梅隆大学Jeannette Wing教授于1994年提出。其严格表述如下：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1代换o2时，程序P的行为没有变化，那么类型S是类型T的子类型。这个定义比较拗口且难以理解，因此我们一般使用它的另一个通俗版定义：</p><blockquote><p>里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p></blockquote><p>​      里氏代换原则告诉我们，<strong>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。</strong>例如：我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。</p><p>​      例如有两个类，一个类为BaseClass，另一个是SubClass类，并且SubClass类是BaseClass类的子类，那么一个方法如果可以接受一个BaseClass类型的基类对象base的话，如：method1(base)，那么它必然可以接受一个BaseClass类型的子类对象sub，method1(sub)能够正常运行。反过来的代换不成立，如一个方法method2接受BaseClass类型的子类对象sub为参数：method2(sub)，那么一般而言不可以有method2(base)，除非是重载方法。</p><p>​      里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此<strong>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象</strong>。</p><p>​      在使用里氏代换原则时需要注意如下几个问题：</p><p>​      (1)子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</p><p>​      (2) 我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。里氏代换原则是开闭原则的具体实现手段之一。</p><p>​      (3) Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</p><p>在Sunny软件公司开发的CRM系统中，客户(Customer)可以分为VIP客户(VIPCustomer)和普通客户(CommonCustomer)两类，系统需要提供一个发送Email的功能，原始设计方案如图1所示：</p><p><img src="http://pic.blackist.top/dev-201907020953-812.png" alt="图1"></p><p>​    无论是普通客户还是VIP客户，发送邮件的过程都是相同的，也就是说两个send()方法中的代码重复，而且在本系统中还将增加新类型的客户。为了让系统具有更好的扩展性，同时减少代码重复，使用里氏代换原则对其进行重构。</p><p>​      在本实例中，可以考虑增加一个新的抽象客户类Customer，而将CommonCustomer和VIPCustomer类作为其子类，邮件发送类EmailSender类针对抽象客户类Customer编程，根据里氏代换原则，能够接受基类对象的地方必然能够接受子类对象，因此将EmailSender中的send()方法的参数类型改为Customer，如果需要增加新类型的客户，只需将其作为Customer类的子类即可。重构后的结构如图2所示：</p><p><img src="http://pic.blackist.top/dev-201907020954-854.png" alt></p><p><strong>图2  重构后的结构图</strong></p><p>​      <strong>里氏代换原则是实现开闭原则的重要方式之一。</strong>在本实例中，在传递参数时使用基类对象，除此以外，在定义成员变量、定义局部变量、确定方法返回类型时都可使用里氏代换原则。针对基类编程，在程序运行时再确定具体子类。</p><p>　　另外补充一篇关于里氏替换原则的一篇博文：</p><p>　　<a href="http://blog.csdn.net/zhengzhb/article/details/7281833" target="_blank" rel="noopener">http://blog.csdn.net/zhengzhb/article/details/7281833</a></p><h2 id="四-依赖倒置原则"><a href="#四-依赖倒置原则" class="headerlink" title="四.依赖倒置原则"></a>四.依赖倒置原则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7562783" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7562783</a></p><p>　　如果说开闭原则是面向对象设计的目标的话，那么依赖倒转原则就是面向对象设计的主要实现机制之一，它是系统抽象化的具体实现。依赖倒转原则是<strong>Robert C. Martin</strong>在1996年为“C++Reporter”所写的专栏Engineering Notebook的第三篇，后来加入到他在2002年出版的经典著作“<strong>Agile Software Development, Principles, Patterns, and Practices</strong>”一书中。依赖倒转原则定义如下：</p><blockquote><p>依赖倒转原则(Dependency Inversion  Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p></blockquote><p>​      依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。</p><p>​      在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中，这样一来，如果系统行为发生变化，只需要对抽象层进行扩展，并修改配置文件，而无须修改原有系统的源代码，在不修改的情况下来扩展系统的功能，满足开闭原则的要求。</p><p>​      在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过<strong>依赖注入(DependencyInjection, DI)</strong>的方式注入到其他对象中，<strong>依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象</strong>。常用的注入方式有三种，分别是：<strong>构造注入，设值注入（Setter注入）和接口注入</strong>。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。</p><p>​      下面通过一个简单实例来加深对依赖倒转原则的理解：</p><p>​      Sunny软件公司开发人员在开发某CRM系统时发现：该系统经常需要将存储在TXT或Excel文件中的客户信息转存到数据库中，因此需要进行数据格式转换。在客户数据操作类中将调用数据格式转换类的方法实现格式转换和数据库插入操作，初始设计方案结构如图1所示：</p><p><img src="http://pic.blackist.top/dev-201907020956-327.png" alt="图1"></p><p>​            在编码实现图1所示结构时，Sunny软件公司开发人员发现该设计方案存在一个非常严重的问题，由于每次转换数据时数据来源不一定相同，因此需要更换数据转换类，如有时候需要将TXTDataConvertor改为ExcelDataConvertor，此时，需要修改CustomerDAO的源代码，而且在引入并使用新的数据转换类时也不得不修改CustomerDAO的源代码，系统扩展性较差，违反了开闭原则，现需要对该方案进行重构。</p><p>在本实例中，由于CustomerDAO针对具体数据转换类编程，因此在增加新的数据转换类或者更换数据转换类时都不得不修改CustomerDAO的源代码。我们可以通过引入抽象数据转换类解决该问题，在引入抽象数据转换类DataConvertor之后，CustomerDAO针对抽象类DataConvertor编程，而将具体数据转换类名存储在配置文件中，符合依赖倒转原则。根据里氏代换原则，程序运行时，具体数据转换类对象将替换DataConvertor类型的对象，程序不会出现任何问题。更换具体数据转换类时无须修改源代码，只需要修改配置文件；如果需要增加新的具体数据转换类，只要将新增数据转换类作为DataConvertor的子类并修改配置文件即可，原有代码无须做任何修改，满足开闭原则。重构后的结构如图2所示：</p><p><img src="http://pic.blackist.top/dev-201907020957-332.png" alt="图2"></p><p>​    </p><p>​      在上述重构过程中，我们使用了开闭原则、里氏代换原则和依赖倒转原则，在大多数情况下，这三个设计原则会同时出现，<strong>开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段</strong>，它们相辅相成，相互补充，目标一致，只是分析问题时所站角度不同而已。</p><h2 id="五-接口隔离原则"><a href="#五-接口隔离原则" class="headerlink" title="五.接口隔离原则"></a>五.接口隔离原则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7562842" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7562842</a></p><p>　　接口隔离原则定义如下：</p><blockquote><p>接口隔离原则(Interface  Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p></blockquote><p>​      根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。<strong>每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。</strong>这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：</p><p>​      (1) 当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“<strong>角色隔离原则</strong>”。</p><p>​      (2) 如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指<strong>接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口</strong>。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“<strong>定制服务</strong>”，即为不同的客户端提供宽窄不同的接口。</p><p>​      下面通过一个简单实例来加深对接口隔离原则的理解：</p><p>Sunny软件公司开发人员针对某CRM系统的客户数据显示模块设计了如图1所示接口，其中方法dataRead()用于从文件中读取数据，方法transformToXML()用于将数据转换成XML格式，方法createChart()用于创建图表，方法displayChart()用于显示图表，方法createReport()用于创建文字报表，方法displayReport()用于显示文字报表。</p><p><img src="http://pic.blackist.top/dev-201907020958-882.png" alt="图1"></p><p>​      在实际使用过程中发现该接口很不灵活，例如如果一个具体的数据显示类无须进行数据转换（源文件本身就是XML格式），但由于实现了该接口，将不得不实现其中声明的transformToXML()方法（至少需要提供一个空实现）；如果需要创建和显示图表，除了需实现与图表相关的方法外，还需要实现创建和显示文字报表的方法，否则程序编译时将报错。</p><p>​      在图1中，由于在接口CustomerDataDisplay中定义了太多方法，即该接口承担了太多职责，一方面导致该接口的实现类很庞大，在不同的实现类中都不得不实现接口中定义的所有方法，灵活性较差，如果出现大量的空方法，将导致系统中产生大量的无用代码，影响代码质量；另一方面由于客户端针对大接口编程，将在一定程序上破坏程序的封装性，客户端看到了不应该看到的方法，没有为客户端定制接口。因此需要将该接口按照接口隔离原则和单一职责原则进行重构，将其中的一些方法封装在不同的小接口中，确保每一个接口使用起来都较为方便，并都承担某一单一角色，每个接口中只包含一个客户端（如模块或类）所需的方法即可。</p><p>​      通过使用接口隔离原则，本实例重构后的结构如图2所示：</p><p><img src="http://pic.blackist.top/dev-201907020959-680.png" alt="图2"></p><p>​     <strong>在使用接口隔离原则时，我们需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便。</strong>一般而言，接口中仅包含为某一类用户定制的方法即可，不应该强迫客户依赖于那些它们不用的方法。</p><h2 id="六-迪米特法则"><a href="#六-迪米特法则" class="headerlink" title="六.迪米特法则"></a>六.迪米特法则</h2><p>　　原文链接：<a href="http://blog.csdn.net/lovelion/article/details/7563445" target="_blank" rel="noopener">http://blog.csdn.net/lovelion/article/details/7563445</a></p><p>　　迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。迪米特法则又称为最少知识原则(LeastKnowledge Principle, LKP)，其定义如下：</p><blockquote><p>迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。</p></blockquote><p>​      如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。<strong>迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。</strong></p><p>​      迪米特法则还有几种定义形式，包括<strong>：**</strong>不要和“陌生人”说话<strong>、</strong>只与你的直接朋友通信**等，在迪米特法则中，对于一个对象，其朋友包括以下几类：</p><p>​      (1) 当前对象本身(this)；</p><p>​     (2) 以参数形式传入到当前对象方法中的对象；</p><p>​      (3) 当前对象的成员对象；</p><p>​      (4) 如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；</p><p>​      (5) 当前对象所创建的对象。</p><p>​      任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。</p><p>​      迪米特法则要求我们在设计系统时，<strong>应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用</strong>。简言之，就是<strong>通过引入一个合理的第三者来降低现有对象之间的耦合度</strong>。</p><p>​      在将迪米特法则运用到系统设计中时，要注意下面的几点：<strong>在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及</strong>；<strong>在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限</strong>；<strong>在类的设计上，只要有可能，一个类型应当设计成不变类</strong>；<strong>在对其他类的引用上，一个对象对其他对象的引用应当降到最低</strong>。</p><p>​      下面通过一个简单实例来加深对迪米特法则的理解：</p><p>Sunny软件公司所开发CRM系统包含很多业务操作窗口，在这些窗口中，某些界面控件之间存在复杂的交互关系，一个控件事件的触发将导致多个其他界面控件产生响应，例如，当一个按钮(Button)被单击时，对应的列表框(List)、组合框(ComboBox)、文本框(TextBox)、文本标签(Label)等都将发生改变，在初始设计方案中，界面控件之间的交互关系可简化为如图1所示结构：</p><p><img src="http://pic.blackist.top/dev-201907021001-129.png" alt="图1"></p><p>​      在本实例中，可以通过引入一个专门用于控制界面控件交互的中间类(Mediator)来降低界面控件之间的耦合度。引入中间类之后，界面控件之间不再发生直接引用，而是将请求先转发给中间类，再由中间类来完成对其他控件的调用。当需要增加或删除新的控件时，只需修改中间类即可，无须修改新增控件或已有控件的源代码，重构后结构如图2所示：</p><p><img src="http://pic.blackist.top/dev-201907021001-501.png" alt="图2"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/LoveLion/article/category/738450/7" target="_blank" rel="noopener">http://blog.csdn.net/LoveLion/article/category/738450/7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于设计模式的六大设计原则的资料网上很多，但是很多地方解释地都太过于笼统化，我也找了很多资料来看，发现CSDN上有几篇关于设计模式的六大原则讲述的比较通俗易懂，因此转载过来。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="设计模式" scheme="https://blackist.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java中&#39;==&#39; 和 equals()</title>
    <link href="https://blackist.org/2019/06/27/java-oo-equals/"/>
    <id>https://blackist.org/2019/06/27/java-oo-equals/</id>
    <published>2019-06-27T04:51:59.000Z</published>
    <updated>2019-06-29T13:53:18.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>“判断两个事物是否相等”，是编程中最常见的操作之一，在Java中，判断是否相等有两种方法，一种是使用“==”判断符，另一种是使用“equals()”方法，你是否曾因混用二者导致不可思议的bug？本篇文章将带你深入二者背后的判断原理。</p><a id="more"></a><h1 id="相等判断符”-”"><a href="#相等判断符”-”" class="headerlink" title="相等判断符”==”"></a>相等判断符”==”</h1><blockquote><p>“==”相等判断符用于比较基本数据类型和引用类型数据。当比较基本数据类型的时候比较的是数值，当比较引用类型数据时比较的是引用(指针)。</p></blockquote><h2 id="“-”判断基本类型数据"><a href="#“-”判断基本类型数据" class="headerlink" title="“==”判断基本类型数据"></a>“==”判断基本类型数据</h2><p>基本数据类型指的是Java中的八大数据类型：byte，short，int，long，float，double，char，boolean。</p><p>这八大基本数据类型有个共同的特点是它们在内存中是有具体值的, 比如说一个 int 类型的数据”2”，它在8位数据总线的机器上保存形式为 0000 0010。（8位机器是假设的）</p><p>当使用 == 比较两个基本数据类型的时候, 就是在比较它们各自在内存中的值。</p><p>为了照顾到要刨根问底的同学，再补充一下两个数值是怎么比较的：cpu 在比较的时候会将两个值作差，然后查看标志寄存器。标志寄存器存放的是运算的结果，里面有一个是否为0的标志位，如果该位为1，证明二者之差为0，二者相等。</p><h2 id="“-”判断引用类型数据"><a href="#“-”判断引用类型数据" class="headerlink" title="“==”判断引用类型数据"></a>“==”判断引用类型数据</h2><p>引用数据类型在字面上也是很好理解的, 它就是一个引用, 指向堆内存中一个具体的对象。</p><p>比如说<code>Student stu = new Student();</code> 这里的 stu 就是一个引用，它指向的是当前 new 出来的 <strong>Student</strong> 对象. 当我们想要操作这个 <strong>Student</strong> 对象时, 只需要操作引用即可, 比如说<code>int age = stu.getAge();</code>。</p><p>所以用”==”判断两个引用数据类型是否相等的时候，实际上是在判断两个引用<strong>是否指向同一个对象</strong>。</p><p>看下面的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s1 = &quot;hello&quot;;    //s1指向字符串常量池中的&quot;hello&quot;字符串对象</span><br><span class="line">    String s2 = &quot;hello&quot;;    //s2也指向字符串常量池中的&quot;hello&quot;字符串对象</span><br><span class="line">    System.out.println(s1 == s2);   //true</span><br><span class="line"></span><br><span class="line">    String s3 = new String(&quot;hello&quot;);   //s3指向的是堆内存中的字符串对象 </span><br><span class="line">    System.out.println(s1 == s3);    //false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子可以看到，由于引用”s1”和”s2”指向的都是常量池中的”hello”字符串，所以返回true。（后面我会发布一篇详细讲述Java字符串的文章，涉及字符串初始化和字符串常量池等知识）</p><p>而”s3”指向的是新创建字符串对象，因为只要动用了<code>new</code>关键字, 就会在堆内存创建一个新的对象。</p><p>也就是说 s1 和 s3 指向的是不同的字符串对象，所以返回false。</p><h1 id="相等判断方法equals"><a href="#相等判断方法equals" class="headerlink" title="相等判断方法equals()"></a>相等判断方法equals()</h1><blockquote><p>equals()和 == 有着本质的区别，== 可以看作是对“操作系统比较数据手段”的封装，而equals()则是每个对象自带的比较方法，它是Java自定义的比较规则。</p></blockquote><p>equals()和 == 的本质区别更通俗的说法是：==的比较规则是定死的，就是比较两个数据的值。</p><p>而 equals() 的比较规则是不固定的，可以由用户自己定义。</p><p>看下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s1 = &quot;hello&quot;;</span><br><span class="line">    String s3 = new String(&quot;hello&quot;);    </span><br><span class="line">    System.out.println(s1.equals(s3));    //true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回想前面的案例：用 == 比较的时候, 上面 s1 和 s3 比较出的结果为false。而当用 equals() 比较的时候，得出的结果为 true。</p><p>想知道原因我们还得看源码，下面是 String 类中的 equals() 方法的源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    if (this == anObject) &#123;    //先比较两个字符串的引用是否相等(是否指向同一个对象), 是直接返回true</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (anObject instanceof String) &#123;    //两个引用不等还会继续比较</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        if (n == anotherString.value.length) &#123;</span><br><span class="line">            char v1[] = value;    //字符串类是用字符数组实现的, 先要拿到两个字符串的字符数组</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            while (n-- != 0) &#123;    //然后对两个数组逐个字符地进行比较</span><br><span class="line">                if (v1[i] != v2[i])</span><br><span class="line">                    return false;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的源码可以看到, 当调用 String 类型数据的 equals() 方法时，首先会判断两个字符串的引用是否相等，也就是说两个字符串引用是否指向同一个对象，是则返回true。</p><p>如果不是指向同一个对象，则把两个字符串中的字符挨个进行比较。由于 s1 和 s3 字符串都是 “hello”，是可以匹配成功的，所以最终返回 true。</p><h3 id="HashMap中containsKey-的实现"><a href="#HashMap中containsKey-的实现" class="headerlink" title="HashMap中containsKey()的实现"></a>HashMap<string, object>中containsKey()的实现</string,></h3><p>比较的是key的hash code和参数字符串的hash code。</p><h1 id="思考：为什么要设计equals-方法"><a href="#思考：为什么要设计equals-方法" class="headerlink" title="思考：为什么要设计equals()方法?"></a>思考：为什么要设计equals()方法?</h1><p>通过上面的讲解，相信你已经知道 == 和 equals() 的区别了：一个的比较规则是定死的，一个是可以由编程人员自己定义的。</p><p>可是为什么会有 equals() 方法, 而且还可以被自由定制呢?</p><p>这个问题要落到Java语言的核心 —— 面向对象思想了。</p><p>Java 不同于面向过程的C语言，Java是一款面向对象的高级语言。如果是面向过程编程，直接操作内存上存储的数据的话，用 == 所定义的规则来判断两个数据是否相等已经足够了。</p><p>而Java中万物皆对象，我们经常要面临的问题是这两个对象是否相等，而不是这两串二进制数是否相等，仅有 == 是完全不够用的。</p><p>由于Java程序员们会创建各种满足它们业务需求的对象，<strong>系统无法提前知道两个对象在什么条件下算相等，Java干脆把判断对象是否相等的权力交给编程人员</strong>。</p><p>具体的措施是：所有的类都必须继承 Object 类，而 Object 类中写有equals()方法。编程人员可以通过重写 equals() 方法来实现自己的比较策略，也可以不重写，使用Object类的equals()比较策略。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Object类中的equals()方法源码</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    return (this == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 Object 类的 equals() 源码可以看到，如果编程人员没有显示地重写 equals() 方法，则默认比较两个引用是否指向同一个对象。</p><blockquote><p>补充: 关于基本数据类型包装类的比较</p></blockquote><p>由于 Java 中万物皆对象，就连基本数据类型也有其对应的包装类，那么它们对应的比较策略是什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int a = 3;</span><br><span class="line">    Integer b = new Integer(3);</span><br><span class="line">    System.out.println(b.equals(a));    //true, 自动装箱</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看到尽管两个引用不同, 但是输出的结果仍为 true, 证明 Integer 包装类重写了 equals() 方法，追踪其源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Integer类中的equals方法</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">    if (obj instanceof Integer) &#123;</span><br><span class="line">        return value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码看到，基本类型包装类在重写equals()后，比较的还是基本数据类型的值。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>通过探索 == 和 equals() 的区别，我们摸清楚了二者别后的比较策略，同时也对 Java 中 equals() 方法的设计进行了思考，相信大家在今后的 Java 编程实战中不会再为相等判断而烦恼了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc" target="_blank" rel="noopener"><a href="https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU3NzczMTAzMg==&amp;mid=2247484502&amp;idx=1&amp;sn=3a1c33f1775f8af94edd93c03413f432&amp;chksm=fd0164e1ca76edf75b1aaf63ccfa06ea9d43cb3cb7459227b7add1c25c9966efffde16dc9f45&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;key=f9a007895c9d38fdc97b2511d304b22f97950d025d0ab083a0988ec7cf2b231d0784acf364b69e05d4fe91447ef43637a0cf1b239f86bcb0c8683f102ea13775c7c173047a60c206c8eb92b24c680103&amp;ascene=1&amp;uin=MTM3MzI2NTQzNA%3D%3D&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=77Xn2iRJGL%2Bq0VUqT2p92TrsIaljOa8bijuNJ33II0J4pt7IRVYbqeUIuau8VVPc</a></a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“判断两个事物是否相等”，是编程中最常见的操作之一，在Java中，判断是否相等有两种方法，一种是使用“==”判断符，另一种是使用“equals()”方法，你是否曾因混用二者导致不可思议的bug？本篇文章将带你深入二者背后的判断原理。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="面向对象" scheme="https://blackist.org/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hash在Java中的应用</title>
    <link href="https://blackist.org/2019/06/26/java-hash/"/>
    <id>https://blackist.org/2019/06/26/java-hash/</id>
    <published>2019-06-26T06:07:15.000Z</published>
    <updated>2019-06-29T13:53:18.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>雅虎的 Chief Scientist ，Udi Manber 曾说过，在 yahoo 所应用的算法中，最重要的三个是：Hash，Hash 和 Hash。其实从上文中所举的git用sha1判断文件更改，密码用MD5生成摘要后加盐等等对Hash的应用可看出，Hash的在计算机世界扮演着多么重要的角色。</p><a id="more"></a><h3 id="1-HashMap的复杂度"><a href="#1-HashMap的复杂度" class="headerlink" title="1 HashMap的复杂度"></a>1 HashMap的复杂度</h3><p>在介绍HashMap的实现之前，先考虑一下，HashMap与ArrayList和LinkedList在数据复杂度上有什么区别。下图是他们的性能对比图：</p><table><thead><tr><th>获取</th><th>查找</th><th>添加/删除</th><th>空间</th><th></th></tr></thead><tbody><tr><td>ArrayList</td><td>O(1)</td><td>O(1)</td><td>O(N)</td><td>O(N)</td></tr><tr><td>LinkedList</td><td>O(N)</td><td>O(N)</td><td>O(1)</td><td>O(N)</td></tr><tr><td>HashMap</td><td>O(N/Bucket_size)</td><td>O(N/Bucket_size)</td><td>O(N/Bucket_size)</td><td>O(N)</td></tr></tbody></table><p>可以看出HashMap整体上性能都非常不错，但是不稳定，为O(N/Buckets)，N就是以数组中没有发生碰撞的元素，Buckets是因碰撞产生的链表。</p><blockquote><p>注：发生碰撞实际上是非常稀少的，所以N/Bucket_size约等于1</p></blockquote><p>HashMap是对Array与Link的折衷处理，Array与Link可以说是两个速度方向的极端，Array注重于数据的获取，而处理修改（添加/删除）的效率非常低；Link由于是每个对象都保持着下一个对象的指针，查找某个数据需要遍历之前所有的数据，所以效率比较低，而在修改操作中比较快。</p><h3 id="2-HashMap的实现"><a href="#2-HashMap的实现" class="headerlink" title="2 HashMap的实现"></a>2 HashMap的实现</h3><p>本文以JDK8的API实现进行分析</p><h4 id="2-1-对key进行Hash计算"><a href="#2-1-对key进行Hash计算" class="headerlink" title="2.1 对key进行Hash计算"></a>2.1 对key进行Hash计算</h4><p>在JDK8中，由于使用了红黑树来处理大的链表开销，所以hash这边可以更加省力了，只用计算hashCode并移动到低位就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    //计算hashCode，并无符号移动到低位</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个例子: 363771819^(363771819 &gt;&gt;&gt; 16)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0001 0101 1010 1110 1011 0111 1010 1011(363771819)</span><br><span class="line">0000 0000 0000 0000 0001 0101 1010 1110(5550) XOR</span><br><span class="line">--------------------------------------- =</span><br><span class="line">0001 0101 1010 1110 1010 0010 0000 0101(363766277)</span><br></pre></td></tr></table></figure><p>这样做可以实现了高地位更加均匀地混到一起。</p><p>下面给出在Java中几个常用的哈希码(hashCode)的算法。</p><ol><li>Object类的hashCode. 返回对象的经过处理后的内存地址，由于每个对象的内存地址都不一样，所以哈希码也不一样。这个是native方法，取决于JVM的内部设计，一般是某种C地址的偏移。</li><li>String类的hashCode. 根据String类包含的字符串的内容，根据一种特殊算法返回哈希码，只要字符串的内容相同，返回的哈希码也相同。</li><li>Integer等包装类，返回的哈希码就是Integer对象里所包含的那个整数的数值，例如Integer i1=new Integer(100), i1.hashCode的值就是100 。由此可见，2个一样大小的Integer对象，返回的哈希码也一样。</li><li>int，char这样的基础类，它们不需要hashCode，如果需要存储时，将进行自动装箱操作，计算方法同上。</li></ol><h4 id="2-2-获取到数组的index的位置"><a href="#2-2-获取到数组的index的位置" class="headerlink" title="2.2  获取到数组的index的位置"></a>2.2  获取到数组的index的位置</h4><p>计算了Hash，我们现在要把它插入数组中了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = (tab.length - 1) &amp; hash；</span><br></pre></td></tr></table></figure><p>通过位运算，确定了当前的位置，因为HashMap数组的大小总是2^n，所以实际的运算就是 (0xfff…ff) &amp; hash ，这里的tab.length-1相当于一个mask，滤掉了大于当前长度位的hash，使每个i都能插入到数组中。</p><h4 id="2-3-生成包装类"><a href="#2-3-生成包装类" class="headerlink" title="2.3 生成包装类"></a>2.3 生成包装类</h4><p>这个对象是一个包装类，Node<k,v>，内部有key,value,hash还有next，可以看出来它是一个链表。</k,v></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        final int hash;</span><br><span class="line">        final K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">        //getter and setter .etc.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-插入包装类到数组"><a href="#2-4-插入包装类到数组" class="headerlink" title="2.4  插入包装类到数组"></a>2.4  插入包装类到数组</h4><p>(1). 如果输入当前的位置是空的，就插进去，如图，左为插入前，右为插入后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0           0</span><br><span class="line">|           |</span><br><span class="line">1 -&gt; null   1 - &gt; null</span><br><span class="line">|           |</span><br><span class="line">2 -&gt; null   2 - &gt; null</span><br><span class="line">|           | </span><br><span class="line">..-&gt; null   ..- &gt; null</span><br><span class="line">|           | </span><br><span class="line">i -&gt; null   i - &gt; new node</span><br><span class="line">|           |</span><br><span class="line">n -&gt; null   n - &gt; null</span><br></pre></td></tr></table></figure><p>(2). 如果当前位置已经有了node，且它们发生了碰撞，则新的放到前面，旧的放到后面，这叫做链地址法处理冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0           0</span><br><span class="line">|           |</span><br><span class="line">1 -&gt; null   1 - &gt; null</span><br><span class="line">|           |</span><br><span class="line">2 -&gt; null   2 - &gt; null</span><br><span class="line">|           | </span><br><span class="line">..-&gt; null   ..- &gt; null</span><br><span class="line">|           | </span><br><span class="line">i -&gt; old    i - &gt; new - &gt; old</span><br><span class="line">|           |</span><br><span class="line">n -&gt; null   n - &gt; null</span><br></pre></td></tr></table></figure><p>我们可以发现，失败的hashCode算法会导致HashMap的性能由数组下降为链表，所以想要避免发生碰撞，就要提高hashCode结果的均匀性。</p><h3 id="3-扩容"><a href="#3-扩容" class="headerlink" title="3 扩容"></a>3 扩容</h3><p>如果当表中的75%已经被占用，即视为需要扩容了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(threshold = capacity * load factor ) &lt; size</span><br></pre></td></tr></table></figure><p>它主要有两个步骤：</p><h4 id="3-1-容量加倍"><a href="#3-1-容量加倍" class="headerlink" title="3.1 容量加倍"></a>3.1 容量加倍</h4><p>左移1位，就是扩大到两倍，用位运算取代了乘法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newCap = oldCap &lt;&lt; 1;</span><br><span class="line">newThr = oldThr &lt;&lt; 1;</span><br></pre></td></tr></table></figure><h4 id="3-2-遍历计算Hash"><a href="#3-2-遍历计算Hash" class="headerlink" title="3.2 遍历计算Hash"></a>3.2 遍历计算Hash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        //如果发现当前有Bucket</span><br><span class="line">        if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">            oldTab[j] = null;</span><br><span class="line">            //如果这里没有碰撞</span><br><span class="line">            if (e.next == null)</span><br><span class="line">                //重新计算Hash，分配位置</span><br><span class="line">                newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">            //这个见下面的新特性介绍，如果是树，就填入树</span><br><span class="line">            else if (e instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">            //如果是链表，就保留顺序....目前就看懂这点</span><br><span class="line">            else &#123; // preserve order</span><br><span class="line">                Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                Node&lt;K,V&gt; next;</span><br><span class="line">                do &#123;</span><br><span class="line">                    next = e.next;</span><br><span class="line">                    if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                        if (loTail == null)</span><br><span class="line">                            loHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            loTail.next = e;</span><br><span class="line">                        loTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        if (hiTail == null)</span><br><span class="line">                            hiHead = e;</span><br><span class="line">                        else</span><br><span class="line">                            hiTail.next = e;</span><br><span class="line">                        hiTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; while ((e = next) != null);</span><br><span class="line">                if (loTail != null) &#123;</span><br><span class="line">                    loTail.next = null;</span><br><span class="line">                    newTab[j] = loHead;</span><br><span class="line">                &#125;</span><br><span class="line">                if (hiTail != null) &#123;</span><br><span class="line">                    hiTail.next = null;</span><br><span class="line">                    newTab[j + oldCap] = hiHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由此可以看出扩容需要遍历并重新赋值，成本非常高，所以选择一个好的初始容量非常重要。</p><h3 id="4-扩容如何提升性能？"><a href="#4-扩容如何提升性能？" class="headerlink" title="4 扩容如何提升性能？"></a>4 扩容如何提升性能？</h3><ul><li>解决扩容损失：如果知道大致需要的容量，把初始容量设置好以解决扩容损失；<br> 比如我现在有1000个数据，需要 1000/0.75 = 1333 个坑位，又 1024 &lt; 1333 &lt; 2048，所以最好使用2048作为初始容量。</li><li>解决碰撞损失：使用高效的HashCode与loadFactor，这个…由于JDK8的高性能出现，这儿问题也不大了。</li></ul><h3 id="5-HashMap与HashTable的主要区别"><a href="#5-HashMap与HashTable的主要区别" class="headerlink" title="5 HashMap与HashTable的主要区别"></a>5 HashMap与HashTable的主要区别</h3><p>在很多的Java基础书上都已经说过了，他们的主要区别其实就是Table全局加了线程同步保护</p><ul><li>HashTable线程更加安全，代价就是因为它粗暴的添加了同步锁，所以会有性能损失。</li><li>其实有更好的concurrentHashMap可以替代HashTable，一个是方法级，一个是Class级。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/bf1d7eee28d0" target="_blank" rel="noopener">https://www.jianshu.com/p/bf1d7eee28d0</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;雅虎的 Chief Scientist ，Udi Manber 曾说过，在 yahoo 所应用的算法中，最重要的三个是：Hash，Hash 和 Hash。其实从上文中所举的git用sha1判断文件更改，密码用MD5生成摘要后加盐等等对Hash的应用可看出，Hash的在计算机世界扮演着多么重要的角色。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="hash" scheme="https://blackist.org/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>校友录设计</title>
    <link href="https://blackist.org/2019/06/23/spring-ar-introduce/"/>
    <id>https://blackist.org/2019/06/23/spring-ar-introduce/</id>
    <published>2019-06-23T09:11:19.000Z</published>
    <updated>2019-06-30T16:01:39.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。</p><a id="more"></a><p>项目地址：<a href="https://github.com/blackist/ar" target="_blank" rel="noopener">https://github.com/blackist/ar</a></p><p><strong>摘要</strong></p><p>校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。然而目前我校并没有一个系统可以追溯毕业生的情况。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，同时也能够让院校充分了解毕业生的就业状况。</p><p>为了给校友们的提供一个了解母校动态的平台，本设计首先确定以毕业生以及高校为主要用户对象，采用目前业内流行的SpringMVC+Spring+MyBatis轻量级JavaEE框架，用Maven构建和管理，开发基于B/S结构的校友录系统。其次，通过系统建模对系统的各项功能进行了分析，确定了校友录系统的功能模块，并阐述了数据库的设计过程。再次对系统的功能模块进行了详细的设计，并对系统功能模块的界面进行了展示。最后对论文所阐述的内容进行总结，并分析了校友录系统对毕业生和院校带来的便利。</p><p>校友录系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、对本校毕业生招聘信息的推送。为满足院校和毕业生的需求，校友录系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块、职业招聘模块、校园服务模块。</p><p>校友录系统不仅能够很好地满足校友了解母校、校友动态的需求，也提供职业招聘、校园服务功能，使院校能够更好地了解毕业生就业情况、为毕业生提供就业服务。</p><p><strong>关键词</strong> 毕业；校友录；就业；JavaEE</p><p><strong>Abstract</strong></p><p>Youth is the best time in life, and this period of youth spent in the university will undoubtedly become the most valuable memories of our lives.Although time goes by fast, university life, the impressive community, the memorable alumni, the unforgettable teaching building, will be a subsequent stream of water in the memories. After graduation, we left school, along with the alumni miss and the alma mater’s attention. Thus, alumni desire for a platform to follow the news of alma mater, the status of alumni, and the dynamics of the group that they have joined.</p><p>​    In order to provide a sustenance for alumni’s emotions, this design, taking graduates and colleges as the main user object, using the current industry-popular SpringMVC + Spring + MyBatis lightweight JavaEE framework, develops the computer-based web pages Version of the simple and elegant Alumni Record System ( AR), built and managed by Maven.</p><p>​    AR is designed after a full investigation and analysis is conducted in the teachers, students and institutions. Alumni pay more attention to the school news, class dynamics, alumni information, community students and other groups. Institutions concern more about the graduates’ employment situation, new enrollment situation and delivery of recruit information about school graduates. AR designs the news center module, class record module, alumni organization module and alumni forum module. And album function is added into the class record and alumni organization, which aims to meet the needs of alumni better. At the same time, AR includes professional recruitment module, campus service module, so that institutions can understand the employment situation of graduates and help graduates better.</p><p>AR system not only can meet alumni to understand the alma mater, alumni dynamic needs, but also provide professional recruitment, campus service function, so that institutions can better understand the employment situation of graduates, to provide employment services for graduates.</p><p><strong>Keywords</strong>  graduation  alumni-record  employment  javaee</p><p><strong>目</strong>       <strong>录</strong></p><p><a href="#_Toc482890209">摘要… I</a></p><p><a href="#_Toc482890210">Abstract II</a></p><p><a href="#_Toc482890211">1 绪论… 1</a></p><p><a href="#_Toc482890212">1.1 课题背景… 1</a></p><p><a href="#_Toc482890213">1.2 课题意义… 1</a></p><p><a href="#_Toc482890214">1.3 课题内容… 1</a></p><p><a href="#_Toc482890215">1.4 论文的组织结构… 1</a></p><p><a href="#_Toc482890216">2 系统需求分析… 3</a></p><p><a href="#_Toc482890217">2.1 需求分析… 3</a></p><p><a href="#_Toc482890218">2.2 功能分析… 4</a></p><p><a href="#_Toc482890219">2.2.1 院校新闻发布功能… 4</a></p><p><a href="#_Toc482890220">2.2.2 班级管理功能… 5</a></p><p><a href="#_Toc482890221">3.2.3 院校组织管理功能… 6</a></p><p><a href="#_Toc482890222">3.2.4 校友论坛功能… 6</a></p><p><a href="#_Toc482890223">3.2.5 院校职业招聘功能… 7</a></p><p><a href="#_Toc482890224">3.2.6 校园服务功能… 7</a></p><p><a href="#_Toc482890225">3.2.7 用户个人中心功能… 8</a></p><p><a href="#_Toc482890226">2.4 技术路线… 9</a></p><p><a href="#_Toc482890227">3 系统总体设计… 11</a></p><p><a href="#_Toc482890228">3.1 系统总体设计… 11</a></p><p><a href="#_Toc482890229">3.1.1 系统登录… 11</a></p><p><a href="#_Toc482890230">3.1.2 新闻中心… 11</a></p><p><a href="#_Toc482890231">3.1.3 班级录… 11</a></p><p><a href="#_Toc482890232">3.1.4 校友组织… 11</a></p><p><a href="#_Toc482890233">3.1.5 校友论坛… 11</a></p><p><a href="#_Toc482890234">3.1.6 职位招聘… 12</a></p><p><a href="#_Toc482890235">3.1.7 校园服务… 12</a></p><p><a href="#_Toc482890236">3.1.8 个人中心… 12</a></p><p><a href="#_Toc482890237">3.2 系统功能设计… 12</a></p><p><a href="#_Toc482890238">3.2.1 新闻中心… 12</a></p><p><a href="#_Toc482890239">3.2.2 班记录… 13</a></p><p><a href="#_Toc482890240">3.2.3 校友组织… 14</a></p><p><a href="#_Toc482890241">3.2.4 校友论坛… 14</a></p><p><a href="#_Toc482890242">3.2.5 职业招聘… 15</a></p><p><a href="#_Toc482890243">3.2.6 校园服务… 16</a></p><p><a href="#_Toc482890244">3.2.8 个人中心… 16</a></p><p><a href="#_Toc482890245">3.3 数据库设计… 17</a></p><p><a href="#_Toc482890246">3.3.1 概念模型设计… 17</a></p><p><a href="#_Toc482890247">3.3.2 逻辑结构设计… 25</a></p><p><a href="#_Toc482890248">4 系统详细设计… 37</a></p><p><a href="#_Toc482890249">4.1 班级录… 37</a></p><p><a href="#_Toc482890250">4.1.1 班级首页… 38</a></p><p><a href="#_Toc482890251">4.1.2 班级动态… 40</a></p><p><a href="#_Toc482890252">4.1.3 班级通讯录… 42</a></p><p><a href="#_Toc482890253">4.1.4 班级相册… 43</a></p><p><a href="#_Toc482890254">4.2 职业招聘… 44</a></p><p><a href="#_Toc482890255">4.2.1 发布招聘… 44</a></p><p><a href="#_Toc482890256">4.2.2 查询招聘… 45</a></p><p><a href="#_Toc482890257">4.2.3 招聘详情… 46</a></p><p><a href="#_Toc482890258">4.2.4 投递简历… 47</a></p><p><a href="#_Toc482890259">4.3 校友论坛… 48</a></p><p><a href="#_Toc482890260">4.3.1 论坛广场… 48</a></p><p><a href="#_Toc482890261">4.3.2 发布新帖… 49</a></p><p><a href="#_Toc482890262">4.3.3 帖子详情… 49</a></p><p><a href="#_Toc482890263">结论… 51</a></p><p><a href="#_Toc482890264">致谢… 52</a></p><p><a href="#_Toc482890265">参考文献… 53</a></p><p>1 绪论</p><p>1.1 课题背景</p><p>青春是人生最美好的时光，而在大学度过的这一段青春岁月无疑将成为我们人生中最为宝贵的回忆。大学生活如白驹过隙匆匆流逝，却又将在而后的回忆里细水长流，忘不掉的社团，忘不掉的校友， 忘不掉的教学楼。毕业后，我们离开学校，一同带走的还有对校友的思念和对母校的关注。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，自己曾加入的团体的动态等等。</p><p>同时，院校对毕业生的培养与关怀也不会停止，院校希望了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。并且，校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。这也有助于改善教学方案，从而使本校毕业生更好地适应社会需求。</p><p>1.2 课题意义</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以创建自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。</p><p>此系统还可以让校友了解母校的新闻，校友们的近况，自己曾加入的团体的动态，也提供了职业招聘功能，此功能是院校和毕业生交互的重要平台。院校可在职业招聘模块发布招聘信息，毕业生可以浏览招聘信息、投递简历、在线制作简历，毕业生可以发布自己所在单位的招聘信息，经管理员审核后发布到招聘广场，为其他毕业校友提供有力的就业帮助。校友的信息反馈在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。</p><p>1.3 课题内容</p><p>此系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、新生的招生情况以及对本校毕业生招聘信息的投送。此系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块，并在班记录和校友组织中加入相册功能，更好地满足校友的需求。同时，此系统包含职业招聘模块、校园服务模块，使院校更好地了解毕业生就业情况、为毕业生提供帮助。</p><p>1.4 论文的组织结构</p><p>论文主要内容包括五大部分，主要包括：</p><p>第一章 绪论。本章介绍了课题背景、课题意义以及本课题研究的主要内容。</p><p>第二章 系统需求分析。本章介绍了本系统的业务需求分析、系统功能分析以及相关业务的流程，开发过程中具体的开发环境、开发工具、相关技术。</p><p>第三章 系统总体设计。本章介绍了本系统的总体设计、系统各项功能的设计以及数据库的设计。</p><p>第四章 系统详细设计。本章介绍了系统的详细设计，包括各项系统功能的界面设计、代码逻辑设计以及实现。 </p><p>2 系统需求分析</p><p>2.1 需求分析</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以查询并加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。考虑到网络的现况和同学们以及毕业生跟踪调查的各种需求，系统应该具有各方面的交流能力和实时的用户反馈信息，能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间，与此同时，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。这也有助于改善教学方案，从而更好地让本校毕业生适应社会需求。系统主要功能有：</p><p>（1）系统用户的登录、注册。注册，由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；登录，输入用户输入用户名（学号）和密码登录系统；</p><p>（2）校园新闻发布中心功能：新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载地评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息；</p><p>（3）同学交流的班级录功能。班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成；</p><p>（4） 校友互动的团体组织功能。校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；</p><p>（5）校友话题参与的论坛功能。帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；</p><p>（6） 职位招聘信息推送功能。招聘广场，浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场； </p><p>（7）招生就业的校园服务。校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息；</p><p>（8）用户个人管理中心。个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>2.2 功能分析</p><p>基于对校友录系统的需求分析，校友录系统有新闻中心功能，管理员发布管理图文信息，用户可以浏览、评论新闻信息。校友录系统设置班记录功能，给班级同学提供班级空间，班级空间内有交流平台、班级相册，这是同学比较关心的功能。同时，校友录系统具有校友组织功能，校友可以加入校内的组织和团体，组织有自己的空间给组织成员提供交流平台。为给广大校友提供更大的交流平台，校友录系统提供校友论坛功能，校友可以浏览话题并参与讨论。为满足院校对招聘信息推送的需求，校友录系统应加入职业招聘模块，院校管理员发布招聘信息，用户浏览并投递简历，用户也可以发布自己所在单位的招聘信息，经管理员审核后发不到招聘广场。为更好地微笑有提供入学、就业服务，校友录系统设有校园服务，为校友提供校园指南和就业服务。最后，校友录系统为用户提供个人中心功能，对个人信息以及在站内的应用进行管理。</p><h3 id="2-2-1-院校新闻发布功能"><a href="#2-2-1-院校新闻发布功能" class="headerlink" title="2.2.1 院校新闻发布功能"></a>2.2.1 院校新闻发布功能</h3><p>1.新闻中心用例分析</p><p>新闻中心包括新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息。新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论。新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心用例如图2-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图2-1 新闻中心用例图</p><h3 id="2-2-2-班级管理功能"><a href="#2-2-2-班级管理功能" class="headerlink" title="2.2.2 班级管理功能"></a>2.2.2 班级管理功能</h3><p>1、班记录用例分析</p><p>班记录包括班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班记录用例如图2-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图2-2 班记录用例图</p><h3 id="2-2-3-院校组织管理功能"><a href="#2-2-3-院校组织管理功能" class="headerlink" title="2.2.3 院校组织管理功能"></a>2.2.3 院校组织管理功能</h3><p>1.校友组织用例分析</p><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；校友组织用例如图2-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图2-3 校友组织用例</p><h3 id="2-2-4-校友论坛功能"><a href="#2-2-4-校友论坛功能" class="headerlink" title="2.2.4 校友论坛功能"></a>2.2.4 校友论坛功能</h3><p>1.校友论坛用例分析</p><p>校友论坛包括：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；校友论坛用例如图2-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图2-4 校友论坛用例图</p><h3 id="2-2-5-院校职业招聘功能"><a href="#2-2-5-院校职业招聘功能" class="headerlink" title="2.2.5 院校职业招聘功能"></a>2.2.5 院校职业招聘功能</h3><p>1.业招聘用例分析</p><p>职位招聘包括：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘用例如图2-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图2-5 职业招聘用例图</p><h3 id="2-2-6-校园服务功能"><a href="#2-2-6-校园服务功能" class="headerlink" title="2.2.6 校园服务功能"></a>2.2.6 校园服务功能</h3><p>1.校园服务用例分析</p><p>校园服务：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务用例如图2-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图2-6 职业招聘用例图</p><h3 id="2-2-7-用户个人中心功能"><a href="#2-2-7-用户个人中心功能" class="headerlink" title="2.2.7 用户个人中心功能"></a>2.2.7 用户个人中心功能</h3><p>1.个人中心用例分析</p><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心用例如图2-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图2-7 个人中心用例图</p><p>2.4 技术路线</p><p>本系统采用业内流行的SpringMVC+Spring+MyBatis框架（简称SSM），由项目构建工具Maven构建，并使用Git版本控制系统辅助项目开发。</p><p>Git是一个便捷的分布式版本控制工具，本项目用Git进行管理，可以轻松地备份项目，控制项目的版本，并且能够更安全地开发、调试。</p><p>Maven可以通过项目对象模型配置文件（pom.xml）轻松地构建项目，不用将jar包添加到项目，缩小了项目的体积。本系统使用Maven构建父模块ar-parent，并聚合了三个子模块ar-common、ar-manage、ar-portal。ar-common是项目的公共基础模块，java应用类的模型，包含实体类、工具类、数据访问对象等，依赖Spring、MyBatis等。ar-manage是本系统的后台管理模块，web应用类的模型，依赖ar-common、Spring、SpringMVC等。Ar-poratl是本系统的门户网站模块，依赖ar-common、ar-manage、Spring、SpringMVC等。Maven可以将web应用类项目打包成war并发布到tomcat服务器运行测试。</p><p>本系统充分利用Spring的IoC（控制反转）和AOP（面向切面）特性，将创建用户的SpringMVC控制器Controller、业务逻辑类Service、数据访问类Mapper交由Spring Container管理，生成对应的bean（也称组件）, 并把实现类的类名作为bean的id。当控制器、业务逻辑类、数据访问类需要Spring Container中bean对应的实现类时，Spring Container通过依赖注入机制为其注入对应的bean。通过这种配置，系统实现了控制器和业务逻辑类分离，业务逻辑类和数据访问类分离。SpringMVC中的DispatcherServlet接收请求，并交由控制器Controller处理，Controller接收参数、调用业务逻辑类中的方法，通过ModelAndView视图模型返回jsp页面、json数据。</p><p>本系统的视图层采用jsp、HTML，通过事件触发机制向服务器端发送请求，并采用Bootstrap、AmazeUI、HTML5、CSS3等前台样式，通过c标签、javascript、jquery处理前台数据。</p><p>技术路线如图2-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图2-8 技术路线图</p><p>3 系统总体设计</p><p>3.1 系统总体设计</p><p>根据系统功能分析，本系统应该具备的功能包括：登录注册、新闻中心、班级录、校友组织、校友论坛、职位招聘、校园服务、个人中心等功能。</p><h3 id="3-1-1-系统登录"><a href="#3-1-1-系统登录" class="headerlink" title="3.1.1 系统登录"></a>3.1.1 系统登录</h3><p>（1）注册：由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；</p><p>（2）登录：输入用户输入用户名（学号）和密码登录系统。</p><h3 id="3-1-2-新闻中心"><a href="#3-1-2-新闻中心" class="headerlink" title="3.1.2 新闻中心"></a>3.1.2 新闻中心</h3><p>（1）新闻发布：后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；</p><p>（2）新闻评论：用户可以对新闻信息发表评论，回复评论，动态加载评论；</p><p>（3）新闻热度：用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。</p><h3 id="3-1-3-班级录"><a href="#3-1-3-班级录" class="headerlink" title="3.1.3 班级录"></a>3.1.3 班级录</h3><p>（1）班级检索：按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；</p><p>（2）班级排名：根据班级人数、活跃时间对班级进行热度排名；</p><p>（3）班级主页：每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；</p><p>（4）班级管理：班级的新增、管理员的设置由后台管理员完成。</p><h3 id="3-1-4-校友组织"><a href="#3-1-4-校友组织" class="headerlink" title="3.1.4 校友组织"></a>3.1.4 校友组织</h3><p>（1）校友总会：院校总会；</p><p>（2）院系分会：各学院的校友组织；</p><p>（3）社团分会：院校内的各种社团、协会的组织；</p><p>（4）学生协会：院校内的各学生协会组织；</p><p>（5）组织主页：个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。</p><h3 id="3-1-5-校友论坛"><a href="#3-1-5-校友论坛" class="headerlink" title="3.1.5 校友论坛"></a>3.1.5 校友论坛</h3><p>（1）帖子浏览：按作者、主题检索帖子，查看详情；</p><p>（2）评论帖子：对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；</p><p>（3）热帖推送：用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；</p><p>（4）发布新帖：用户登录后可以发布帖子； </p><p>（5）贴子管理：管理员可审核、置顶、删除帖子。</p><h3 id="3-1-6-职位招聘"><a href="#3-1-6-职位招聘" class="headerlink" title="3.1.6 职位招聘"></a>3.1.6 职位招聘</h3><p>（1）招聘广场：浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；</p><p>（2）简历投送：用户可以向喜欢的招聘信息投送个人简历；</p><p>（3）简历管理：用户可以新增简历、编辑简历、删除简历；</p><p>（4）单位管理：用户可以登记、编辑自己所在单位的信息；</p><p>（5）发布招聘：用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。</p><h3 id="3-1-7-校园服务"><a href="#3-1-7-校园服务" class="headerlink" title="3.1.7 校园服务"></a>3.1.7 校园服务</h3><p>（1）校内服务：包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；</p><p>（2）招生就业服务：包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。</p><h3 id="3-1-8-个人中心"><a href="#3-1-8-个人中心" class="headerlink" title="3.1.8 个人中心"></a>3.1.8 个人中心</h3><p>（1）个人资料：基本资料、 详细资料、 工作信息、 头像设置；</p><p>（2）账户设置：密码修改、邮箱绑定； </p><p>（3）我的班级：用户加入的班级相关信息；</p><p>（4）我的论坛：用户早论坛的相关信息；</p><p>（5）我的招聘：用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>3.2 系统功能设计</p><p>3.2.1 新闻中心</p><p>新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心功能如图3-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图3-1 新闻中心功能图</p><p>3.2.2 班记录</p><p>班级录功能包括:班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班级录功能如图3-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图3-2 班记录功能图</p><h3 id="3-2-3-校友组织"><a href="#3-2-3-校友组织" class="headerlink" title="3.2.3 校友组织"></a>3.2.3 校友组织</h3><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。校友组织功能如图3-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image021.png" alt="img"></p><p>图3-3 校友组织功能功能图</p><p>3.2.4 校友论坛</p><p>校友论坛：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子。校友论坛功能如图3-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image023.jpg" alt="img"></p><p>图3-4 校友论坛功能图</p><h3 id="3-2-5-职业招聘"><a href="#3-2-5-职业招聘" class="headerlink" title="3.2.5 职业招聘"></a>3.2.5 职业招聘</h3><p>职位招聘：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘功能如图3-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image025.jpg" alt="img"></p><p>图3-5 职业招聘功能图</p><h3 id="3-2-6-校园服务"><a href="#3-2-6-校园服务" class="headerlink" title="3.2.6 校园服务"></a>3.2.6 校园服务</h3><p>校园服务包括：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务功能如图3-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image027.jpg" alt="img"></p><p>图3-6 校园服务功能图</p><h3 id="3-2-7-个人中心"><a href="#3-2-7-个人中心" class="headerlink" title="3.2.7 个人中心"></a>3.2.7 个人中心</h3><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户在论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心功能如图3-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image029.jpg" alt="img"></p><p>图3-7 个人中心功能图</p><p>3.3 数据库设计</p><p>3.3.1 概念模型设计</p><p>根据系统总体设计和功能设计，设计出系统涉及到的实体信息，包括用户实体，个人信息实体，职业信息实体，简历实体，地址实体，留言实体，评论回复实体，年级实体，组织实体，活动实体，相册实体，图片实体，信息实体，评论实体，分享实体，收藏实体，订阅实体，招聘信息实体，招聘单位实体，附件实体，角色实体，权限实体，字典实体，字典数据实体，各实体信息的概念模型如下所示。</p><p>（1）用户实体模型如图3-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image031.jpg" alt="img"></p><p>图3-8 用户实体模型</p><p>（2）职业信息实体模型如图3-9所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image033.jpg" alt="img"></p><p>图3-9 职业信息实体模型</p><p>（3）简历实体模型如图3-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image035.jpg" alt="img"></p><p>图3-10 简历实体模型</p><p>（4）地址实体模型如图3-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image037.jpg" alt="img"></p><p>图3-11 地址实体模型</p><p>（5）留言实体模型如图3-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image039.jpg" alt="img"></p><p>图3-12  留言实体模型</p><p>（6）评论回复实体模型如图3-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image041.jpg" alt="img"></p><p>图3-13  回复实体模型</p><p>（7）年级实体模型如图3-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image043.jpg" alt="img"></p><p>图3-14 年级实体</p><p>（8）组织实体模型如图3-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image045.jpg" alt="img"></p><p>图3-15  组织实体模型</p><p>（9）相册实体模型如图3-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image047.jpg" alt="img"></p><p>图3-16 相册实体模型</p><p>（10）活动实体模型如图3-17所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image049.jpg" alt="img"></p><p>图3-17 活动实体模型</p><p>（11）字典数据实体模型如图3-18所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image051.jpg" alt="img"></p><p>图3-18 字典数据实体模型</p><p>（12）图片实体模型如图3-19所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image053.jpg" alt="img"></p><p>图3-19 图片实体模型</p><p>（13）信息实体模型如图3-20所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image055.jpg" alt="img"></p><p>图3-20 信息实体模型</p><p>（14）评论实体模型如图3-21所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image057.jpg" alt="img"></p><p>图3-21 评论实体模型</p><p>（15）分享实体模型如图3-22所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image059.jpg" alt="img"></p><p>图3-22 分享实体模型</p><p>（16）收藏实体模型如图3-23所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image061.jpg" alt="img"></p><p>图3-23 收藏实体模型</p><p>（17）订阅实体模型如图3-24所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image063.jpg" alt="img"></p><p>图3-24 订阅实体模型</p><p>（18）招聘信息实体模型如图3-25所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image065.jpg" alt="img"></p><p>图3-25 招聘实体模型</p><p>（19）招聘单位实体模型如图3-26所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image067.jpg" alt="img"></p><p>图3-26 招聘单位实体模型</p><p>（20）附件实体模型如图3-27所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image069.jpg" alt="img"></p><p>图3-27 附件实体模型</p><p>（21）角色实体模型如图3-28所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image071.jpg" alt="img"></p><p>图3-28  角色实体模型</p><p>（22）权限实体模型如图3-29所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image073.jpg" alt="img"></p><p>图3-29  权限实体模型</p><p>（23）字典实体模型如图3-30所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image075.jpg" alt="img"></p><p>图3-30 字典表模型</p><p>（24）简历投递实体模型如图3-31所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image077.jpg" alt="img"></p><p>图3-31 简历投递模型</p><p>3.3.2 逻辑结构设计</p><p>根据系统的概念模型设计，设计出适应大多数数据库的数据表逻辑结构，共设计31张表，如表3-1所示。</p><p>表3-1 数据表汇总</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>1</td><td>user</td><td>用户表</td></tr><tr><td>2</td><td>user_info</td><td>用户个人信息表</td></tr><tr><td>3</td><td>user_job</td><td>用户工作信息表</td></tr><tr><td>4</td><td>user_resume</td><td>用户个人简历</td></tr><tr><td>5</td><td>resume_post</td><td>简历投递信息</td></tr><tr><td>6</td><td>user_origin</td><td>用户加入组织信息表</td></tr><tr><td>7</td><td>user_role</td><td>用户角色设定表</td></tr><tr><td>8</td><td>role</td><td>角色表</td></tr></tbody></table><p>续表3-1</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>9</td><td>role_right</td><td>角色权限分配表</td></tr><tr><td>10</td><td>right</td><td>权限表</td></tr><tr><td>11</td><td>Address</td><td>地址信息表</td></tr><tr><td>12</td><td>message</td><td>消息表</td></tr><tr><td>13</td><td>reply</td><td>回复表</td></tr><tr><td>14</td><td>grade</td><td>年级表</td></tr><tr><td>15</td><td>origin</td><td>组织表</td></tr><tr><td>16</td><td>activity</td><td>活动表</td></tr><tr><td>17</td><td>album</td><td>相册信息表</td></tr><tr><td>18</td><td>album_image</td><td>相册图片信息表</td></tr><tr><td>19</td><td>image</td><td>图片信息表</td></tr><tr><td>20</td><td>information</td><td>信息表</td></tr><tr><td>21</td><td>comment</td><td>评论表</td></tr><tr><td>22</td><td>share</td><td>信息分享表</td></tr><tr><td>23</td><td>collect</td><td>信息收藏表</td></tr><tr><td>24</td><td>subscription</td><td>信息订阅表</td></tr><tr><td>25</td><td>recruit</td><td>招聘信息表</td></tr><tr><td>26</td><td>recruit_unit</td><td>招聘单位信息表</td></tr><tr><td>27</td><td>attachment</td><td>附件信息表</td></tr><tr><td>28</td><td>attachment_info</td><td>信息附件关系表</td></tr><tr><td>29</td><td>dictionary</td><td>数据字典表</td></tr><tr><td>30</td><td>dictionary_data</td><td>数据字典数据表</td></tr><tr><td>31</td><td>log</td><td>日志表</td></tr></tbody></table><p>表3-2 用户表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>account</td><td>char(20)</td><td>用户名</td><td></td></tr><tr><td>is_admin</td><td>char(1)</td><td>管理员标识</td><td></td></tr><tr><td>email</td><td>varchar(20)</td><td>用户邮箱</td><td></td></tr><tr><td>password</td><td>char(32)</td><td>用户密码</td><td></td></tr><tr><td>head_image_id</td><td>int(8)</td><td>头像图片标识</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>用户注册时间</td></tr></tbody></table><p>续表3-2</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>state</td><td>char(5)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-3 用户个人信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_info_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>ture_name</td><td>Nvarchar(20)</td><td>用户名</td><td></td></tr><tr><td>age</td><td>char(5)</td><td>年龄</td><td></td></tr><tr><td>sex</td><td>char(5)</td><td>性别</td><td></td></tr><tr><td>birthday</td><td>datetime</td><td>生日</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>phone</td><td>varchar(20)</td><td>联系电话</td><td></td></tr><tr><td>email</td><td>varchar(50)</td><td>邮箱</td><td></td></tr><tr><td>qq</td><td>varchar(20)</td><td>QQ</td><td></td></tr><tr><td>microblog</td><td>varchar(50)</td><td>微博</td><td></td></tr><tr><td>wechat</td><td>varchar(20)</td><td>微信</td><td></td></tr><tr><td>address</td><td>Nvarchar(50)</td><td>住址</td><td></td></tr><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>表3-4 职业信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>job_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>job_name</td><td>Varchar(20)</td><td>职业名称</td><td></td></tr><tr><td>job_unit</td><td>Varchar(20)</td><td>就业单位</td><td></td></tr><tr><td>date_start</td><td>date</td><td>就职时间</td><td></td></tr><tr><td>date_end</td><td>date</td><td>离职时间</td><td></td></tr><tr><td>job_desc</td><td>varhar(200)</td><td>职业简述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>工作登记时间</td><td></td></tr><tr><td>user_id</td><td>int</td><td>就业者</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录的状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>记录状态</td></tr></tbody></table><p>表3-5 个人简历表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>resume_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>resume_title</td><td>varchar(20)</td><td>简历标题</td><td></td></tr><tr><td>prof_type</td><td>vatchar(20)</td><td>职业类别</td><td></td></tr><tr><td>exp_salary</td><td>varchar(10)</td><td>期望薪资</td><td></td></tr><tr><td>name</td><td>varchar(10)</td><td>姓名</td><td></td></tr><tr><td>sex</td><td>char(1)</td><td>性别</td><td></td></tr><tr><td>domicile</td><td>varchar(20)</td><td>现在居住地</td><td></td></tr><tr><td>contact</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>userId</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>statusValue</td><td>char(5)</td><td>状态值</td><td>a     x       t</td></tr></tbody></table><p>表3-6 简历投递表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruit_id</td><td>int</td><td>招聘信息id</td><td>外键</td></tr><tr><td>resume_id</td><td>int</td><td>简历id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>投递日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>投递状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-7 角色权限配置表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>role_id</td><td>int</td><td>角色id</td><td>外键</td></tr></tbody></table><p>表3-8 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>role_name</td><td>varchar(20)</td><td>角色名称</td><td></td></tr><tr><td>role_value</td><td>varchar(20)</td><td>角色类型</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-9 角色权限表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>角色id</td><td>自动增长</td></tr><tr><td>right_id</td><td>int</td><td>权限id</td></tr></tbody></table><p>表3-10 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>right_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>right_name</td><td>varchar(20)</td><td>权限名称</td><td></td></tr><tr><td>right_pos</td><td>int</td><td>权限位</td><td></td></tr><tr><td>right_code</td><td>bigint</td><td>权限码</td><td></td></tr><tr><td>right_URL</td><td>varchar(50)</td><td>权限路径</td><td></td></tr><tr><td>is_public</td><td>char</td><td>是否是公共资源</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-11 地址表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>addr_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>province</td><td>varchar(10)</td><td>省份</td><td></td></tr><tr><td>city</td><td>varchar(10)</td><td>市</td><td></td></tr><tr><td>district</td><td>varchar(10)</td><td>区</td><td></td></tr><tr><td>detail</td><td>varchar(50)</td><td>详细地址</td><td></td></tr><tr><td>zip_code</td><td>char(6)</td><td>邮编</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态值</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-12 留言表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>msg_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>标题</td><td></td></tr><tr><td>content</td><td>varchar(500)</td><td>留言内容</td><td></td></tr><tr><td>sender_id</td><td>int(8)</td><td>发送者id</td><td></td></tr><tr><td>receiver_id</td><td>int(8)</td><td>接收者id</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>发表日期</td></tr></tbody></table><p>表3-13 留言回复表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>reId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>回复内容</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>回复时间</td><td></td></tr><tr><td>msg_id</td><td>int(11)</td><td>被回复的留言的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>回复人id</td><td>外键</td></tr></tbody></table><p>表3-14 年级表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>grade_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>grade_value</td><td>char(4)</td><td>年份</td><td></td></tr><tr><td>class_num</td><td>int(4)</td><td>班级数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-15 组织信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>origin_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>origin_name</td><td>varchar(20)</td><td>组织编号</td><td></td></tr><tr><td>origin_no</td><td>varchar(20)</td><td>组织名</td><td></td></tr><tr><td>origin_type</td><td>varchar(20)</td><td>组织类型</td><td></td></tr><tr><td>origin_desc</td><td>varchar(500)</td><td>组织简介</td><td></td></tr><tr><td>origin_grade</td><td>varchar(4)</td><td>组织年级</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>组织人员数量</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>组织成立的年份</td><td></td></tr><tr><td>mgr_id</td><td>int</td><td>组织的管理员id</td><td>外键</td></tr><tr><td>creator_id</td><td>int</td><td>组织创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-16 校友活动表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>act_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>act_name</td><td>varchar(20)</td><td>活动名称</td></tr></tbody></table><p>续表3-16</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>start_time</td><td>datetime</td><td>活动开始时间</td><td></td></tr><tr><td>end_time</td><td>datetime</td><td>活动结束时间</td><td></td></tr><tr><td>act_place</td><td>varchar(50)</td><td>活动地点</td><td></td></tr><tr><td>act_desc</td><td>text</td><td>活动描述</td><td></td></tr><tr><td>act_num</td><td>int(4)</td><td>活动人数</td><td></td></tr><tr><td>sign_num</td><td>int(4)</td><td>活动已报名人数</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣数</td><td></td></tr><tr><td>leader_name</td><td>varchar(10)</td><td>负责人姓名</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>负责人联系方式</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>活动所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>活动发起人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-17 相册表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>album_name</td><td>varchar(20)</td><td>相册名名</td><td></td></tr><tr><td>albm_desc</td><td>varchar(200)</td><td>相册描述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣的人数</td><td></td></tr><tr><td>cover_image</td><td>int(11)</td><td>相册封面标识</td><td></td></tr><tr><td>origin_id</td><td>int</td><td>相册所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>相册创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-18 相册图片表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int</td><td>相册id</td><td>外键</td></tr><tr><td>image_id</td><td>int</td><td>图片id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-19 图片信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>image_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>image_name</td><td>varchar(32)</td><td>图片名</td><td></td></tr><tr><td>is_remote</td><td>char(1)</td><td>远程文件</td><td></td></tr><tr><td>image_size</td><td>varchar(5)</td><td>图片大小</td><td></td></tr><tr><td>image_path</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>image_type</td><td>varchar(20)</td><td>图片类型</td><td></td></tr><tr><td>is_thumb</td><td>char(1)</td><td>缩略图标识</td><td></td></tr><tr><td>thumb_path</td><td>varchar(255)</td><td>缩略图路径</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>图片状态</td></tr></tbody></table><p>表3-20 信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>info_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>info_title</td><td>varchar(50)</td><td>信息标题</td><td></td></tr><tr><td>content</td><td>text</td><td>内容</td><td></td></tr><tr><td>theme</td><td>varchar(2)</td><td>主题</td><td></td></tr><tr><td>thumb_image</td><td>varchar(255)</td><td>图文信息缩略图</td><td></td></tr><tr><td>views</td><td>int(4)</td><td>浏览量</td><td></td></tr><tr><td>comments</td><td>int(4)</td><td>评论数</td><td></td></tr><tr><td>shares</td><td>int(4)</td><td>分享次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>信息类型</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>信息所属组织id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-21 评论表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>comment_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>评论内容</td></tr></tbody></table><p>续表3-21</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>评论日期</td><td></td></tr><tr><td>user_id</td><td>int</td><td>评论人</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>评论的信息id</td><td>外键</td></tr></tbody></table><p>表3-22 信息转发表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>转发时间</td><td></td></tr><tr><td>info_id</td><td>int(11)</td><td>被转发的信息id</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>转发人id</td><td>外键</td></tr><tr><td>where</td><td>varchar(20)</td><td>转发方式</td></tr></tbody></table><p>表3-23 收藏表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>collect_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>收藏时间</td><td></td></tr><tr><td>info_id</td><td>int</td><td>收藏信息的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>收藏人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-24 信息订阅表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>sub_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>订阅时间</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>订阅信息类型</td><td></td></tr><tr><td>is_email</td><td>char(1)</td><td>邮箱订阅标识</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-25 招聘信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruitId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>招聘标题</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>续表3-25</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>end_time</td><td>datetime</td><td>招聘结束时间</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>招聘人数</td><td></td></tr><tr><td>resumes</td><td>int(4)</td><td>简历投送数</td><td></td></tr><tr><td>leader_name</td><td>varchar(20)</td><td>联系人</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>pos_name</td><td>varchar(20)</td><td>职位名称</td><td></td></tr><tr><td>pos_desc</td><td>varchar(500)</td><td>职位描述</td><td></td></tr><tr><td>benefit</td><td>varchar(50)</td><td>职位福利</td><td></td></tr><tr><td>work_place</td><td>varchar(50)</td><td>工作地点</td><td></td></tr><tr><td>unit_id</td><td>int(8)</td><td>招聘单位id</td><td></td></tr><tr><td>user_id</td><td>int</td><td>发布人id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-26 招聘单位信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>unit_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>unit_name</td><td>varchar(30)</td><td>招聘单位名称</td><td></td></tr><tr><td>industry</td><td>varchar(30)</td><td>单位所属行业</td><td></td></tr><tr><td>property</td><td>varchar(20)</td><td>单位性质</td><td></td></tr><tr><td>scale</td><td>varchar(20)</td><td>单位规模</td><td></td></tr><tr><td>unit_desc</td><td>text</td><td>单位简介</td><td></td></tr><tr><td>unit_web</td><td>varchar(30)</td><td>单位网站</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>发布者id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-27 附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>atta_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>atta_name</td><td>varchar(32)</td><td>附件文件名</td><td></td></tr><tr><td>atta_type</td><td>varchar(20)</td><td>附件类型</td></tr></tbody></table><p>续表3-27</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>is_romote</td><td>char(1)</td><td>远程文件标识</td><td></td></tr><tr><td>file_path</td><td>varchar(255)</td><td>文件路径</td><td></td></tr><tr><td>file_size</td><td>char(10)</td><td>文件大小</td><td></td></tr><tr><td>dowmloads</td><td>int(4)</td><td>文件下载次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td></tr></tbody></table><p>表3-28 信息附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>attachment_id</td><td>int</td><td>附件id</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>信息id</td><td>外键</td></tr></tbody></table><p>表3-29 数据字典表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>dict_value</td><td>varchar(20)</td><td>字典值</td><td>主键</td></tr><tr><td>dict_name</td><td>varchar(50)</td><td>字典名</td><td></td></tr><tr><td>remark</td><td>varchar(200)</td><td>字典备注</td></tr></tbody></table><p>表3-30 数据字典数据表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(8)</td><td>数据id</td><td>主键</td></tr><tr><td>dict_value</td><td>varchar(20)</td><td>数据字典</td><td>外键</td></tr><tr><td>dictdata_name</td><td>varchar(50)</td><td>数据名</td><td></td></tr><tr><td>dictdata_value</td><td>varchar(20)</td><td>数据值</td><td></td></tr><tr><td>is_fixed</td><td>char(1)</td><td>固定标识</td><td></td></tr><tr><td>is_cancel</td><td>char(1)</td><td>数据取消标识</td><td></td></tr><tr><td>parent_id</td><td>int(8)</td><td>父节点</td></tr></tbody></table><p>表3-31 日志表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>log_id</td><td>int(11)</td><td>日志id</td><td>主键</td></tr><tr><td>operator</td><td>varchar(100)</td><td>操作员</td><td></td></tr><tr><td>oper_name</td><td>varchar(100)</td><td>操作名称</td><td></td></tr><tr><td>oper_params</td><td>varchar(255)</td><td>操作参数</td><td></td></tr><tr><td>oper_result</td><td>varchar(100)</td><td>操作结果</td><td></td></tr><tr><td>oper_time</td><td>datetime</td><td>操作时间</td></tr></tbody></table><p>表3-32 用户组织表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>origin_id</td><td>int</td><td>组织id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>加入时间</td><td></td></tr><tr><td>state</td><td>varchar(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>4 系统详细设计</p><p>4.1 班级录</p><p>（1） 功能实现</p><p>班级录主要实现给用户提供班级空间的功能，班级录总览界面按年级信息统计并展示院校当前班级的信息，按年级、校友姓名、班级专业条件查询班级并且能够在侧边栏按班级人数对班级进行热度排名，展示当前用户加入的班级，最近加入班级录的校友等信息。</p><p>（2） 实现方法</p><p>点击班级录标签页，请求class.action访问到Class控制器中的index()方法，index()调用ClassService业务逻辑类中的getAll()，查询年级信息，返回List<grade>类型的数据，添加到视图模型model中。Grade类对象中包含年级、班级个数等信息，index()方法跳转到class-index.jsp页面，展示年纪列表信息，并将年级列表加载到条件查询框中的下拉框中。页面加载时引入javascript，使用$.post()方法请求侧边栏数据。侧边栏数据包括班级录信息统计、班级排名、当前用户加入的班级、最近加入的校友等信息。在条件查询框中选择年级、填入校友姓名或专业关键字可以查询相关班级，提交查询时请求Class控制器中的queryClass()方法，传递grade、queryStr参数。queryClass()调用ClassService()业务逻辑类中的queryClasses()方法,queryClasses()方法的参数为Page&lt;&gt;类型的对象、grade、queryStr，queryClasses()执行查询,并返回 List<map<string,object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，queryClass()返回class-query.jsp页面。jsp页面将班级信息列表展示出来，并追加页码执行翻页功能。</map<string,object></grade></p><p>（3） 界面设计</p><p>班级录总览界面如图4-1所示，总体分为导航栏、年级列表和侧边信息栏。班级查询界面如图4-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图4-1 班级录总览界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图4-2 班级查询界面</p><p>4.1.1 班级首页</p><p>（1）功能实现</p><p>班级主页主要对班级进行一些简介，并展示班级的一些近期信息，如班级简介、班级最新动态、班级最新照片、班级管理员信息、当前用户信息以及当前用户是否加入班级等。班级简介为班级实体中描述班级的字段，包括班级名称、班级人数、班级简介、班级所属年级。班级最新动态是班级动态按照日期降序排列后，选择最新的几条记录显示。班级最新照片是班级成员上传到班级相册照片，按照上传日期降序排列后选择最新的几张进行展示。班级管理员信息展示管理员的头像、姓名、简介等信息。当前用户信息展示当前用户的头像、姓名、简介、是否加入班级。</p><p>（2）实现方法</p><p>点击班级名称超链接，请求classroom.action，并传入班级id参数，Classroom控制器中index()方法接收参数,调用业务逻辑类ClassService中的classIndex()、classInfo()、classImage()、getAllMemberId()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()查询班级的动态消息，动态消息按照日期降序排列，以List<map<string, object>&gt;类型返回日期最新的几条记录，赋值给infoList,将infoList添加到视图模型model中。classImage()方法查询班级成员上传的照片，照片按照上传日期降序排列，以List<map<string, object>&gt;类型返回上传日期最新的几条记录，赋值给imageList，将imageList添加到视图模型model中。getAllMemberId()查询所有班级成员的id，以List&lt; Integer&gt;类型返回，赋值给classIds，并将classIds添加到视图模型model中。Classroom控制器方法index()跳转到classroomdex.jsp页面，将classroom、infoList、imageList中的信息遍历展示在jsp页面中,将SESSION_USER环境变量中的当前用户信息展示为当前用户信息，并将SESSION_USER中的userId与classIds中的数据进行比较，如果userId存在与classIds中,则显示用户已经加入班级，否则显示加入班级按钮。Classroom-index.jsp加载的时候引入javascript，使用$.post()方法请求班级官员信息，并返回到jsp页面进行展示。</map<string,></map<string,></string,></p><p>（3）界面设计</p><p>班级主页界面设计如图4-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图4-3 班级主页界面</p><p>4.1.2 班级动态</p><p>1.班级动态列表</p><p>（1） 功能实现</p><p>班级动态列表展示班级成员发布的动态信息，查询以当前班级id和信息类型作为条件查询信息，并进行分页处理，将查询到的信息分页展示。</p><p>（2） 实现方法</p><p>点击班级动态标签页，请求classroom/info.action，传递参数classId，Classroom控制器中的info()方法接收参数，info()调用ClassService业务逻辑类中的classIndex()、classInfo()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()方法参数为Page&lt;&gt;类型数据、班级id和信息类型（数据字典中的信息类型数据），方法返回List<map<string, object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，info()返回classroom-info.jsp页面。jsp页面将班级信息、班级动态信息列表展示出来，并追加页码执行翻页功能。</map<string,></string,></p><p>（3） 界面设计</p><p>班级动态列表界面如图4-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图4-4 班级动态界面</p><p>2.班级动态详情</p><p>（1）功能实现</p><p>班级动态详情实现动态消息的详情展示，作者信息，消息评论区，以及班级相关动态和作者相关动态。班级动态消息详情包括图文信息、发布时间、浏览量、喜欢数、评论数，消息加载时动态消息的浏览量自增1。作者信息栏展示作者的头像、名字、简介等信息。评论区默认加载10条评论，点击加载更多评论按钮则再次加载10条评论，知道所有评论被加载完毕，用户可以在评论区发表评论。页面加载时，通过ajax方式将班级相关动态和作者相关动态加载到侧边栏。</p><p>（2）实现方法</p><p>点击消息详情按钮，请求classroom/infoDetail.action，传递班级id和消息id，Classroom控制器中的infoDetail()方法接收参数，调用ClassroomService业务类中的classInfoDetail()方法查询动态信息详情和作者信息，返回Map<string, object>类型的数据，赋值给info，将info添加到视图模型model中。infoDetail()返回classroom-info-detail.jsp页面，将info中的信息展示，并引入javascript使用ajax方式加载评论和侧边栏信息。</string,></p><p>（3）界面设计</p><p>班级动态信息详情界面和评论区界面如图4-5和图4-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图4-5 班级动态详情界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图4-6 班级动态消息评论区界面</p><p>4.1.3 班级通讯录</p><p>（1）功能实现</p><p>班级通讯录五章表关联查询班级成员的用户信息、所在地、电话、邮箱、QQ、微信等通讯信息，分页显示，并且支持下载班级通讯录信息，以Excel文件形式下载到本地。</p><p>（2）实现方法</p><p>点击通讯录标签页，请求classroom/directory.action，传递参数班级id，Classroom控制器中的directory()方法接收参数，并调用ClassrommService业务类中的classDirector()方法。classDirectory()关联user表、user_origin表、origin表、user_info表、image表，查询用户信息、用户通讯信息，以List<map<string, object>&gt;的形式返回通讯录列表，赋值给分页对象page中的beanList，并将page添加到视图模型model中。Directory()方法跳转classroom-directory.jsp页面，将beanList里的通讯录信息遍历出来。</map<string,></p><p>（3）界面设计</p><p>班级通讯录的界面设计如图4-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图4-7 班级通讯录界面</p><p>4.1.4 班级相册</p><p>（1）功能实现</p><p>在班级相册中，班级成员可以查看相册、新建相册、上传图片、删除图片、设置相册封面、下载图片。上图图片支持批量上传，相册封面可以选择相册内的任意图片作为封面。</p><p>（2）实现方法</p><p>点击班级相册标签页，请求classroom/album.action，传递参数班级id，Classroom控制器中的album()方法接收参数，调用AlbumService业务类中的getAlbums()方法，以List<album>形式返回相册信息，赋值给分页对象page的beanList属性，返回classroom-album.jsp界面，将相册列表分页显示。</album></p><p>（3）界面设计</p><p>班级相册界面设计如图4-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图4-8 班级相册界面</p><p>4.2 职业招聘</p><p>4.2.1 发布招聘</p><p>（1）功能实现</p><p>发布招聘时，系统判断当前用户是否已经登记公司信息，如果没有登记则跳转公司信息登记界面，否则跳转招聘登记界面。在招聘登记界面填写招聘信息后提交审核，后台管理员可以审核、置顶招聘。</p><p>（2）实现方法</p><p>点击发布招聘按钮，请求recruit/addRecruit.action，Recruit控制器中的addRecruit()方法接收请求，首先调用UnitService业务类中的getUnitsByUserId()方法查询当前用户的公司信息。如果公司信息，则返回redirect:/unit/addUnit.action，重定向到公司信息登记界面，否则addRecruit()将招聘常量positionSalary、positionBenefit、positionProf添加到视图模型model中，跳转至招聘信息登记界面。招聘信息表单填写完成后，提交至recruit/addRecruitSubmit.action，Recruit控制器调用RecruitService业务类中的createRecruit()方法，保存招聘信息，等待审核。</p><p>（3）界面设计</p><p>招聘单位信息登记界面设计如图4-9所示，招聘信息登记界面如图5-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图4-9 招聘单位登记界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图4-10 招聘信息登记界面</p><p>4.2.2 查询招聘</p><p>（1）功能实现</p><p>招聘查询可以招聘信息标题、招聘单位名称、职位信息、工作地点等查询招聘信息，并将查询到的记录分页显示。</p><p>（2）实现方法</p><p>点击职业招聘按钮，请求recruit.action，传递查询条件queryStr，Recruit控制器中的indexRecruit()方法，调用RecruitService业务类中的queryRecruit()方法执行查询，返回分页对象page，跳转到recruit-index.jsp页面，将招聘信息遍历出来并追加页码，执行翻页功能。</p><p>（3）界面设计</p><p>招聘查询界面如图4-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image022.jpg" alt="img"></p><p>图4-11 招聘查询界面</p><p>4.2.3 招聘详情</p><p>（1）功能实现</p><p>招聘详情展示招聘的详细信息，包括招聘单位信息、职位信息、联系人信息，并且能够加载此招聘信息的申请记录以及本招聘单位的相关招聘信息。</p><p>（2）实现方法</p><p>点击招聘信息标题超链接，请求recruit/detailRecruit.action，传递招聘信息id，Recruit控制器中的detailRecruit()方法接收参数，调用RecruitService业务类中的getDetailRecruit()、loadResumesToPost()、postResumeRecord()、loadOtherRecruits()等方法。getDetailRecruit()方法查询招聘的详细信息，返回Map<string,object>类型的数据，并添加到视图模型对象model中。postResumeRecord()方法关联recruit_post表、user表、image表查询出对此招聘信息投递简历的用户列表，返回List<map<string,object>&gt;类型的数据，并添加到视图模型对象中。LoadOtherRecruits()方法关联recruit_post表、recruit表，查询出此招聘单位的相关招聘信息，返回List<map<>&gt;类型的数据，并添加到数图模型对象model中。</map<></map<string,object></string,object></p><p>（3）界面设计</p><p>招聘查询界面如图4-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image024.jpg" alt="img"></p><p>图4-12 招聘查询界面</p><p>4.2.4 投递简历</p><p>（1）功能实现</p><p>在简历详情界面中，有简历投递选项，用户选择自己的简历投送至当前招聘信息。如果当前用户没有简历，则可以选择创建简历。</p><p>（2）实现方法</p><p>如果用户已经申请当前职位，则显示已申请职位，否则显示申请职位按钮。点击申请职位按钮，页面弹出简历投递模态框，通过c标签将用户简历列表加载到下拉框中，选择一个简历，点击确认申请按钮，请求my/resume/postResume.action，传递招聘信息id，用户简历id，用户信息控制器中的postResume()接收参数，并调用ResumeService服务类中的postResume()方法，保存简历投递信息。</p><p>（3）界面设计</p><p>简历投递界面如图4-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image026.jpg" alt="img"></p><p>图4-13 简历投递界面</p><p>4.3 校友论坛</p><p>4.3.1 论坛广场</p><p>（1）功能实现</p><p>论坛广场分页展示校友论坛的所有帖子，可以按照帖子标题、帖子主题和帖子作者进行模糊查询，并按照帖子的热度进行排名。</p><p>（2）实现方法</p><p>点击校友论坛，请求forum.action，Forum控制器中的index()方法接收请求，调用PostService中的queryPosts()方法，按日期降序排列并分页查询帖子，返回List<map<string,object>&gt;类型的数据，赋值给分页对象page，将page添加到视图模型对象model中。返回forum-index.jsp页面，将page中beanList的帖子信息分页显示。</map<string,object></p><p>（3）界面设计</p><p>论坛广场界面设计如图4-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image028.jpg" alt="img"></p><p>图4-14 校友论坛广场界面</p><p>4.3.2 发布新帖</p><p>（1）功能实现</p><p>用户可以在校友论坛广场发布新贴，帖子会被推送到广场并可以被搜索。</p><p>（2）实现方法</p><p>点击发布新贴按钮，请求post/add.action，Post控制器中的addPost()方法接收请求，将环境变量themeList添加到视图模型对象model中，加载帖子发布界面。在帖子发布界面填写post表单并提交，post信息存储至数据库，重新加载招聘广场即可看到新发布的帖子。</p><p>（3）界面设计</p><p>发布新贴界面如图4-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image030.jpg" alt="img"></p><p>图4-15 发布新贴界面</p><p>4.3.3 帖子详情</p><p>（1）功能实现</p><p>用户可以查看帖子详情，包括帖子内容、浏览量、评论量、喜欢数、作者信息，在帖子内容下方有评论区，加载评论内容或发表评论。在详情界面侧边栏显示相关主题的帖子和作者相关的帖子。</p><p>（2）实现方法</p><p>用户点击帖子标题超链接，请求post/detail.action，Post控制器中的detail()方法接收请求，调用PostService业务类中的postDetail()方法查询帖子详情，将返回的数据添加到视图模型对象model中，返回jsp页面显示帖子内容。页面加载完毕后，通过jquery的$.post()方法请求post/commentList.action和post/outLine.action加载评论区内容和侧边栏内容，Post控制器调用PostService业务类中的getOtherPost()f方法和CommentService业务类中的dynamicComment()方法查询信息，将返回的信息追加到页面，完成动态加载评论的功能。</p><p>（3）界面设计</p><p>帖子详情界面设计如图4-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image032.jpg" alt="img"></p><p>图4-16 帖子详情界面</p><p>结论</p><p>经过持久层、数据访问层、业务逻辑层、系统控制层、视图层的设计和实现，本系统基本实现了对班级管理，用户可以加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。系统已经能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间。校友论坛为广大校友提供了更加宽阔的平台，促进校友们之间的交流。与此同时，通过职业招聘模块、校园服务模块，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。因此，此系统能够在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面带来巨大效益。</p><p>当然，本系统还不够完善，有一部分功能尚未实现。新闻中心应该具备热文推送和邮箱订阅功能，这样才能让校友更好的了解母校的动态消息。  网站内的消息应该支持富文本格式，这样可以使消息更具可读性和吸引力，同时富文本编辑器可以让用户更方便地编写内容。在消息发布和图片上传时，图片经过剪辑之后才可以更好地展示和存储。由于个人能力的限制，网站的邮箱订阅功能、富文本编辑存储功能和图片剪辑功能并没有实现。这些功能对本系统也显得尤为重要，因此以后必须实现。</p><p>经过对校友录系统的设计和实现，我对MVC模式有了更深层次的理解和应用。同时，我也学会许多新的框架和工具，包括SpringMVC、MyBatis、EhCache、Bootstrap、AmazeUI等框架，Maven、Git、IntelliJ IDEA等工具。因此，我相信在以后面临的工作和项目中本系统对我有很大帮助。</p><p>致谢</p><p>本论文的编写和修改是在胡局新老师悉心指导下完成的。胡老师有着严谨有致的教学态度，兢兢业业的工作作风，诲人不倦的高尚师德。在胡老师的每一堂课上，我都能感受到他的格物致知、敬业乐群，这也正是我在专业知识学习中保持热情的关键所在。在临近毕业的这段时间，胡老师也依然百忙之中为我讲解技术、指导论文，其崇高的责任心将是我受益一生的宝贵财富。在此，谨向我可敬可爱的胡老师致以诚挚的谢意。</p><p>不知不觉，四年的大学生活如白驹过隙般逝去，但这宝贵的四年无疑会在而后的回忆里细水长流。在徐州工程学院四年时间里我有过喜悦，有过沮丧，也学习了很多专业知识，参加了很多活动和比赛，获得了飞思卡尔智能汽车竞赛国赛奖项，电子设计大赛省级奖项。没有志同道合的校友，没有对我谆谆教诲的辅导员，没有对我坚定支持的母校，我不可能取得这些成就，也很难在低谷时战胜困难。因此，我想对帮助我的校友，关爱我的辅导员，坚定支持我的母校致以崇高的谢意。</p><p>同时，我也要感谢生我育我的父母。我的家庭生活并非想象中那么美好，父母的艰辛也许我无法体会，但是即使再困难，父母都会给予我精神、物质上的支持。父母不曾亏待我，我又能拿什么面对父母。唯有不懈的努力，让自己成功的速度快于他们老去的速度，我才能回报他们对我的爱。对于父母所给予我的这一切，我会用生命去珍惜，用感恩去呵护。</p><p>最后，我想再一次向精心教导我的胡老师，关爱我的辅导员，志同道合的校友，给予我支持的父母表达我的感恩之情，没有你们就没有如今的我，谢谢你们伴我走过青春的这段旅途，谢谢！</p><p>参考文献</p><p>[1] 盛仲飙 乔道迹.基于Java的通讯软件设计与实现[J].福建电脑,2015</p><p>[2] 陈衍席.基于Java网络聊天系统的设计及实现研究[J].通讯世界,2016</p><p>[3] 钱雪忠著,数据库原理与应用（第二版）[M].北京邮电大学出版社,2007</p><p>[4] 唐汉明 翟振兴 关宝军.深入浅出MySQL数据库开发优化与管理维护第2版[M].人民邮电出版社,2014</p><p>[5] 吴海星.Java程序员修炼之道[M].人民邮电出版社,2013</p><p>[6] 缪忠剑.基于Spring的集成化Web开发平台的研究与实现[M].北京机械工业出版社,2013</p><p>[7] 宋佳颖,基于Java的邮件接收系统分析[J].无线互联科技,2015</p><p>[8] 耿祥义,张跃平著.Java设计模式[M].清华大学出版社,2009</p><p>[9] 彭晓青,MVC模式的应用架构系统的研究与实现[J].电子工业出版社,2013</p><p>[10] 赵争东,基于Java的数据库应用框架的研究设计和探索[J].信息系统工程,2015</p><p>[11] 软件开发技术联盟著,Java Web开发实战[M].清华大学出版社,2013</p><p>[12] 贾蓓.镇明敏.杜磊著,Java Web整合开发实战[M].清华大学出版社,2013</p><p>[13] 李运莉著,web数据库应用系统性能优化[M].北京人民邮电出版社,2011</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://blackist.org/categories/Spring/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="spring" scheme="https://blackist.org/tags/spring/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>校友录设计</title>
    <link href="https://blackist.org/2019/06/23/javaweb-ar-introduce/"/>
    <id>https://blackist.org/2019/06/23/javaweb-ar-introduce/</id>
    <published>2019-06-23T09:11:19.000Z</published>
    <updated>2019-07-02T15:49:40.018Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。</p><a id="more"></a><p>项目地址：<a href="https://github.com/blackist/ar" target="_blank" rel="noopener">https://github.com/blackist/ar</a></p><p><strong>摘要</strong></p><p>校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。然而目前我校并没有一个系统可以追溯毕业生的情况。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，同时也能够让院校充分了解毕业生的就业状况。</p><p>为了给校友们的提供一个了解母校动态的平台，本设计首先确定以毕业生以及高校为主要用户对象，采用目前业内流行的SpringMVC+Spring+MyBatis轻量级JavaEE框架，用Maven构建和管理，开发基于B/S结构的校友录系统。其次，通过系统建模对系统的各项功能进行了分析，确定了校友录系统的功能模块，并阐述了数据库的设计过程。再次对系统的功能模块进行了详细的设计，并对系统功能模块的界面进行了展示。最后对论文所阐述的内容进行总结，并分析了校友录系统对毕业生和院校带来的便利。</p><p>校友录系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、对本校毕业生招聘信息的推送。为满足院校和毕业生的需求，校友录系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块、职业招聘模块、校园服务模块。</p><p>校友录系统不仅能够很好地满足校友了解母校、校友动态的需求，也提供职业招聘、校园服务功能，使院校能够更好地了解毕业生就业情况、为毕业生提供就业服务。</p><p><strong>关键词</strong> 毕业；校友录；就业；JavaEE</p><p><strong>Abstract</strong></p><p>Youth is the best time in life, and this period of youth spent in the university will undoubtedly become the most valuable memories of our lives.Although time goes by fast, university life, the impressive community, the memorable alumni, the unforgettable teaching building, will be a subsequent stream of water in the memories. After graduation, we left school, along with the alumni miss and the alma mater’s attention. Thus, alumni desire for a platform to follow the news of alma mater, the status of alumni, and the dynamics of the group that they have joined.</p><p>​    In order to provide a sustenance for alumni’s emotions, this design, taking graduates and colleges as the main user object, using the current industry-popular SpringMVC + Spring + MyBatis lightweight JavaEE framework, develops the computer-based web pages Version of the simple and elegant Alumni Record System ( AR), built and managed by Maven.</p><p>​    AR is designed after a full investigation and analysis is conducted in the teachers, students and institutions. Alumni pay more attention to the school news, class dynamics, alumni information, community students and other groups. Institutions concern more about the graduates’ employment situation, new enrollment situation and delivery of recruit information about school graduates. AR designs the news center module, class record module, alumni organization module and alumni forum module. And album function is added into the class record and alumni organization, which aims to meet the needs of alumni better. At the same time, AR includes professional recruitment module, campus service module, so that institutions can understand the employment situation of graduates and help graduates better.</p><p>AR system not only can meet alumni to understand the alma mater, alumni dynamic needs, but also provide professional recruitment, campus service function, so that institutions can better understand the employment situation of graduates, to provide employment services for graduates.</p><p><strong>Keywords</strong>  graduation  alumni-record  employment  javaee</p><p><strong>目</strong>       <strong>录</strong></p><p><a href="#_Toc482890209">摘要… I</a></p><p><a href="#_Toc482890210">Abstract II</a></p><p><a href="#_Toc482890211">1 绪论… 1</a></p><p><a href="#_Toc482890212">1.1 课题背景… 1</a></p><p><a href="#_Toc482890213">1.2 课题意义… 1</a></p><p><a href="#_Toc482890214">1.3 课题内容… 1</a></p><p><a href="#_Toc482890215">1.4 论文的组织结构… 1</a></p><p><a href="#_Toc482890216">2 系统需求分析… 3</a></p><p><a href="#_Toc482890217">2.1 需求分析… 3</a></p><p><a href="#_Toc482890218">2.2 功能分析… 4</a></p><p><a href="#_Toc482890219">2.2.1 院校新闻发布功能… 4</a></p><p><a href="#_Toc482890220">2.2.2 班级管理功能… 5</a></p><p><a href="#_Toc482890221">3.2.3 院校组织管理功能… 6</a></p><p><a href="#_Toc482890222">3.2.4 校友论坛功能… 6</a></p><p><a href="#_Toc482890223">3.2.5 院校职业招聘功能… 7</a></p><p><a href="#_Toc482890224">3.2.6 校园服务功能… 7</a></p><p><a href="#_Toc482890225">3.2.7 用户个人中心功能… 8</a></p><p><a href="#_Toc482890226">2.4 技术路线… 9</a></p><p><a href="#_Toc482890227">3 系统总体设计… 11</a></p><p><a href="#_Toc482890228">3.1 系统总体设计… 11</a></p><p><a href="#_Toc482890229">3.1.1 系统登录… 11</a></p><p><a href="#_Toc482890230">3.1.2 新闻中心… 11</a></p><p><a href="#_Toc482890231">3.1.3 班级录… 11</a></p><p><a href="#_Toc482890232">3.1.4 校友组织… 11</a></p><p><a href="#_Toc482890233">3.1.5 校友论坛… 11</a></p><p><a href="#_Toc482890234">3.1.6 职位招聘… 12</a></p><p><a href="#_Toc482890235">3.1.7 校园服务… 12</a></p><p><a href="#_Toc482890236">3.1.8 个人中心… 12</a></p><p><a href="#_Toc482890237">3.2 系统功能设计… 12</a></p><p><a href="#_Toc482890238">3.2.1 新闻中心… 12</a></p><p><a href="#_Toc482890239">3.2.2 班记录… 13</a></p><p><a href="#_Toc482890240">3.2.3 校友组织… 14</a></p><p><a href="#_Toc482890241">3.2.4 校友论坛… 14</a></p><p><a href="#_Toc482890242">3.2.5 职业招聘… 15</a></p><p><a href="#_Toc482890243">3.2.6 校园服务… 16</a></p><p><a href="#_Toc482890244">3.2.8 个人中心… 16</a></p><p><a href="#_Toc482890245">3.3 数据库设计… 17</a></p><p><a href="#_Toc482890246">3.3.1 概念模型设计… 17</a></p><p><a href="#_Toc482890247">3.3.2 逻辑结构设计… 25</a></p><p><a href="#_Toc482890248">4 系统详细设计… 37</a></p><p><a href="#_Toc482890249">4.1 班级录… 37</a></p><p><a href="#_Toc482890250">4.1.1 班级首页… 38</a></p><p><a href="#_Toc482890251">4.1.2 班级动态… 40</a></p><p><a href="#_Toc482890252">4.1.3 班级通讯录… 42</a></p><p><a href="#_Toc482890253">4.1.4 班级相册… 43</a></p><p><a href="#_Toc482890254">4.2 职业招聘… 44</a></p><p><a href="#_Toc482890255">4.2.1 发布招聘… 44</a></p><p><a href="#_Toc482890256">4.2.2 查询招聘… 45</a></p><p><a href="#_Toc482890257">4.2.3 招聘详情… 46</a></p><p><a href="#_Toc482890258">4.2.4 投递简历… 47</a></p><p><a href="#_Toc482890259">4.3 校友论坛… 48</a></p><p><a href="#_Toc482890260">4.3.1 论坛广场… 48</a></p><p><a href="#_Toc482890261">4.3.2 发布新帖… 49</a></p><p><a href="#_Toc482890262">4.3.3 帖子详情… 49</a></p><p><a href="#_Toc482890263">结论… 51</a></p><p><a href="#_Toc482890264">致谢… 52</a></p><p><a href="#_Toc482890265">参考文献… 53</a></p><p>1 绪论</p><p>1.1 课题背景</p><p>青春是人生最美好的时光，而在大学度过的这一段青春岁月无疑将成为我们人生中最为宝贵的回忆。大学生活如白驹过隙匆匆流逝，却又将在而后的回忆里细水长流，忘不掉的社团，忘不掉的校友， 忘不掉的教学楼。毕业后，我们离开学校，一同带走的还有对校友的思念和对母校的关注。因此，校友们需要一个平台，来了解母校的新闻，校友们的近况，自己曾加入的团体的动态等等。</p><p>同时，院校对毕业生的培养与关怀也不会停止，院校希望了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。并且，校友作为高校的一种重要资源，在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。这也有助于改善教学方案，从而使本校毕业生更好地适应社会需求。</p><p>1.2 课题意义</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以创建自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。</p><p>此系统还可以让校友了解母校的新闻，校友们的近况，自己曾加入的团体的动态，也提供了职业招聘功能，此功能是院校和毕业生交互的重要平台。院校可在职业招聘模块发布招聘信息，毕业生可以浏览招聘信息、投递简历、在线制作简历，毕业生可以发布自己所在单位的招聘信息，经管理员审核后发布到招聘广场，为其他毕业校友提供有力的就业帮助。校友的信息反馈在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面发挥着重要作用。</p><p>1.3 课题内容</p><p>此系统是在对师生、院校进行充分的调研分析之后设计的，校友更多关注的是院校新闻、班级动态、校友信息以及社团学生会等团体，院校更多关注的是毕业生的就业情况、新生的招生情况以及对本校毕业生招聘信息的投送。此系统设计了新闻中心模块、班记录模块、校友组织模块、校友论坛模块，并在班记录和校友组织中加入相册功能，更好地满足校友的需求。同时，此系统包含职业招聘模块、校园服务模块，使院校更好地了解毕业生就业情况、为毕业生提供帮助。</p><p>1.4 论文的组织结构</p><p>论文主要内容包括五大部分，主要包括：</p><p>第一章 绪论。本章介绍了课题背景、课题意义以及本课题研究的主要内容。</p><p>第二章 系统需求分析。本章介绍了本系统的业务需求分析、系统功能分析以及相关业务的流程，开发过程中具体的开发环境、开发工具、相关技术。</p><p>第三章 系统总体设计。本章介绍了本系统的总体设计、系统各项功能的设计以及数据库的设计。</p><p>第四章 系统详细设计。本章介绍了系统的详细设计，包括各项系统功能的界面设计、代码逻辑设计以及实现。 </p><p>2 系统需求分析</p><p>2.1 需求分析</p><p>中国同学录网的调查显示，用户最关心的是班级信息、班级留言、同学联系方式和同学照片等。不同用户对系统的需求不同，但是基本功能需求是一致的，包括：对班级管理，用户可以查询并加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。考虑到网络的现况和同学们以及毕业生跟踪调查的各种需求，系统应该具有各方面的交流能力和实时的用户反馈信息，能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间，与此同时，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。这也有助于改善教学方案，从而更好地让本校毕业生适应社会需求。系统主要功能有：</p><p>（1）系统用户的登录、注册。注册，由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；登录，输入用户输入用户名（学号）和密码登录系统；</p><p>（2）校园新闻发布中心功能：新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载地评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息；</p><p>（3）同学交流的班级录功能。班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成；</p><p>（4） 校友互动的团体组织功能。校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；</p><p>（5）校友话题参与的论坛功能。帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；</p><p>（6） 职位招聘信息推送功能。招聘广场，浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场； </p><p>（7）招生就业的校园服务。校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息；</p><p>（8）用户个人管理中心。个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>2.2 功能分析</p><p>基于对校友录系统的需求分析，校友录系统有新闻中心功能，管理员发布管理图文信息，用户可以浏览、评论新闻信息。校友录系统设置班记录功能，给班级同学提供班级空间，班级空间内有交流平台、班级相册，这是同学比较关心的功能。同时，校友录系统具有校友组织功能，校友可以加入校内的组织和团体，组织有自己的空间给组织成员提供交流平台。为给广大校友提供更大的交流平台，校友录系统提供校友论坛功能，校友可以浏览话题并参与讨论。为满足院校对招聘信息推送的需求，校友录系统应加入职业招聘模块，院校管理员发布招聘信息，用户浏览并投递简历，用户也可以发布自己所在单位的招聘信息，经管理员审核后发不到招聘广场。为更好地微笑有提供入学、就业服务，校友录系统设有校园服务，为校友提供校园指南和就业服务。最后，校友录系统为用户提供个人中心功能，对个人信息以及在站内的应用进行管理。</p><h3 id="2-2-1-院校新闻发布功能"><a href="#2-2-1-院校新闻发布功能" class="headerlink" title="2.2.1 院校新闻发布功能"></a>2.2.1 院校新闻发布功能</h3><p>1.新闻中心用例分析</p><p>新闻中心包括新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息。新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论。新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心用例如图2-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图2-1 新闻中心用例图</p><h3 id="2-2-2-班级管理功能"><a href="#2-2-2-班级管理功能" class="headerlink" title="2.2.2 班级管理功能"></a>2.2.2 班级管理功能</h3><p>1、班记录用例分析</p><p>班记录包括班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班记录用例如图2-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图2-2 班记录用例图</p><h3 id="2-2-3-院校组织管理功能"><a href="#2-2-3-院校组织管理功能" class="headerlink" title="2.2.3 院校组织管理功能"></a>2.2.3 院校组织管理功能</h3><p>1.校友组织用例分析</p><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理；校友组织用例如图2-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图2-3 校友组织用例</p><h3 id="2-2-4-校友论坛功能"><a href="#2-2-4-校友论坛功能" class="headerlink" title="2.2.4 校友论坛功能"></a>2.2.4 校友论坛功能</h3><p>1.校友论坛用例分析</p><p>校友论坛包括：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子；校友论坛用例如图2-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图2-4 校友论坛用例图</p><h3 id="2-2-5-院校职业招聘功能"><a href="#2-2-5-院校职业招聘功能" class="headerlink" title="2.2.5 院校职业招聘功能"></a>2.2.5 院校职业招聘功能</h3><p>1.业招聘用例分析</p><p>职位招聘包括：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘用例如图2-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图2-5 职业招聘用例图</p><h3 id="2-2-6-校园服务功能"><a href="#2-2-6-校园服务功能" class="headerlink" title="2.2.6 校园服务功能"></a>2.2.6 校园服务功能</h3><p>1.校园服务用例分析</p><p>校园服务：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务用例如图2-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图2-6 职业招聘用例图</p><h3 id="2-2-7-用户个人中心功能"><a href="#2-2-7-用户个人中心功能" class="headerlink" title="2.2.7 用户个人中心功能"></a>2.2.7 用户个人中心功能</h3><p>1.个人中心用例分析</p><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户早论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心用例如图2-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图2-7 个人中心用例图</p><p>2.4 技术路线</p><p>本系统采用业内流行的SpringMVC+Spring+MyBatis框架（简称SSM），由项目构建工具Maven构建，并使用Git版本控制系统辅助项目开发。</p><p>Git是一个便捷的分布式版本控制工具，本项目用Git进行管理，可以轻松地备份项目，控制项目的版本，并且能够更安全地开发、调试。</p><p>Maven可以通过项目对象模型配置文件（pom.xml）轻松地构建项目，不用将jar包添加到项目，缩小了项目的体积。本系统使用Maven构建父模块ar-parent，并聚合了三个子模块ar-common、ar-manage、ar-portal。ar-common是项目的公共基础模块，java应用类的模型，包含实体类、工具类、数据访问对象等，依赖Spring、MyBatis等。ar-manage是本系统的后台管理模块，web应用类的模型，依赖ar-common、Spring、SpringMVC等。Ar-poratl是本系统的门户网站模块，依赖ar-common、ar-manage、Spring、SpringMVC等。Maven可以将web应用类项目打包成war并发布到tomcat服务器运行测试。</p><p>本系统充分利用Spring的IoC（控制反转）和AOP（面向切面）特性，将创建用户的SpringMVC控制器Controller、业务逻辑类Service、数据访问类Mapper交由Spring Container管理，生成对应的bean（也称组件）, 并把实现类的类名作为bean的id。当控制器、业务逻辑类、数据访问类需要Spring Container中bean对应的实现类时，Spring Container通过依赖注入机制为其注入对应的bean。通过这种配置，系统实现了控制器和业务逻辑类分离，业务逻辑类和数据访问类分离。SpringMVC中的DispatcherServlet接收请求，并交由控制器Controller处理，Controller接收参数、调用业务逻辑类中的方法，通过ModelAndView视图模型返回jsp页面、json数据。</p><p>本系统的视图层采用jsp、HTML，通过事件触发机制向服务器端发送请求，并采用Bootstrap、AmazeUI、HTML5、CSS3等前台样式，通过c标签、javascript、jquery处理前台数据。</p><p>技术路线如图2-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图2-8 技术路线图</p><p>3 系统总体设计</p><p>3.1 系统总体设计</p><p>根据系统功能分析，本系统应该具备的功能包括：登录注册、新闻中心、班级录、校友组织、校友论坛、职位招聘、校园服务、个人中心等功能。</p><h3 id="3-1-1-系统登录"><a href="#3-1-1-系统登录" class="headerlink" title="3.1.1 系统登录"></a>3.1.1 系统登录</h3><p>（1）注册：由管理员将历届学生的学号、姓名导入数据库，学号作为用户的用户名；</p><p>（2）登录：输入用户输入用户名（学号）和密码登录系统。</p><h3 id="3-1-2-新闻中心"><a href="#3-1-2-新闻中心" class="headerlink" title="3.1.2 新闻中心"></a>3.1.2 新闻中心</h3><p>（1）新闻发布：后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；</p><p>（2）新闻评论：用户可以对新闻信息发表评论，回复评论，动态加载评论；</p><p>（3）新闻热度：用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。</p><h3 id="3-1-3-班级录"><a href="#3-1-3-班级录" class="headerlink" title="3.1.3 班级录"></a>3.1.3 班级录</h3><p>（1）班级检索：按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；</p><p>（2）班级排名：根据班级人数、活跃时间对班级进行热度排名；</p><p>（3）班级主页：每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；</p><p>（4）班级管理：班级的新增、管理员的设置由后台管理员完成。</p><h3 id="3-1-4-校友组织"><a href="#3-1-4-校友组织" class="headerlink" title="3.1.4 校友组织"></a>3.1.4 校友组织</h3><p>（1）校友总会：院校总会；</p><p>（2）院系分会：各学院的校友组织；</p><p>（3）社团分会：院校内的各种社团、协会的组织；</p><p>（4）学生协会：院校内的各学生协会组织；</p><p>（5）组织主页：个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。</p><h3 id="3-1-5-校友论坛"><a href="#3-1-5-校友论坛" class="headerlink" title="3.1.5 校友论坛"></a>3.1.5 校友论坛</h3><p>（1）帖子浏览：按作者、主题检索帖子，查看详情；</p><p>（2）评论帖子：对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；</p><p>（3）热帖推送：用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；</p><p>（4）发布新帖：用户登录后可以发布帖子； </p><p>（5）贴子管理：管理员可审核、置顶、删除帖子。</p><h3 id="3-1-6-职位招聘"><a href="#3-1-6-职位招聘" class="headerlink" title="3.1.6 职位招聘"></a>3.1.6 职位招聘</h3><p>（1）招聘广场：浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；</p><p>（2）简历投送：用户可以向喜欢的招聘信息投送个人简历；</p><p>（3）简历管理：用户可以新增简历、编辑简历、删除简历；</p><p>（4）单位管理：用户可以登记、编辑自己所在单位的信息；</p><p>（5）发布招聘：用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。</p><h3 id="3-1-7-校园服务"><a href="#3-1-7-校园服务" class="headerlink" title="3.1.7 校园服务"></a>3.1.7 校园服务</h3><p>（1）校内服务：包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；</p><p>（2）招生就业服务：包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。</p><h3 id="3-1-8-个人中心"><a href="#3-1-8-个人中心" class="headerlink" title="3.1.8 个人中心"></a>3.1.8 个人中心</h3><p>（1）个人资料：基本资料、 详细资料、 工作信息、 头像设置；</p><p>（2）账户设置：密码修改、邮箱绑定； </p><p>（3）我的班级：用户加入的班级相关信息；</p><p>（4）我的论坛：用户早论坛的相关信息；</p><p>（5）我的招聘：用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。</p><p>3.2 系统功能设计</p><p>3.2.1 新闻中心</p><p>新闻发布，后台管理发布图文信息到门户网站，可置顶、编辑、删除新闻信息；新闻评论，用户可以对新闻信息发表评论，回复评论，动态加载评论；新闻热度，用户喜欢可以新闻信息，系统根据信息的喜欢量、浏览流量推送新闻信息。新闻中心功能如图3-1所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图3-1 新闻中心功能图</p><p>3.2.2 班记录</p><p>班级录功能包括:班级检索，按入学年份查询，按照班级名称、校友姓名查询，综合检索班级；班级排名，根据班级人数、活跃时间对班级进行热度排名；班级主页，每个班级有自己的空间，包括班级主页、班级动态、班级留言、班级成员、班级通讯录、班级相册、班级事务管理等；班级管理，班级的新增、管理员的设置由后台管理员完成。班级录功能如图3-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图3-2 班记录功能图</p><h3 id="3-2-3-校友组织"><a href="#3-2-3-校友组织" class="headerlink" title="3.2.3 校友组织"></a>3.2.3 校友组织</h3><p>校友组织包括：校友总会，院校总会；院系分会，各学院的校友组织；社团分会，院校内的各种社团、协会的组织；学生协会，院校内的各学生协会组织；组织主页，个组织有自己的空间，包括组织主页、动态消息、留言、成员列表、通讯录、相册、活动、组织事务管理。校友组织功能如图3-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image021.png" alt="img"></p><p>图3-3 校友组织功能功能图</p><p>3.2.4 校友论坛</p><p>校友论坛：帖子浏览，按作者、主题检索帖子，查看详情，对帖子发表评论，回复评论、删除用户自己的评论，ajax动态加载评论；热帖推送，用户可以喜欢帖子，系统根据帖子的喜欢数量和浏览量进行推送；发布新帖，用户登录后可以发布帖子；贴子管理，管理员可审核、置顶、删除帖子。校友论坛功能如图3-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image023.jpg" alt="img"></p><p>图3-4 校友论坛功能图</p><h3 id="3-2-5-职业招聘"><a href="#3-2-5-职业招聘" class="headerlink" title="3.2.5 职业招聘"></a>3.2.5 职业招聘</h3><p>职位招聘：招聘广场。浏览招聘信息，根据公司名称、职位名称、工作地点检索并查看招聘信息；简历投送，用户可以向喜欢的招聘信息投送个人简历；简历管理，用户可以新增简历、编辑简历、删除简历；单位管理，用户可以登记、编辑自己所在单位的信息；发布招聘，用户登记单位信息后可以发布招聘信息，由管理员审核后推送到招聘广场。职业招聘功能如图3-5所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image025.jpg" alt="img"></p><p>图3-5 职业招聘功能图</p><h3 id="3-2-6-校园服务"><a href="#3-2-6-校园服务" class="headerlink" title="3.2.6 校园服务"></a>3.2.6 校园服务</h3><p>校园服务包括：校内服务，包括走进校园、校园行指南、学报编辑部、图书馆、档案馆、信息公开网等信息；招生就业服务，包括本科招生、成教招生、就业网、人才招聘、本站招聘等信息。校园服务功能如图3-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image027.jpg" alt="img"></p><p>图3-6 校园服务功能图</p><h3 id="3-2-7-个人中心"><a href="#3-2-7-个人中心" class="headerlink" title="3.2.7 个人中心"></a>3.2.7 个人中心</h3><p>个人中心：个人资料，基本资料、 详细资料、 工作信息、 头像设置；账户设置，密码修改、邮箱绑定；我的班级，用户加入的班级相关信息；我的论坛，用户在论坛的相关信息；我的招聘，用户发布的招聘信息，用户投递的简历信息，用户个人简历管理。个人中心功能如图3-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image029.jpg" alt="img"></p><p>图3-7 个人中心功能图</p><p>3.3 数据库设计</p><p>3.3.1 概念模型设计</p><p>根据系统总体设计和功能设计，设计出系统涉及到的实体信息，包括用户实体，个人信息实体，职业信息实体，简历实体，地址实体，留言实体，评论回复实体，年级实体，组织实体，活动实体，相册实体，图片实体，信息实体，评论实体，分享实体，收藏实体，订阅实体，招聘信息实体，招聘单位实体，附件实体，角色实体，权限实体，字典实体，字典数据实体，各实体信息的概念模型如下所示。</p><p>（1）用户实体模型如图3-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image031.jpg" alt="img"></p><p>图3-8 用户实体模型</p><p>（2）职业信息实体模型如图3-9所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image033.jpg" alt="img"></p><p>图3-9 职业信息实体模型</p><p>（3）简历实体模型如图3-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image035.jpg" alt="img"></p><p>图3-10 简历实体模型</p><p>（4）地址实体模型如图3-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image037.jpg" alt="img"></p><p>图3-11 地址实体模型</p><p>（5）留言实体模型如图3-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image039.jpg" alt="img"></p><p>图3-12  留言实体模型</p><p>（6）评论回复实体模型如图3-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image041.jpg" alt="img"></p><p>图3-13  回复实体模型</p><p>（7）年级实体模型如图3-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image043.jpg" alt="img"></p><p>图3-14 年级实体</p><p>（8）组织实体模型如图3-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image045.jpg" alt="img"></p><p>图3-15  组织实体模型</p><p>（9）相册实体模型如图3-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image047.jpg" alt="img"></p><p>图3-16 相册实体模型</p><p>（10）活动实体模型如图3-17所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image049.jpg" alt="img"></p><p>图3-17 活动实体模型</p><p>（11）字典数据实体模型如图3-18所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image051.jpg" alt="img"></p><p>图3-18 字典数据实体模型</p><p>（12）图片实体模型如图3-19所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image053.jpg" alt="img"></p><p>图3-19 图片实体模型</p><p>（13）信息实体模型如图3-20所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image055.jpg" alt="img"></p><p>图3-20 信息实体模型</p><p>（14）评论实体模型如图3-21所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image057.jpg" alt="img"></p><p>图3-21 评论实体模型</p><p>（15）分享实体模型如图3-22所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image059.jpg" alt="img"></p><p>图3-22 分享实体模型</p><p>（16）收藏实体模型如图3-23所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image061.jpg" alt="img"></p><p>图3-23 收藏实体模型</p><p>（17）订阅实体模型如图3-24所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image063.jpg" alt="img"></p><p>图3-24 订阅实体模型</p><p>（18）招聘信息实体模型如图3-25所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image065.jpg" alt="img"></p><p>图3-25 招聘实体模型</p><p>（19）招聘单位实体模型如图3-26所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image067.jpg" alt="img"></p><p>图3-26 招聘单位实体模型</p><p>（20）附件实体模型如图3-27所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image069.jpg" alt="img"></p><p>图3-27 附件实体模型</p><p>（21）角色实体模型如图3-28所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image071.jpg" alt="img"></p><p>图3-28  角色实体模型</p><p>（22）权限实体模型如图3-29所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image073.jpg" alt="img"></p><p>图3-29  权限实体模型</p><p>（23）字典实体模型如图3-30所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image075.jpg" alt="img"></p><p>图3-30 字典表模型</p><p>（24）简历投递实体模型如图3-31所示</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image077.jpg" alt="img"></p><p>图3-31 简历投递模型</p><p>3.3.2 逻辑结构设计</p><p>根据系统的概念模型设计，设计出适应大多数数据库的数据表逻辑结构，共设计31张表，如表3-1所示。</p><p>表3-1 数据表汇总</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>1</td><td>user</td><td>用户表</td></tr><tr><td>2</td><td>user_info</td><td>用户个人信息表</td></tr><tr><td>3</td><td>user_job</td><td>用户工作信息表</td></tr><tr><td>4</td><td>user_resume</td><td>用户个人简历</td></tr><tr><td>5</td><td>resume_post</td><td>简历投递信息</td></tr><tr><td>6</td><td>user_origin</td><td>用户加入组织信息表</td></tr><tr><td>7</td><td>user_role</td><td>用户角色设定表</td></tr><tr><td>8</td><td>role</td><td>角色表</td></tr></tbody></table><p>续表3-1</p><table><thead><tr><th>序号</th><th>名称</th><th>用途与约束</th></tr></thead><tbody><tr><td>9</td><td>role_right</td><td>角色权限分配表</td></tr><tr><td>10</td><td>right</td><td>权限表</td></tr><tr><td>11</td><td>Address</td><td>地址信息表</td></tr><tr><td>12</td><td>message</td><td>消息表</td></tr><tr><td>13</td><td>reply</td><td>回复表</td></tr><tr><td>14</td><td>grade</td><td>年级表</td></tr><tr><td>15</td><td>origin</td><td>组织表</td></tr><tr><td>16</td><td>activity</td><td>活动表</td></tr><tr><td>17</td><td>album</td><td>相册信息表</td></tr><tr><td>18</td><td>album_image</td><td>相册图片信息表</td></tr><tr><td>19</td><td>image</td><td>图片信息表</td></tr><tr><td>20</td><td>information</td><td>信息表</td></tr><tr><td>21</td><td>comment</td><td>评论表</td></tr><tr><td>22</td><td>share</td><td>信息分享表</td></tr><tr><td>23</td><td>collect</td><td>信息收藏表</td></tr><tr><td>24</td><td>subscription</td><td>信息订阅表</td></tr><tr><td>25</td><td>recruit</td><td>招聘信息表</td></tr><tr><td>26</td><td>recruit_unit</td><td>招聘单位信息表</td></tr><tr><td>27</td><td>attachment</td><td>附件信息表</td></tr><tr><td>28</td><td>attachment_info</td><td>信息附件关系表</td></tr><tr><td>29</td><td>dictionary</td><td>数据字典表</td></tr><tr><td>30</td><td>dictionary_data</td><td>数据字典数据表</td></tr><tr><td>31</td><td>log</td><td>日志表</td></tr></tbody></table><p>表3-2 用户表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>account</td><td>char(20)</td><td>用户名</td><td></td></tr><tr><td>is_admin</td><td>char(1)</td><td>管理员标识</td><td></td></tr><tr><td>email</td><td>varchar(20)</td><td>用户邮箱</td><td></td></tr><tr><td>password</td><td>char(32)</td><td>用户密码</td><td></td></tr><tr><td>head_image_id</td><td>int(8)</td><td>头像图片标识</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>用户注册时间</td></tr></tbody></table><p>续表3-2</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>state</td><td>char(5)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-3 用户个人信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_info_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>ture_name</td><td>Nvarchar(20)</td><td>用户名</td><td></td></tr><tr><td>age</td><td>char(5)</td><td>年龄</td><td></td></tr><tr><td>sex</td><td>char(5)</td><td>性别</td><td></td></tr><tr><td>birthday</td><td>datetime</td><td>生日</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>phone</td><td>varchar(20)</td><td>联系电话</td><td></td></tr><tr><td>email</td><td>varchar(50)</td><td>邮箱</td><td></td></tr><tr><td>qq</td><td>varchar(20)</td><td>QQ</td><td></td></tr><tr><td>microblog</td><td>varchar(50)</td><td>微博</td><td></td></tr><tr><td>wechat</td><td>varchar(20)</td><td>微信</td><td></td></tr><tr><td>address</td><td>Nvarchar(50)</td><td>住址</td><td></td></tr><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>表3-4 职业信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>job_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>job_name</td><td>Varchar(20)</td><td>职业名称</td><td></td></tr><tr><td>job_unit</td><td>Varchar(20)</td><td>就业单位</td><td></td></tr><tr><td>date_start</td><td>date</td><td>就职时间</td><td></td></tr><tr><td>date_end</td><td>date</td><td>离职时间</td><td></td></tr><tr><td>job_desc</td><td>varhar(200)</td><td>职业简述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>工作登记时间</td><td></td></tr><tr><td>user_id</td><td>int</td><td>就业者</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录的状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>记录状态</td></tr></tbody></table><p>表3-5 个人简历表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>resume_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>resume_title</td><td>varchar(20)</td><td>简历标题</td><td></td></tr><tr><td>prof_type</td><td>vatchar(20)</td><td>职业类别</td><td></td></tr><tr><td>exp_salary</td><td>varchar(10)</td><td>期望薪资</td><td></td></tr><tr><td>name</td><td>varchar(10)</td><td>姓名</td><td></td></tr><tr><td>sex</td><td>char(1)</td><td>性别</td><td></td></tr><tr><td>domicile</td><td>varchar(20)</td><td>现在居住地</td><td></td></tr><tr><td>contact</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>introduce</td><td>varchar(200)</td><td>个人简介</td><td></td></tr><tr><td>userId</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>statusValue</td><td>char(5)</td><td>状态值</td><td>a     x       t</td></tr></tbody></table><p>表3-6 简历投递表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruit_id</td><td>int</td><td>招聘信息id</td><td>外键</td></tr><tr><td>resume_id</td><td>int</td><td>简历id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>投递日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>投递状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-7 角色权限配置表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>role_id</td><td>int</td><td>角色id</td><td>外键</td></tr></tbody></table><p>表3-8 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>role_name</td><td>varchar(20)</td><td>角色名称</td><td></td></tr><tr><td>role_value</td><td>varchar(20)</td><td>角色类型</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-9 角色权限表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>role_id</td><td>int</td><td>角色id</td><td>自动增长</td></tr><tr><td>right_id</td><td>int</td><td>权限id</td></tr></tbody></table><p>表3-10 权限信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>right_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>right_name</td><td>varchar(20)</td><td>权限名称</td><td></td></tr><tr><td>right_pos</td><td>int</td><td>权限位</td><td></td></tr><tr><td>right_code</td><td>bigint</td><td>权限码</td><td></td></tr><tr><td>right_URL</td><td>varchar(50)</td><td>权限路径</td><td></td></tr><tr><td>is_public</td><td>char</td><td>是否是公共资源</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-11 地址表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>addr_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>province</td><td>varchar(10)</td><td>省份</td><td></td></tr><tr><td>city</td><td>varchar(10)</td><td>市</td><td></td></tr><tr><td>district</td><td>varchar(10)</td><td>区</td><td></td></tr><tr><td>detail</td><td>varchar(50)</td><td>详细地址</td><td></td></tr><tr><td>zip_code</td><td>char(6)</td><td>邮编</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态值</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-12 留言表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>msg_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>标题</td><td></td></tr><tr><td>content</td><td>varchar(500)</td><td>留言内容</td><td></td></tr><tr><td>sender_id</td><td>int(8)</td><td>发送者id</td><td></td></tr><tr><td>receiver_id</td><td>int(8)</td><td>接收者id</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>发表日期</td></tr></tbody></table><p>表3-13 留言回复表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>reId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>回复内容</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>回复时间</td><td></td></tr><tr><td>msg_id</td><td>int(11)</td><td>被回复的留言的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>回复人id</td><td>外键</td></tr></tbody></table><p>表3-14 年级表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>grade_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>grade_value</td><td>char(4)</td><td>年份</td><td></td></tr><tr><td>class_num</td><td>int(4)</td><td>班级数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-15 组织信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>origin_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>origin_name</td><td>varchar(20)</td><td>组织编号</td><td></td></tr><tr><td>origin_no</td><td>varchar(20)</td><td>组织名</td><td></td></tr><tr><td>origin_type</td><td>varchar(20)</td><td>组织类型</td><td></td></tr><tr><td>origin_desc</td><td>varchar(500)</td><td>组织简介</td><td></td></tr><tr><td>origin_grade</td><td>varchar(4)</td><td>组织年级</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>组织人员数量</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>组织成立的年份</td><td></td></tr><tr><td>mgr_id</td><td>int</td><td>组织的管理员id</td><td>外键</td></tr><tr><td>creator_id</td><td>int</td><td>组织创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-16 校友活动表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>act_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>act_name</td><td>varchar(20)</td><td>活动名称</td></tr></tbody></table><p>续表3-16</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>start_time</td><td>datetime</td><td>活动开始时间</td><td></td></tr><tr><td>end_time</td><td>datetime</td><td>活动结束时间</td><td></td></tr><tr><td>act_place</td><td>varchar(50)</td><td>活动地点</td><td></td></tr><tr><td>act_desc</td><td>text</td><td>活动描述</td><td></td></tr><tr><td>act_num</td><td>int(4)</td><td>活动人数</td><td></td></tr><tr><td>sign_num</td><td>int(4)</td><td>活动已报名人数</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣数</td><td></td></tr><tr><td>leader_name</td><td>varchar(10)</td><td>负责人姓名</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>负责人联系方式</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>活动所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>活动发起人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-17 相册表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>album_name</td><td>varchar(20)</td><td>相册名名</td><td></td></tr><tr><td>albm_desc</td><td>varchar(200)</td><td>相册描述</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>interests</td><td>int(4)</td><td>感兴趣的人数</td><td></td></tr><tr><td>cover_image</td><td>int(11)</td><td>相册封面标识</td><td></td></tr><tr><td>origin_id</td><td>int</td><td>相册所属组织</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>相册创建人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-18 相册图片表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>album_id</td><td>int</td><td>相册id</td><td>外键</td></tr><tr><td>image_id</td><td>int</td><td>图片id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>表3-19 图片信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>image_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>image_name</td><td>varchar(32)</td><td>图片名</td><td></td></tr><tr><td>is_remote</td><td>char(1)</td><td>远程文件</td><td></td></tr><tr><td>image_size</td><td>varchar(5)</td><td>图片大小</td><td></td></tr><tr><td>image_path</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>image_type</td><td>varchar(20)</td><td>图片类型</td><td></td></tr><tr><td>is_thumb</td><td>char(1)</td><td>缩略图标识</td><td></td></tr><tr><td>thumb_path</td><td>varchar(255)</td><td>缩略图路径</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>图片状态</td></tr></tbody></table><p>表3-20 信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>info_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>info_title</td><td>varchar(50)</td><td>信息标题</td><td></td></tr><tr><td>content</td><td>text</td><td>内容</td><td></td></tr><tr><td>theme</td><td>varchar(2)</td><td>主题</td><td></td></tr><tr><td>thumb_image</td><td>varchar(255)</td><td>图文信息缩略图</td><td></td></tr><tr><td>views</td><td>int(4)</td><td>浏览量</td><td></td></tr><tr><td>comments</td><td>int(4)</td><td>评论数</td><td></td></tr><tr><td>shares</td><td>int(4)</td><td>分享次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建日期</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>信息类型</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>origin_id</td><td>int(8)</td><td>信息所属组织id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-21 评论表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>comment_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>content</td><td>varchar(500)</td><td>评论内容</td></tr></tbody></table><p>续表3-21</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>评论日期</td><td></td></tr><tr><td>user_id</td><td>int</td><td>评论人</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>评论的信息id</td><td>外键</td></tr></tbody></table><p>表3-22 信息转发表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>转发时间</td><td></td></tr><tr><td>info_id</td><td>int(11)</td><td>被转发的信息id</td><td>外键</td></tr><tr><td>user_id</td><td>int(8)</td><td>转发人id</td><td>外键</td></tr><tr><td>where</td><td>varchar(20)</td><td>转发方式</td></tr></tbody></table><p>表3-23 收藏表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>collect_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>收藏时间</td><td></td></tr><tr><td>info_id</td><td>int</td><td>收藏信息的id</td><td>外键</td></tr><tr><td>user_id</td><td>int</td><td>收藏人</td><td>外键</td></tr><tr><td>state</td><td>char(2)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-24 信息订阅表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>sub_id</td><td>int(11)</td><td>主键</td><td>自动增长</td></tr><tr><td>create_time</td><td>datetime</td><td>订阅时间</td><td></td></tr><tr><td>info_type</td><td>varchar(20)</td><td>订阅信息类型</td><td></td></tr><tr><td>is_email</td><td>char(1)</td><td>邮箱订阅标识</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>用户id</td><td></td></tr><tr><td>state</td><td>char(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-25 招聘信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>recruitId</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>title</td><td>varchar(20)</td><td>招聘标题</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr></tbody></table><p>续表3-25</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>end_time</td><td>datetime</td><td>招聘结束时间</td><td></td></tr><tr><td>members</td><td>int(4)</td><td>招聘人数</td><td></td></tr><tr><td>resumes</td><td>int(4)</td><td>简历投送数</td><td></td></tr><tr><td>leader_name</td><td>varchar(20)</td><td>联系人</td><td></td></tr><tr><td>leader_phone</td><td>varchar(30)</td><td>联系方式</td><td></td></tr><tr><td>is_top</td><td>char(1)</td><td>置顶标识</td><td></td></tr><tr><td>pos_name</td><td>varchar(20)</td><td>职位名称</td><td></td></tr><tr><td>pos_desc</td><td>varchar(500)</td><td>职位描述</td><td></td></tr><tr><td>benefit</td><td>varchar(50)</td><td>职位福利</td><td></td></tr><tr><td>work_place</td><td>varchar(50)</td><td>工作地点</td><td></td></tr><tr><td>unit_id</td><td>int(8)</td><td>招聘单位id</td><td></td></tr><tr><td>user_id</td><td>int</td><td>发布人id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-26 招聘单位信息表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>unit_id</td><td>int(8)</td><td>主键</td><td>自动增长</td></tr><tr><td>unit_name</td><td>varchar(30)</td><td>招聘单位名称</td><td></td></tr><tr><td>industry</td><td>varchar(30)</td><td>单位所属行业</td><td></td></tr><tr><td>property</td><td>varchar(20)</td><td>单位性质</td><td></td></tr><tr><td>scale</td><td>varchar(20)</td><td>单位规模</td><td></td></tr><tr><td>unit_desc</td><td>text</td><td>单位简介</td><td></td></tr><tr><td>unit_web</td><td>varchar(30)</td><td>单位网站</td><td></td></tr><tr><td>user_id</td><td>int(8)</td><td>发布者id</td><td>外键</td></tr><tr><td>state</td><td>char(1)</td><td>此条记录状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态日期</td></tr></tbody></table><p>表3-27 附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>atta_id</td><td>int</td><td>主键</td><td>自动增长</td></tr><tr><td>atta_name</td><td>varchar(32)</td><td>附件文件名</td><td></td></tr><tr><td>atta_type</td><td>varchar(20)</td><td>附件类型</td></tr></tbody></table><p>续表3-27</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>is_romote</td><td>char(1)</td><td>远程文件标识</td><td></td></tr><tr><td>file_path</td><td>varchar(255)</td><td>文件路径</td><td></td></tr><tr><td>file_size</td><td>char(10)</td><td>文件大小</td><td></td></tr><tr><td>dowmloads</td><td>int(4)</td><td>文件下载次数</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>上传日期</td></tr></tbody></table><p>表3-28 信息附件表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>attachment_id</td><td>int</td><td>附件id</td><td>外键</td></tr><tr><td>info_id</td><td>int</td><td>信息id</td><td>外键</td></tr></tbody></table><p>表3-29 数据字典表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>dict_value</td><td>varchar(20)</td><td>字典值</td><td>主键</td></tr><tr><td>dict_name</td><td>varchar(50)</td><td>字典名</td><td></td></tr><tr><td>remark</td><td>varchar(200)</td><td>字典备注</td></tr></tbody></table><p>表3-30 数据字典数据表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>int(8)</td><td>数据id</td><td>主键</td></tr><tr><td>dict_value</td><td>varchar(20)</td><td>数据字典</td><td>外键</td></tr><tr><td>dictdata_name</td><td>varchar(50)</td><td>数据名</td><td></td></tr><tr><td>dictdata_value</td><td>varchar(20)</td><td>数据值</td><td></td></tr><tr><td>is_fixed</td><td>char(1)</td><td>固定标识</td><td></td></tr><tr><td>is_cancel</td><td>char(1)</td><td>数据取消标识</td><td></td></tr><tr><td>parent_id</td><td>int(8)</td><td>父节点</td></tr></tbody></table><p>表3-31 日志表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>log_id</td><td>int(11)</td><td>日志id</td><td>主键</td></tr><tr><td>operator</td><td>varchar(100)</td><td>操作员</td><td></td></tr><tr><td>oper_name</td><td>varchar(100)</td><td>操作名称</td><td></td></tr><tr><td>oper_params</td><td>varchar(255)</td><td>操作参数</td><td></td></tr><tr><td>oper_result</td><td>varchar(100)</td><td>操作结果</td><td></td></tr><tr><td>oper_time</td><td>datetime</td><td>操作时间</td></tr></tbody></table><p>表3-32 用户组织表</p><table><thead><tr><th>字段名称</th><th>字段类型（长度）</th><th>字段含义</th><th>备注</th></tr></thead><tbody><tr><td>user_id</td><td>int</td><td>用户id</td><td>外键</td></tr><tr><td>origin_id</td><td>int</td><td>组织id</td><td>外键</td></tr><tr><td>create_time</td><td>datetime</td><td>加入时间</td><td></td></tr><tr><td>state</td><td>varchar(2)</td><td>状态</td><td></td></tr><tr><td>state_time</td><td>datetime</td><td>状态时间</td></tr></tbody></table><p>4 系统详细设计</p><p>4.1 班级录</p><p>（1） 功能实现</p><p>班级录主要实现给用户提供班级空间的功能，班级录总览界面按年级信息统计并展示院校当前班级的信息，按年级、校友姓名、班级专业条件查询班级并且能够在侧边栏按班级人数对班级进行热度排名，展示当前用户加入的班级，最近加入班级录的校友等信息。</p><p>（2） 实现方法</p><p>点击班级录标签页，请求class.action访问到Class控制器中的index()方法，index()调用ClassService业务逻辑类中的getAll()，查询年级信息，返回List<grade>类型的数据，添加到视图模型model中。Grade类对象中包含年级、班级个数等信息，index()方法跳转到class-index.jsp页面，展示年纪列表信息，并将年级列表加载到条件查询框中的下拉框中。页面加载时引入javascript，使用$.post()方法请求侧边栏数据。侧边栏数据包括班级录信息统计、班级排名、当前用户加入的班级、最近加入的校友等信息。在条件查询框中选择年级、填入校友姓名或专业关键字可以查询相关班级，提交查询时请求Class控制器中的queryClass()方法，传递grade、queryStr参数。queryClass()调用ClassService()业务逻辑类中的queryClasses()方法,queryClasses()方法的参数为Page&lt;&gt;类型的对象、grade、queryStr，queryClasses()执行查询,并返回 List<map<string,object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，queryClass()返回class-query.jsp页面。jsp页面将班级信息列表展示出来，并追加页码执行翻页功能。</map<string,object></grade></p><p>（3） 界面设计</p><p>班级录总览界面如图4-1所示，总体分为导航栏、年级列表和侧边信息栏。班级查询界面如图4-2所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image002.jpg" alt="img"></p><p>图4-1 班级录总览界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image004.jpg" alt="img"></p><p>图4-2 班级查询界面</p><p>4.1.1 班级首页</p><p>（1）功能实现</p><p>班级主页主要对班级进行一些简介，并展示班级的一些近期信息，如班级简介、班级最新动态、班级最新照片、班级管理员信息、当前用户信息以及当前用户是否加入班级等。班级简介为班级实体中描述班级的字段，包括班级名称、班级人数、班级简介、班级所属年级。班级最新动态是班级动态按照日期降序排列后，选择最新的几条记录显示。班级最新照片是班级成员上传到班级相册照片，按照上传日期降序排列后选择最新的几张进行展示。班级管理员信息展示管理员的头像、姓名、简介等信息。当前用户信息展示当前用户的头像、姓名、简介、是否加入班级。</p><p>（2）实现方法</p><p>点击班级名称超链接，请求classroom.action，并传入班级id参数，Classroom控制器中index()方法接收参数,调用业务逻辑类ClassService中的classIndex()、classInfo()、classImage()、getAllMemberId()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()查询班级的动态消息，动态消息按照日期降序排列，以List<map<string, object>&gt;类型返回日期最新的几条记录，赋值给infoList,将infoList添加到视图模型model中。classImage()方法查询班级成员上传的照片，照片按照上传日期降序排列，以List<map<string, object>&gt;类型返回上传日期最新的几条记录，赋值给imageList，将imageList添加到视图模型model中。getAllMemberId()查询所有班级成员的id，以List&lt; Integer&gt;类型返回，赋值给classIds，并将classIds添加到视图模型model中。Classroom控制器方法index()跳转到classroomdex.jsp页面，将classroom、infoList、imageList中的信息遍历展示在jsp页面中,将SESSION_USER环境变量中的当前用户信息展示为当前用户信息，并将SESSION_USER中的userId与classIds中的数据进行比较，如果userId存在与classIds中,则显示用户已经加入班级，否则显示加入班级按钮。Classroom-index.jsp加载的时候引入javascript，使用$.post()方法请求班级官员信息，并返回到jsp页面进行展示。</map<string,></map<string,></string,></p><p>（3）界面设计</p><p>班级主页界面设计如图4-3所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image006.jpg" alt="img"></p><p>图4-3 班级主页界面</p><p>4.1.2 班级动态</p><p>1.班级动态列表</p><p>（1） 功能实现</p><p>班级动态列表展示班级成员发布的动态信息，查询以当前班级id和信息类型作为条件查询信息，并进行分页处理，将查询到的信息分页展示。</p><p>（2） 实现方法</p><p>点击班级动态标签页，请求classroom/info.action，传递参数classId，Classroom控制器中的info()方法接收参数，info()调用ClassService业务逻辑类中的classIndex()、classInfo()方法。clasIndex()方法查询班级的详细信息，返回Map<string, object>类型的数据，赋值给classroom，将返回数据classroom添加到视图模型model中。classInfo()方法参数为Page&lt;&gt;类型数据、班级id和信息类型（数据字典中的信息类型数据），方法返回List<map<string, object>&gt;类型的数据。类型为Page&lt;&gt;的参数是分页对象，分页对象中包含分页的所有信息，包括页码pageIndex、pageSize、beanList等，新建分页对象时，如果没有设置参数，则pageIndex默认为1，pageSize默认为10。将page对象加入到视图模型model中，info()返回classroom-info.jsp页面。jsp页面将班级信息、班级动态信息列表展示出来，并追加页码执行翻页功能。</map<string,></string,></p><p>（3） 界面设计</p><p>班级动态列表界面如图4-4所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image008.jpg" alt="img"></p><p>图4-4 班级动态界面</p><p>2.班级动态详情</p><p>（1）功能实现</p><p>班级动态详情实现动态消息的详情展示，作者信息，消息评论区，以及班级相关动态和作者相关动态。班级动态消息详情包括图文信息、发布时间、浏览量、喜欢数、评论数，消息加载时动态消息的浏览量自增1。作者信息栏展示作者的头像、名字、简介等信息。评论区默认加载10条评论，点击加载更多评论按钮则再次加载10条评论，知道所有评论被加载完毕，用户可以在评论区发表评论。页面加载时，通过ajax方式将班级相关动态和作者相关动态加载到侧边栏。</p><p>（2）实现方法</p><p>点击消息详情按钮，请求classroom/infoDetail.action，传递班级id和消息id，Classroom控制器中的infoDetail()方法接收参数，调用ClassroomService业务类中的classInfoDetail()方法查询动态信息详情和作者信息，返回Map<string, object>类型的数据，赋值给info，将info添加到视图模型model中。infoDetail()返回classroom-info-detail.jsp页面，将info中的信息展示，并引入javascript使用ajax方式加载评论和侧边栏信息。</string,></p><p>（3）界面设计</p><p>班级动态信息详情界面和评论区界面如图4-5和图4-6所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image010.jpg" alt="img"></p><p>图4-5 班级动态详情界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image012.jpg" alt="img"></p><p>图4-6 班级动态消息评论区界面</p><p>4.1.3 班级通讯录</p><p>（1）功能实现</p><p>班级通讯录五章表关联查询班级成员的用户信息、所在地、电话、邮箱、QQ、微信等通讯信息，分页显示，并且支持下载班级通讯录信息，以Excel文件形式下载到本地。</p><p>（2）实现方法</p><p>点击通讯录标签页，请求classroom/directory.action，传递参数班级id，Classroom控制器中的directory()方法接收参数，并调用ClassrommService业务类中的classDirector()方法。classDirectory()关联user表、user_origin表、origin表、user_info表、image表，查询用户信息、用户通讯信息，以List<map<string, object>&gt;的形式返回通讯录列表，赋值给分页对象page中的beanList，并将page添加到视图模型model中。Directory()方法跳转classroom-directory.jsp页面，将beanList里的通讯录信息遍历出来。</map<string,></p><p>（3）界面设计</p><p>班级通讯录的界面设计如图4-7所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image014.jpg" alt="img"></p><p>图4-7 班级通讯录界面</p><p>4.1.4 班级相册</p><p>（1）功能实现</p><p>在班级相册中，班级成员可以查看相册、新建相册、上传图片、删除图片、设置相册封面、下载图片。上图图片支持批量上传，相册封面可以选择相册内的任意图片作为封面。</p><p>（2）实现方法</p><p>点击班级相册标签页，请求classroom/album.action，传递参数班级id，Classroom控制器中的album()方法接收参数，调用AlbumService业务类中的getAlbums()方法，以List<album>形式返回相册信息，赋值给分页对象page的beanList属性，返回classroom-album.jsp界面，将相册列表分页显示。</album></p><p>（3）界面设计</p><p>班级相册界面设计如图4-8所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image016.jpg" alt="img"></p><p>图4-8 班级相册界面</p><p>4.2 职业招聘</p><p>4.2.1 发布招聘</p><p>（1）功能实现</p><p>发布招聘时，系统判断当前用户是否已经登记公司信息，如果没有登记则跳转公司信息登记界面，否则跳转招聘登记界面。在招聘登记界面填写招聘信息后提交审核，后台管理员可以审核、置顶招聘。</p><p>（2）实现方法</p><p>点击发布招聘按钮，请求recruit/addRecruit.action，Recruit控制器中的addRecruit()方法接收请求，首先调用UnitService业务类中的getUnitsByUserId()方法查询当前用户的公司信息。如果公司信息，则返回redirect:/unit/addUnit.action，重定向到公司信息登记界面，否则addRecruit()将招聘常量positionSalary、positionBenefit、positionProf添加到视图模型model中，跳转至招聘信息登记界面。招聘信息表单填写完成后，提交至recruit/addRecruitSubmit.action，Recruit控制器调用RecruitService业务类中的createRecruit()方法，保存招聘信息，等待审核。</p><p>（3）界面设计</p><p>招聘单位信息登记界面设计如图4-9所示，招聘信息登记界面如图5-10所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image018.jpg" alt="img"></p><p>图4-9 招聘单位登记界面</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image020.jpg" alt="img"></p><p>图4-10 招聘信息登记界面</p><p>4.2.2 查询招聘</p><p>（1）功能实现</p><p>招聘查询可以招聘信息标题、招聘单位名称、职位信息、工作地点等查询招聘信息，并将查询到的记录分页显示。</p><p>（2）实现方法</p><p>点击职业招聘按钮，请求recruit.action，传递查询条件queryStr，Recruit控制器中的indexRecruit()方法，调用RecruitService业务类中的queryRecruit()方法执行查询，返回分页对象page，跳转到recruit-index.jsp页面，将招聘信息遍历出来并追加页码，执行翻页功能。</p><p>（3）界面设计</p><p>招聘查询界面如图4-11所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image022.jpg" alt="img"></p><p>图4-11 招聘查询界面</p><p>4.2.3 招聘详情</p><p>（1）功能实现</p><p>招聘详情展示招聘的详细信息，包括招聘单位信息、职位信息、联系人信息，并且能够加载此招聘信息的申请记录以及本招聘单位的相关招聘信息。</p><p>（2）实现方法</p><p>点击招聘信息标题超链接，请求recruit/detailRecruit.action，传递招聘信息id，Recruit控制器中的detailRecruit()方法接收参数，调用RecruitService业务类中的getDetailRecruit()、loadResumesToPost()、postResumeRecord()、loadOtherRecruits()等方法。getDetailRecruit()方法查询招聘的详细信息，返回Map<string,object>类型的数据，并添加到视图模型对象model中。postResumeRecord()方法关联recruit_post表、user表、image表查询出对此招聘信息投递简历的用户列表，返回List<map<string,object>&gt;类型的数据，并添加到视图模型对象中。LoadOtherRecruits()方法关联recruit_post表、recruit表，查询出此招聘单位的相关招聘信息，返回List<map<>&gt;类型的数据，并添加到数图模型对象model中。</map<></map<string,object></string,object></p><p>（3）界面设计</p><p>招聘查询界面如图4-12所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image024.jpg" alt="img"></p><p>图4-12 招聘查询界面</p><p>4.2.4 投递简历</p><p>（1）功能实现</p><p>在简历详情界面中，有简历投递选项，用户选择自己的简历投送至当前招聘信息。如果当前用户没有简历，则可以选择创建简历。</p><p>（2）实现方法</p><p>如果用户已经申请当前职位，则显示已申请职位，否则显示申请职位按钮。点击申请职位按钮，页面弹出简历投递模态框，通过c标签将用户简历列表加载到下拉框中，选择一个简历，点击确认申请按钮，请求my/resume/postResume.action，传递招聘信息id，用户简历id，用户信息控制器中的postResume()接收参数，并调用ResumeService服务类中的postResume()方法，保存简历投递信息。</p><p>（3）界面设计</p><p>简历投递界面如图4-13所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image026.jpg" alt="img"></p><p>图4-13 简历投递界面</p><p>4.3 校友论坛</p><p>4.3.1 论坛广场</p><p>（1）功能实现</p><p>论坛广场分页展示校友论坛的所有帖子，可以按照帖子标题、帖子主题和帖子作者进行模糊查询，并按照帖子的热度进行排名。</p><p>（2）实现方法</p><p>点击校友论坛，请求forum.action，Forum控制器中的index()方法接收请求，调用PostService中的queryPosts()方法，按日期降序排列并分页查询帖子，返回List<map<string,object>&gt;类型的数据，赋值给分页对象page，将page添加到视图模型对象model中。返回forum-index.jsp页面，将page中beanList的帖子信息分页显示。</map<string,object></p><p>（3）界面设计</p><p>论坛广场界面设计如图4-14所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image028.jpg" alt="img"></p><p>图4-14 校友论坛广场界面</p><p>4.3.2 发布新帖</p><p>（1）功能实现</p><p>用户可以在校友论坛广场发布新贴，帖子会被推送到广场并可以被搜索。</p><p>（2）实现方法</p><p>点击发布新贴按钮，请求post/add.action，Post控制器中的addPost()方法接收请求，将环境变量themeList添加到视图模型对象model中，加载帖子发布界面。在帖子发布界面填写post表单并提交，post信息存储至数据库，重新加载招聘广场即可看到新发布的帖子。</p><p>（3）界面设计</p><p>发布新贴界面如图4-15所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image030.jpg" alt="img"></p><p>图4-15 发布新贴界面</p><p>4.3.3 帖子详情</p><p>（1）功能实现</p><p>用户可以查看帖子详情，包括帖子内容、浏览量、评论量、喜欢数、作者信息，在帖子内容下方有评论区，加载评论内容或发表评论。在详情界面侧边栏显示相关主题的帖子和作者相关的帖子。</p><p>（2）实现方法</p><p>用户点击帖子标题超链接，请求post/detail.action，Post控制器中的detail()方法接收请求，调用PostService业务类中的postDetail()方法查询帖子详情，将返回的数据添加到视图模型对象model中，返回jsp页面显示帖子内容。页面加载完毕后，通过jquery的$.post()方法请求post/commentList.action和post/outLine.action加载评论区内容和侧边栏内容，Post控制器调用PostService业务类中的getOtherPost()f方法和CommentService业务类中的dynamicComment()方法查询信息，将返回的信息追加到页面，完成动态加载评论的功能。</p><p>（3）界面设计</p><p>帖子详情界面设计如图4-16所示。</p><p><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\msohtmlclip1\01\clip_image032.jpg" alt="img"></p><p>图4-16 帖子详情界面</p><p>结论</p><p>经过持久层、数据访问层、业务逻辑层、系统控制层、视图层的设计和实现，本系统基本实现了对班级管理，用户可以加入自己所在的班级；对班级留言的管理，用户可以在班级里查看、添加或修改留言；对班级通讯录的管理，用户可以查看班级成员的相关信息。系统已经能够实现留言、上传照片、评论等功能，同时具有方便的后台管理功能。同学录系统能够实现同学们生活中的交流，拥有自己的空间。校友论坛为广大校友提供了更加宽阔的平台，促进校友们之间的交流。与此同时，通过职业招聘模块、校园服务模块，校方管理员能够了解毕业生的就业情况，并为毕业生提供就业服务，包括向毕业生投送招聘信息，接收毕业生所在单位的招聘信息。因此，此系统能够在促进高校专业教学改革、募集高校筹资办学途径、促进校企合作、加强毕业生感情交流、提升大学生就业质量等方面带来巨大效益。</p><p>当然，本系统还不够完善，有一部分功能尚未实现。新闻中心应该具备热文推送和邮箱订阅功能，这样才能让校友更好的了解母校的动态消息。  网站内的消息应该支持富文本格式，这样可以使消息更具可读性和吸引力，同时富文本编辑器可以让用户更方便地编写内容。在消息发布和图片上传时，图片经过剪辑之后才可以更好地展示和存储。由于个人能力的限制，网站的邮箱订阅功能、富文本编辑存储功能和图片剪辑功能并没有实现。这些功能对本系统也显得尤为重要，因此以后必须实现。</p><p>经过对校友录系统的设计和实现，我对MVC模式有了更深层次的理解和应用。同时，我也学会许多新的框架和工具，包括SpringMVC、MyBatis、EhCache、Bootstrap、AmazeUI等框架，Maven、Git、IntelliJ IDEA等工具。因此，我相信在以后面临的工作和项目中本系统对我有很大帮助。</p><p>致谢</p><p>本论文的编写和修改是在胡局新老师悉心指导下完成的。胡老师有着严谨有致的教学态度，兢兢业业的工作作风，诲人不倦的高尚师德。在胡老师的每一堂课上，我都能感受到他的格物致知、敬业乐群，这也正是我在专业知识学习中保持热情的关键所在。在临近毕业的这段时间，胡老师也依然百忙之中为我讲解技术、指导论文，其崇高的责任心将是我受益一生的宝贵财富。在此，谨向我可敬可爱的胡老师致以诚挚的谢意。</p><p>不知不觉，四年的大学生活如白驹过隙般逝去，但这宝贵的四年无疑会在而后的回忆里细水长流。在徐州工程学院四年时间里我有过喜悦，有过沮丧，也学习了很多专业知识，参加了很多活动和比赛，获得了飞思卡尔智能汽车竞赛国赛奖项，电子设计大赛省级奖项。没有志同道合的校友，没有对我谆谆教诲的辅导员，没有对我坚定支持的母校，我不可能取得这些成就，也很难在低谷时战胜困难。因此，我想对帮助我的校友，关爱我的辅导员，坚定支持我的母校致以崇高的谢意。</p><p>同时，我也要感谢生我育我的父母。我的家庭生活并非想象中那么美好，父母的艰辛也许我无法体会，但是即使再困难，父母都会给予我精神、物质上的支持。父母不曾亏待我，我又能拿什么面对父母。唯有不懈的努力，让自己成功的速度快于他们老去的速度，我才能回报他们对我的爱。对于父母所给予我的这一切，我会用生命去珍惜，用感恩去呵护。</p><p>最后，我想再一次向精心教导我的胡老师，关爱我的辅导员，志同道合的校友，给予我支持的父母表达我的感恩之情，没有你们就没有如今的我，谢谢你们伴我走过青春的这段旅途，谢谢！</p><p>参考文献</p><p>[1] 盛仲飙 乔道迹.基于Java的通讯软件设计与实现[J].福建电脑,2015</p><p>[2] 陈衍席.基于Java网络聊天系统的设计及实现研究[J].通讯世界,2016</p><p>[3] 钱雪忠著,数据库原理与应用（第二版）[M].北京邮电大学出版社,2007</p><p>[4] 唐汉明 翟振兴 关宝军.深入浅出MySQL数据库开发优化与管理维护第2版[M].人民邮电出版社,2014</p><p>[5] 吴海星.Java程序员修炼之道[M].人民邮电出版社,2013</p><p>[6] 缪忠剑.基于Spring的集成化Web开发平台的研究与实现[M].北京机械工业出版社,2013</p><p>[7] 宋佳颖,基于Java的邮件接收系统分析[J].无线互联科技,2015</p><p>[8] 耿祥义,张跃平著.Java设计模式[M].清华大学出版社,2009</p><p>[9] 彭晓青,MVC模式的应用架构系统的研究与实现[J].电子工业出版社,2013</p><p>[10] 赵争东,基于Java的数据库应用框架的研究设计和探索[J].信息系统工程,2015</p><p>[11] 软件开发技术联盟著,Java Web开发实战[M].清华大学出版社,2013</p><p>[12] 贾蓓.镇明敏.杜磊著,Java Web整合开发实战[M].清华大学出版社,2013</p><p>[13] 李运莉著,web数据库应用系统性能优化[M].北京人民邮电出版社,2011</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;校友录网站。作为毕业设计，为母校设计校友交流平台。基于javaWeb，由Maven构建管理，采用Spring+SpringMVC+MyBatis框架，用EhCache做数据缓存。门户网站采用BootStrap设计界面，后台管理网站用AmazeUI设计界面。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="spring" scheme="https://blackist.org/tags/spring/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="https://blackist.org/2019/06/13/java-java7-ioc/"/>
    <id>https://blackist.org/2019/06/13/java-java7-ioc/</id>
    <published>2019-06-13T12:07:19.000Z</published>
    <updated>2019-06-16T09:47:35.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>讲真的，今年就业形势相当不好，对IT从业者的专业能力要求将变得更高。近来一边忙学业，一边学习Java基础和框架源码，为不久之后的招聘做准备。</p><p>打算从Java7、Java8d的版本新特性着手，再深入JVM、并发编程等。Java7中发布了JSR-330标准的DI特性。IoC是控制反转，DI是依赖注入。依赖注入（控制反转的一种形式）是Java开发主流中一个重要的范式。</p><a id="more"></a><h2 id="一、理解IoC和DI"><a href="#一、理解IoC和DI" class="headerlink" title="一、理解IoC和DI"></a>一、理解IoC和DI</h2><p><a name="iGpK3"></a></p><h3 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h3><p>非IoC范式编程，“功能中心”控制程序逻辑的流程，调用各个可重用对象中的方法执行特定的功能。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/204153/1560386178634-f13db507-ef0b-4eb5-be76-f61291a3e741.jpeg#align=left&amp;display=inline&amp;height=254&amp;originHeight=254&amp;originWidth=353&amp;size=0&amp;status=done&amp;width=353" alt><br>IoC程式编程，调用者的代码来处理程序的执行顺序，而程序逻辑则被封装在接受调用的子流程中。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/204153/1560386191880-91750474-e215-4608-bf06-53e820c2a180.jpeg#align=left&amp;display=inline&amp;height=421&amp;originHeight=421&amp;originWidth=336&amp;size=0&amp;status=done&amp;width=336" alt></p><p>IoC也被称为<strong>好莱坞原则</strong>，其思想可以归结为会有另一端代码拥有最初的控制线程（容器/工厂），并且有它来调用你的代码（注入/实例化对象），而不是由你的代码调用它。</p><blockquote><p>好莱坞原则 – “不要给我们打电话，我们会打给你”<br>好莱坞经纪人总是给人打电话，而不是让别人打给他们！</p></blockquote><p>IoC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：<br> <br>●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。<br><br><br>●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？<strong>依赖对象的获取</strong>被反转了。</p><p><a name="FxilH"></a></p><h3 id="IoC应用"><a href="#IoC应用" class="headerlink" title="IoC应用"></a>IoC应用</h3><p><strong>降低代码间的耦合度</strong>，让代码<strong>更易于测试、更易读、内聚性更强</strong>。</p><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。<br>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。<br>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。<br></p><p><a name="kSWEA"></a></p><h3 id="IoC实现方式"><a href="#IoC实现方式" class="headerlink" title="IoC实现方式"></a>IoC实现方式</h3><p>包括工厂模式，服务器定位模式，依赖注入(DI)。</p><p><a name="LQjDC"></a></p><h3 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h3><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。<br><br><br>DI是IoC的一种特定形态，是指<strong>寻找依赖项的过程（实例化）不在当前执行代码的直接控制之下</strong>。通常使用自带IoC容器的DI框架来实现依赖注入机制，如Guice，Spring。IoC可以看作运行时环境。<br><br><br>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。<br> <br>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：<br> <br>●<strong>谁依赖于谁：</strong>当然是应用程序依赖于IoC容器；<br>●<strong>为什么需要依赖：</strong>应用程序需要IoC容器来提供对象需要的外部资源；<br>●<strong>谁注入谁：</strong>很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；<br><br><br><strong>●注入了什么：</strong>就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。<br> <br>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</strong></p><p><a name="IB7px"></a></p><h2 id="二、DI实现实例"><a href="#二、DI实现实例" class="headerlink" title="二、DI实现实例"></a>二、DI实现实例</h2><blockquote><p>找出所有对Java开发人员比较友善的好莱坞经纪人</p></blockquote><p>有个AgentFinder接口，及其两个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevAgentFinder</span> <span class="keyword">extends</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankAgentFinder</span> <span class="keyword">extends</span> <span class="title">AgentFinder</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getAllAgents</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AgentFinderService中使用AgentFinder查找对Java开发人员友好的经纪人，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AgentFinder finder = <span class="keyword">new</span> DevAgentFinder();</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; fitAgents = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String agent : agents) &#123;</span><br><span class="line"><span class="keyword">if</span> (agent.contains(<span class="string">"Java"</span>)) &#123;</span><br><span class="line">fitAgents.add(agent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fitAgents;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，AgentFinderService和DevAgentFinder紧密黏合，使用工厂模式和服务器定位模式可降低耦合，它们都是IoC的一种。</p><p><a name="LtAfb"></a></p><h3 id="使用工厂-服务器定位模式"><a href="#使用工厂-服务器定位模式" class="headerlink" title="使用工厂/服务器定位模式"></a>使用工厂/服务器定位模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(String agentFinderType)</span> </span>&#123;</span><br><span class="line">        AgentFinderFactory factory = AgentFinderFactory.getInstance();</span><br><span class="line">        AgentFinder finder = factory.getAgentFinder(agentFinderType);</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AgentFinderFactory根据注入的agentFinderType实例化令人满意的AgentFinder。仍存在问题：</p><ul><li>代码注入agentFinderType作为引用凭据，而没有注入真正的对象。</li><li>getGoodAgents仍存在其他依赖项，达不到只关注自身职能的状态。</li></ul><p><a name="DXp6k"></a></p><h3 id="使用DI"><a href="#使用DI" class="headerlink" title="使用DI"></a>使用DI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上AgentFinder被直接注入到getGoodAgents方法中，只专注于纯业务逻辑。存在问题，如何配置AgentFinder具体实现？原本AgentFinderFactory要做的事情只是<strong>换个地方</strong>完成。</p><p><a name="LhmHR"></a></p><h3 id="使用JSR-330-DI"><a href="#使用JSR-330-DI" class="headerlink" title="使用JSR-330 DI"></a>使用JSR-330 DI</h3><p>使用框架执行DI操作，DI框架用标准的JSR-330<a href="#">@Inject</a>注解将依赖项注入到getGoodAgents方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">filterAgents</span><span class="params">(List&lt;String&gt; agents)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，AgentFinder的某个具体实现类的实例由支持JSR-330@inject注解的DI框架在运行时注入。</p><blockquote><p>JSR 企业应用标准：<br>JSR-330: Dependency Injection for Java 1.0<br>JSR-330统一DI体系，对大多数Java DI框架的核心功能做了很好的汇总</p></blockquote><p>从以上改造来温故依赖注入对我们的帮助：</p><ul><li>松耦合</li><li>可测性</li><li>更强的内聚性</li><li>可重用组件</li><li>更轻盈的代码</li></ul><p><a name="FAjHO"></a></p><h2 id="三、Java中标准化DI"><a href="#三、Java中标准化DI" class="headerlink" title="三、Java中标准化DI"></a>三、Java中标准化DI</h2><p>DI新标准中，javax.inject包只是提供一个接口和几个注解类型，这些都会被遵循JSR-330标准的各种DI框架实现。</p><p><a name="eSefj"></a></p><h3 id="理解DI工作原来"><a href="#理解DI工作原来" class="headerlink" title="理解DI工作原来"></a>理解DI工作原来</h3><p>优秀的Java开发人员不能只满足于使用类库和框架，要明白内部基本工作原理。在DI领域，会面临各种问题，如依赖项配置错误、依赖项诡异地超出作用域、依赖项在不该共享时被共享、分布调试离奇宕机等。</p><p>理解javax.inject包：</p><blockquote><p>javax.inject包<br>这个包指明了获取对象的一种方式，与传统的构造方法、工厂模式、服务器定位模式（如JNDI）等相比，这种方式的可重用性、可测试性、可维护性都有极大提升。这种方式成为依赖注入。</p></blockquote><p>javax.inject包中包括一个Provider<t>接口和5个注解类型（@inject、@Qualifier、@Named、@Scope、@Singleton）。</t></p><p><a name="M5vYz"></a></p><h3 id="Inject-注解"><a href="#Inject-注解" class="headerlink" title="@Inject 注解"></a>@Inject 注解</h3><p>@Inject注解可以出现在三种类成员之前，表示该成员需要依赖注入。按运行时处理顺序：</p><ol><li>构造器</li><li>方法</li><li>属性</li></ol><p><a name="kECuT"></a></p><h4 id="构造器上使用-Inject"><a href="#构造器上使用-Inject" class="headerlink" title="构造器上使用@Inject"></a>构造器上使用@Inject</h4><p>在构造器上使用@Inject时，其参数在运行时由配置好的IoC容器提供。比如在下面的代码中，运行时调用AgentFinderService的构造器时，IoC容器会注入其参数AgentFinder。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>因为JRE无法决定构造器注入的优先级，所以规范中规定类中<strong>只能有一个构造器带@Inject注解</strong></p><p><a name="zlKd3"></a></p><h4 id="方法上使用-Inject"><a href="#方法上使用-Inject" class="headerlink" title="方法上使用@Inject"></a>方法上使用@Inject</h4><p>运行时可注入的参数可以是多个也可以是0个，使用参数注入的方法不能声明为抽象方法，也不能声明其自身的类型参数。下面这段代码在set方法前使用@Inject，这是注入可选属性的常用技术。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Content contnet)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向方法中注入参数技术对于服务类方法来说非常有用，其所需的资源可以作为参数注入，比如向查询数据库的服务方法中注入数据访问对象（DAO）。</p><blockquote><p>向构造器注入的通常是类中必需的依赖项，而对于非必需的依赖项，通常是在set方法上注入。比如已经给出了默认的属性就是非必需的依赖项。</p></blockquote><p><a name="nxUoc"></a></p><h4 id="属性上使用-Inject"><a href="#属性上使用-Inject" class="headerlink" title="属性上使用@Inject"></a>属性上使用@Inject</h4><p>简单直接，但最好不要用。因为这样可能会使单元测试更加困难。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="QyP4w"></a></p><h3 id="Qualifier-注解"><a href="#Qualifier-注解" class="headerlink" title="@Qualifier 注解"></a>@Qualifier 注解</h3><p>JSR-330规范使用@Qualifier限定（标识）要注入的对象，比如IoC容器有两个类型相同的对象，当把他们注入到你的代码中时，要把他们区分开来。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/204153/1560392266590-a5a9c420-3145-49f5-a196-b1d91d6ff87a.png#align=left&amp;display=inline&amp;height=399&amp;name=image.png&amp;originHeight=399&amp;originWidth=689&amp;size=18655&amp;status=done&amp;width=689" alt="image.png"><br>创建一个@Qualifier实现必须遵循如下规则：</p><ul><li>必须标记为@Qualifier和@Retention（RUNTIME），以确保该限定注解在运行时一直有效。</li><li>通常还要加上@Documented注解，这样该实现就能加到API的公共JavaDoc中了。</li><li>可以有属性。</li><li>@Target注解可以限定其使用范围。</li></ul><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MusicGenre &#123;</span><br><span class="line">    <span class="function">Genre <span class="title">genre</span><span class="params">()</span> <span class="keyword">default</span> Genre.TRANCE</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> GENRE &#123; CLASSICAL, METAL, ROCK, TRANCE &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Evb8J"></a></p><h3 id="Named-注解"><a href="#Named-注解" class="headerlink" title="@Named 注解"></a>@Named 注解</h3><p><a href="#">@amed</a>@Named是一个特别的@Qualifier注解，借助@Named可以用名字注明要注入的对象。将@Named和@Inject一起使用，符合指定名称并且类型正确的对象会被注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"devFinder"</span>) <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder devFinder;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"bankFinder"</span>) <span class="keyword">private</span> <span class="keyword">final</span> AgentFinder bankFinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="J6Xx8"></a></p><h3 id="Scoped-注解"><a href="#Scoped-注解" class="headerlink" title="@Scoped 注解"></a>@Scoped 注解</h3><p>@Scoped注解用于自定义注解器（IoC容器）对注入对象的重用方式。JSR-330默认了如下几种默认行为：</p><ul><li>如果未声明任何@Scope注解接口的实现，注入器应创建注入对象并且仅使用该对象一次。</li><li>如果声明了@Scoped注解接口，注入对象的声明周期由所声明的@Scoped注解实现决定。</li><li>如果注入对象在@Scoped实现中要由多个线程使用，则需保证注入对象的线程安全性。</li><li>如果某个类上声明了多个@Scoped注解，或声明了不受支持的@Scoped注解，IoC容器应该抛出异常。</li></ul><p>公认的通用@Scoped实现只有@Singleton一个，JSR-330只确定了这么一个标准的生命周期注解。</p><p><a name="NWSe0"></a></p><h3 id="Singleton-注解"><a href="#Singleton-注解" class="headerlink" title="@Singleton 注解"></a>@Singleton 注解</h3><p>@Singleton注解接口在DI框架中应用广泛，需要注入一个不会改变的对象时，就要用@Singleton。大多数DI框架都将@Singleton作为注入对象的默认声明周期，无需显式发明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="meta">@Singleton</span> <span class="keyword">private</span> AgentFinder devFinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="y22MA"></a></p><h3 id="接口Provider"><a href="#接口Provider" class="headerlink" title="接口Provider"></a>接口Provider<t></t></h3><p>当DI框架的标准注解不能满足你的需求，你想对DI框架注入代码中的对象拥有更多的控制权，可以要求DI框架将Provider<t>接口实现注入对象。</t></p><ul><li>可以获取该对象的多个实例。</li><li>可以延迟加载对象。</li><li>可以打破循环依赖。</li><li>可以定义作用域，能在比整个被加载的应用小的作用域中查找对象。</li></ul><p>该接口仅有一个T get()方法，这个方法会返回一个构造好的注入对象（T）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinderProvider provider)</span> </span>&#123;</span><br><span class="line">AgentFinder finder = provider.get();</span><br><span class="line">        <span class="keyword">if</span> (condition) &#123; <span class="comment">// 延迟加载</span></span><br><span class="line">            AgentFinder finder2 = provider.get(); <span class="comment">// 多个实例对象</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="sa2Mm"></a></p><h2 id="四、DI参考实现：Guice3"><a href="#四、DI参考实现：Guice3" class="headerlink" title="四、DI参考实现：Guice3"></a>四、DI参考实现：Guice3</h2><p>Guice3是JSR-330规范的完整参考实现，可以配置、绑定、注入依赖项。</p><p><a name="aA1Cw"></a></p><h3 id="实现DI"><a href="#实现DI" class="headerlink" title="实现DI"></a>实现DI</h3><p><a name="Ra3KF"></a></p><h4 id="创建绑定关系"><a href="#创建绑定关系" class="headerlink" title="创建绑定关系"></a>创建绑定关系</h4><p>先创建绑定关系AgentFinderModule，重写configure()声明绑定关系，当AgentFinderService要求@Inject一个AgentFinder时，就会绑定DevAgentFinder作为注入对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class).to(DevAgentFinder.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span> <span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(AgentFinder finder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getGoodAgents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; allAgents = finder.getAllAgents();</span><br><span class="line"><span class="keyword">return</span> filterAgents(allAgents);</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4-1</p><p><a name="WQnho"></a></p><h4 id="构建Guice对象关系图"><a href="#构建Guice对象关系图" class="headerlink" title="构建Guice对象关系图"></a>构建Guice对象关系图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Injector injector = Guice.createInjector(<span class="keyword">new</span> AgentFinderModule());</span><br><span class="line">AgentFinderService hollywoodService = injector.getInstance(AgentFinderService.class);</span><br><span class="line">List&lt;String&gt; agents = hollywoodService.getGoodAgents();</span><br><span class="line">System.out.println(agents);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码4-2<br><a name="m1R8M"></a></p><h3 id="Guice的各种绑定"><a href="#Guice的各种绑定" class="headerlink" title="Guice的各种绑定"></a>Guice的各种绑定</h3><p>Guice提供多种绑定方式：</p><ul><li>链接绑定</li><li>绑定注解</li><li>实例绑定</li><li>@Provides方法</li><li>Provider绑定</li><li>无目标绑定</li><li>内置绑定</li><li>及时绑定</li></ul><p>最常用的包括链接绑定、绑定注解、@Provides方法、Provider<t>绑定。<br><a name="DPOM8"></a></t></p><h4 id="链接绑定"><a href="#链接绑定" class="headerlink" title="链接绑定"></a>链接绑定</h4><p>代码4-1中AgentFinderModule即为链接绑定，是最简单的绑定方式，只是告诉注入器运行时应该注入实现类或扩展类（可以直接注入子类）。</p><p><a name="4nYv7"></a></p><h4 id="绑定注解"><a href="#绑定注解" class="headerlink" title="绑定注解"></a>绑定注解</h4><p>将注入类的类型和额外的标识符组合起来，以标识恰当的注入对象。使用JSR-330标准注解@Named，注入特定名称的AgentFinder，在AgentFinderModule中配置@Named绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class)</span><br><span class="line">            .annotatedWith(Names.named(<span class="string">"primary"</span>))</span><br><span class="line">            .to(DevAgentFinder.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AgentFinder finder;</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AgentFinderService</span><span class="params">(@Named(<span class="string">"primary"</span>)</span> AgentFinder finder) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.finder = finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="cMKDQ"></a></p><h4 id="Provides和Provider：提供完全定制的对象"><a href="#Provides和Provider：提供完全定制的对象" class="headerlink" title="@Provides和Provider：提供完全定制的对象"></a>@Provides和Provider：提供完全定制的对象</h4><p>需要注入特别的AgentFinder，使用@Provides注解或在configure()方法中绑定，注入器会查看左右标记了@Provides注解方法的返回类型，决定 注入哪个对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="function">AgentFinder <span class="title">provideAgentFinder</span><span class="params">()</span> </span>&#123; <span class="comment">// 返回注入器需要的类型</span></span><br><span class="line">DevAgentFinder finder = <span class="keyword">new</span> DevAgentFinder(); <span class="comment">// 创建实例并定制</span></span><br><span class="line">finder.setName(<span class="string">"JavaFind"</span>);</span><br><span class="line"><span class="keyword">return</span> finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@Provides方法会变得越来越大，为简化Module，需要把定制化代码拆分出去。使用toProvider方法绑定到Provider类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderProvider</span> <span class="keyword">implements</span> <span class="title">Provider</span>&lt;<span class="title">AgentFinder</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AgentFinder <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DevAgentFinder finder = <span class="keyword">new</span> DevAgentFinder(); <span class="comment">// 创建实例并定制</span></span><br><span class="line">finder.setName(<span class="string">"JavaFind"</span>);</span><br><span class="line"><span class="keyword">return</span> finder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentFinderModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bind(AgentFinder.class)</span><br><span class="line">            .toProvider(AgentFinderProvider.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="MLwOI"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jinnianshilongnian.iteye.com/blog/1413846" target="_blank" rel="noopener">https://jinnianshilongnian.iteye.com/blog/1413846</a><br>《Java程序员修炼之道 Benjamin J.Evans》第3章</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲真的，今年就业形势相当不好，对IT从业者的专业能力要求将变得更高。近来一边忙学业，一边学习Java基础和框架源码，为不久之后的招聘做准备。&lt;/p&gt;
&lt;p&gt;打算从Java7、Java8d的版本新特性着手，再深入JVM、并发编程等。Java7中发布了JSR-330标准的DI特性。IoC是控制反转，DI是依赖注入。依赖注入（控制反转的一种形式）是Java开发主流中一个重要的范式。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://blackist.org/categories/Java/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="java" scheme="https://blackist.org/tags/java/"/>
    
      <category term="java7" scheme="https://blackist.org/tags/java7/"/>
    
      <category term="IoC" scheme="https://blackist.org/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>分布式-开启SpringBoot微服务之旅</title>
    <link href="https://blackist.org/2019/05/22/distributed-outline/"/>
    <id>https://blackist.org/2019/05/22/distributed-outline/</id>
    <published>2019-05-22T06:58:05.000Z</published>
    <updated>2019-07-02T15:49:40.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>分布式架构可以降低程序错误给整体系统带来的风险，也可以通过不断扩张主机的数量以实现横向水平的性能扩展，因此我们需要分布式架构。</p><a id="more"></a><h2 id="微服务架构及容器技术"><a href="#微服务架构及容器技术" class="headerlink" title="微服务架构及容器技术"></a>微服务架构及容器技术</h2><p>微服务这个词近几年很火，微服务架构（Microservices Architecture，MSA）是分布式架构的一种，它的产生主要依赖以下方面的内容：</p><ul><li>领域驱动设计：分析并模型化复杂业务。</li><li>敏捷方法论：快速发布，形成有效反馈。</li><li>持续交付：更快、可靠、频繁地部署和交付。</li><li>虚拟化和基础设施自动化：Docker等容器技术简化安装部署环境。</li><li>DevOps：开发、测试、运维整合。</li></ul><p>MSA把小的服务开发成单一应用的形式，每个服务运行在单独的进程中并采用轻量级的机制通信（HTTP等）。这些服务围绕业务构建，自动化部署，可以使用不同的编程语言和存储技术，并保持最小化集中管理。</p><h3 id="如何构建微服务"><a href="#如何构建微服务" class="headerlink" title="如何构建微服务"></a>如何构建微服务</h3><p>ZooKeeper、Dubbo、Jersey、SpringBoot、SpringColud等都可以实现微服务。我决定围绕SpringBoot、SpringCloud展开微服务架构学习。</p><h2 id="SpringBoot微服务架构基础"><a href="#SpringBoot微服务架构基础" class="headerlink" title="SpringBoot微服务架构基础"></a>SpringBoot微服务架构基础</h2><p>SpringBoot简化企业级应用开发地复杂性，提供很多开箱即用的Starter，通过少量代码创建一个独立的、产品级Spring应用。</p><p>我学习的步骤如下：</p><ul><li>SpringBoot引入Web创建RESTful API和单元测试</li><li>使用Swagger2构建API文档</li><li>统一处理异常</li><li>SpringData JPA</li><li>SpringSecurity和JWT</li><li>事务管理</li><li>集中式缓存Redis</li><li>日志系统 本地日志和MongoDB</li><li>消息服务RabbitMQ</li><li>邮件系统</li></ul><h2 id="微服务架构设计原则"><a href="#微服务架构设计原则" class="headerlink" title="微服务架构设计原则"></a>微服务架构设计原则</h2><ul><li>拆分足够微：足够小即可，不要过小。小团队两周内开发完且能够维护。</li><li>轻量级通信：服务跨进程或跨主机，服务间通信采用采用轻量级通信协议，同步的REST（HTTP:XML/JSON），异步的AMQP、MQTT、STOMP。</li><li>领域驱动原则：基于领域驱动设计（Domain-Driven Design，DDD）开发一个微服务，一个服务反应某个业务的领域模型，理清领域边界逻辑和上下文边界。</li><li>单一职责原则：高内聚，低耦合。密切相关的多个功能应尽量包含在同一个服务中以降低服务间的干扰；通过接口（API、事件）进行通信以降低对其它服务的依赖。</li><li>DevOps及两个披萨：开发人员具备用户界面、业务逻辑、持久化存储、独立运维的全栈能力，降低沟通成本，防止项目陷入停顿。人数不多过两个披萨不够吃。</li><li>不限于技术栈：根据场景（计算密集型[CPU/内存]、非结构化存储[NoSQL]）进行技术选型，但不滥用技术，以安全稳定的Java等为主。</li><li>可独立部署：微服务独立部署使得开发者不再需要协调其它服务部署对本服务的影响；Docker容器技术使得服务能够在构建镜像中所期望的环境中运行。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.didispace.com/spring-boot-learning-1x/" target="_blank" rel="noopener">http://blog.didispace.com/spring-boot-learning-1x/</a></p><p>《SpringCloud微服务架构 杨伟卫著》第1章 微服务概述</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分布式架构可以降低程序错误给整体系统带来的风险，也可以通过不断扩张主机的数量以实现横向水平的性能扩展，因此我们需要分布式架构。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://blackist.org/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="springboot" scheme="https://blackist.org/tags/springboot/"/>
    
      <category term="分布式" scheme="https://blackist.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="https://blackist.org/2019/05/03/ops-docker-basic/"/>
    <id>https://blackist.org/2019/05/03/ops-docker-basic/</id>
    <published>2019-05-03T12:51:42.000Z</published>
    <updated>2019-06-16T09:47:35.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux Containers Linux容器 缩写LXC，其对进程进行隔离，而非一个完整的操作系统。Docker属于LXC的一种封装，提供简单易用的容器使用接口。Docker主要用于提供一次性环境、提供 弹性的云服务、组件微服务架构。</p><a id="more"></a><h2 id="一、基本操作"><a href="#一、基本操作" class="headerlink" title="一、基本操作"></a>一、基本操作</h2><h3 id="1-1-Docker安装"><a href="#1-1-Docker安装" class="headerlink" title="1.1 Docker安装"></a>1.1 Docker安装</h3><p>Docker是一个开源的开品，有两个版本：CE（Community Edition）和EE（Enterprise Edition）。企业版包含一些收费服务，社区版适合个人开发者。</p><ul><li><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://docs.docker-cn.com/docker-for-mac/install/" target="_blank" rel="noopener">Mac</a></li></ul><p>安装完成后，使用如下命令验证是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -version</span><br></pre></td></tr></table></figure><p>Docker需要用户具有sudo权限，为了避免每次输入sudo以及用户不具有sudo权限，请先使用管理员用户将特定的用户添加到Docker用户组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G docker $USER</span><br></pre></td></tr></table></figure></p><p>Docker 是服务器—-客户端架构。命令行运行docker命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 启动Docker服务</span><br><span class="line">sudo service docker start</span><br><span class="line"># 设置开启自己懂</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"># 检查开机自启动设置成功没</span><br><span class="line">systemctl list-unit-files |grep docker</span><br><span class="line"></span><br><span class="line">docker.service                             enabled </span><br><span class="line">docker.socket                              enabled</span><br></pre></td></tr></table></figure><h3 id="1-2-Docker镜像文件image"><a href="#1-2-Docker镜像文件image" class="headerlink" title="1.2 Docker镜像文件image"></a>1.2 Docker镜像文件image</h3><p>Docker将应用程序及其依赖打包在镜像（image）文件里，通常一个image会继承自另一个image，开发者在其中加入个性化的配置，从而形成定制化的镜像文件。</p><p>Docker通过image来生成并运行虚拟容器。比如说我们的网站程序打包成image文件并拷贝在一个服务器上，通过docker根据此image文件在服务器上生成并运行多个相同的网站程序。</p><p>通过Docker管理image文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机的image文件</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"># 删除本机image文件</span><br><span class="line">docker image rm $image_name</span><br></pre></td></tr></table></figure><p>image具备复用性，通常我们可以使用别人制作好的Image文件，这些共享镜像通常来自于<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>。</p><h3 id="1-3-Docker镜像实例"><a href="#1-3-Docker镜像实例" class="headerlink" title="1.3 Docker镜像实例"></a>1.3 Docker镜像实例</h3><p>我们可以从Docker官方镜像仓库/第三方仓库拉取image文件并运行。</p><h4 id="hello-world"><a href="#hello-world" class="headerlink" title="hello-world"></a>hello-world</h4><p>从官方拉取hello-world镜像来感受下Docker：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br></pre></td></tr></table></figure></p><ul><li>docker image pull：拉取镜像的命令</li><li>library：镜像文件所在组</li><li>hello-world：镜像文件的名字</li></ul><p>Docker官方提供的镜像文件都在library下，因此library是默认镜像组，可省略不写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image pull hello-world</span><br></pre></td></tr></table></figure><h3 id="1-4-Docker运行容器实例"><a href="#1-4-Docker运行容器实例" class="headerlink" title="1.4 Docker运行容器实例"></a>1.4 Docker运行容器实例</h3><p>基于image文件生成并运行容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker container run hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>输出一段话后，hello-world容器自动终止。</p><p>有些容器不会自动终止，因为它们提供的是服务例如网站容器和虚拟操作系统容器，运行ubuntu的容器，docker会从镜像仓库下载ubuntu的镜像，下载完成后直接从ubuntu镜像运行容器实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Unable to find image &apos;ubuntu:latest&apos; locally</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">f476d66f5408: Pull complete</span><br><span class="line">...</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">root@341a7595b69e:</span><br></pre></td></tr></table></figure><ul><li>-t: flag assigns a pseudo-tty or terminal inside the new container.</li><li>-i: flag allows you to make an interactive connection by grabbing the standard in (STDIN) of the container.</li><li>-it：Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器</li><li>bash: launches a Bash shell inside our container.</li></ul><p>输入exit或按Ctrl+D可退出此ubuntu容器实例进程，此种方式依赖命令行运行，命令行退出则容器进程终止（使用Ctrl+P+Q也可退出容器且不关闭容器）。使用ps命令查看docker进程，可见ubuntu的进程已退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED       STATUS    </span><br><span class="line">341a7595b69e        ubuntu              &quot;bash&quot;              2 minutes ago       Exited </span><br><span class="line"></span><br><span class="line">44a7468dabfd        hello-world         &quot;/hello&quot;            23 minutes ago      Exited</span><br></pre></td></tr></table></figure><p>也可以将将容器作为后台进程运行，再使用attach命令进入在后台运行的容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker container run -itd ubuntu</span><br><span class="line">1f7b446e9a8f6a9e9ec8066526f055222c9cfb6bf75f5389a8a9163428d53272</span><br><span class="line"></span><br><span class="line">docker ps -a </span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED       STATUS</span><br><span class="line">1f7b446e9a8f        ubuntu              &quot;bash&quot;              13 seconds ago      Up 11 seconds</span><br><span class="line"></span><br><span class="line">341a7595b69e        ubuntu              &quot;bash&quot;              2 minutes ago       Exited </span><br><span class="line"></span><br><span class="line">44a7468dabfd        hello-world         &quot;/hello&quot;            23 minutes ago      Exited</span><br></pre></td></tr></table></figure><p>容器在后台运行成功，使用attach/exec命令进入后台进程的ubuntu容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># docker attach [OPTIONS] CONTAINER</span><br><span class="line">docker attach 1f7b446e9a8f</span><br><span class="line"></span><br><span class="line"># docker exec [OPTIONS] CONTAINER COMMAND [PARAMS]</span><br><span class="line">docker exec 1f7b446e9a8f bash</span><br><span class="line"></span><br><span class="line">root@1f7b446e9a8f:/#</span><br></pre></td></tr></table></figure><p>容器进程退出，但容器文件依然存在，因此关闭容器不会删除容器文件。一些container常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 启动容器</span><br><span class="line">docker start CONTAINER</span><br><span class="line"># 50s内停止容器，否则强制停止</span><br><span class="line">docker stop -t 50 CONTAINER</span><br><span class="line"># 强制停止容器</span><br><span class="line">docker kill CONTAINER</span><br><span class="line"># 重启容器</span><br><span class="line">docker restart CONTAINER</span><br><span class="line"># 删除容器文件</span><br><span class="line">docker rm CONTAINER</span><br></pre></td></tr></table></figure><h2 id="二、自定义容器"><a href="#二、自定义容器" class="headerlink" title="二、自定义容器"></a>二、自定义容器</h2><p>使用Dockerfile来定制image，适应我们自己的需要。Dockerfile是一个文本配置文件，docker将根据它生成我们需要的image。</p><h3 id="2-1-准备镜像所需的工程代码或文件"><a href="#2-1-准备镜像所需的工程代码或文件" class="headerlink" title="2.1 准备镜像所需的工程代码或文件"></a>2.1 准备镜像所需的工程代码或文件</h3><p>拉取测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/blackist/maven-quiz.git</span><br></pre></td></tr></table></figure></p><p>在本地编译maven项目，mvn clean package编译出需要的war包。</p><blockquote><p>也可基于maven镜像，在容器内构建maven项目，但需要令行配置</p></blockquote><h3 id="2-2-编写Docker配置文件"><a href="#2-2-编写Docker配置文件" class="headerlink" title="2.2 编写Docker配置文件"></a>2.2 编写Docker配置文件</h3><p>在此项目基础上构建Dockerfile项目，新建Dockerfile配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">VOLUME /tmp</span><br><span class="line">ADD ./target/maven-quiz.jar /app.jar</span><br><span class="line">EXPOSE 8000</span><br><span class="line">ENTRYPOINT [&quot;nohup&quot;, &quot;java&quot;, &quot;-Dserver.port=8000&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;, &quot;&amp;&quot;]</span><br></pre></td></tr></table></figure><h4 id="FROM-openjdk-8"><a href="#FROM-openjdk-8" class="headerlink" title="FROM openjdk:8"></a>FROM openjdk:8</h4><p>基于openjdk8镜像编译自定义镜像</p><h4 id="VOLUME-tmp"><a href="#VOLUME-tmp" class="headerlink" title="VOLUME /tmp"></a>VOLUME /tmp</h4><p>将本地文件夹挂载到当前容器</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p> ADD ./target/maven-quiz.jar /app.jar 是拷贝war文件到容器</p><h4 id="EXPOSE-8000"><a href="#EXPOSE-8000" class="headerlink" title="EXPOSE 8000"></a>EXPOSE 8000</h4><p>开放8000端口</p><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>ENTRYPOINT [“nohup”, “java”, “-Dserver.port=8000”, “-jar”, “/app.jar”, “&amp;”]<br>配置容器启动后执行的命令，使用nohup使得java程序运行于后台，不至于命令行退出java程序终止。</p><ul><li>ENTRYPOINT，表示镜像在初始化时需要执行的命令，不可被重写覆盖，需谨记</li><li>CMD，表示镜像运行默认参数，可被重写覆盖</li><li>ENTRYPOINT/CMD都只能在文件中存在一次，并且最后一个生效 多个存在，只有最后一个生效，其它无效！</li><li>需要初始化运行多个命令，彼此之间可以使用 &amp;&amp; 隔开，但最后一个须要为无限运行的命令，需切记！</li></ul><p>ENTRYPOINT/CMD，一般两者可以配合使用，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/usr/sbin/sshd&quot;] </span><br><span class="line">CMD [&quot;-D&quot;]</span><br></pre></td></tr></table></figure><h2 id="2-3-编译Docker镜像"><a href="#2-3-编译Docker镜像" class="headerlink" title="2.3 编译Docker镜像"></a>2.3 编译Docker镜像</h2><p>编译命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t maven-quiz .</span><br></pre></td></tr></table></figure><ul><li>docker build 或 docker image build：编译命令</li><li>-t：指定镜像的name，maven-quiz为镜像名，其后可加:来指定标签，默认为lastest</li><li>.：指定Dockerfile配置文件所在路径，.即是当前路径</li></ul><p>编译过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  16.87MB</span><br><span class="line">Step 1/5 : FROM openjdk:8</span><br><span class="line"> ---&gt; b8d3f94869bb</span><br><span class="line">Step 2/5 : VOLUME /tmp</span><br><span class="line"> ---&gt; Running in dd6790b892cc</span><br><span class="line">Removing intermediate container dd6790b892cc</span><br><span class="line"> ---&gt; c22a0db1f2e0</span><br><span class="line">Step 3/5 : ADD ./target/maven-quiz.jar /app.jar</span><br><span class="line"> ---&gt; 3a7eb1b80968</span><br><span class="line">Step 4/5 : EXPOSE 8000</span><br><span class="line"> ---&gt; Running in 95ea426741b7</span><br><span class="line">Removing intermediate container 95ea426741b7</span><br><span class="line"> ---&gt; b472a3d4e0d5</span><br><span class="line">Step 5/5 : ENTRYPOINT [&quot;nohup&quot;, &quot;java&quot;, &quot;-Dserver.port=8000&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;, &quot;&amp;&quot;]</span><br><span class="line"> ---&gt; Running in c95c9393b88f</span><br><span class="line">Removing intermediate container c95c9393b88f</span><br><span class="line"> ---&gt; 48aa6f27aecf</span><br><span class="line">Successfully built 48aa6f27aecf</span><br><span class="line">Successfully tagged maven-quiz:latest</span><br></pre></td></tr></table></figure><h3 id="2-4-运行容器"><a href="#2-4-运行容器" class="headerlink" title="2.4 运行容器"></a>2.4 运行容器</h3><p>运行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -itd maven-quiz</span><br></pre></td></tr></table></figure><p>-docker run：运行容器</p><ul><li>-p：指定本地：容器端口映射</li><li>-itd：容器在后台运行</li><li>maven-quiz：指定镜像，:后加标签，默认为lastest</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p><p><a href="https://blog.csdn.net/zhezhebie/article/details/75501149" target="_blank" rel="noopener">https://blog.csdn.net/zhezhebie/article/details/75501149</a></p><p><a href="http://book.itmuch.com/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.6%20%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BADocker%E9%95%9C%E5%83%8F.html" target="_blank" rel="noopener">http://book.itmuch.com/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.6%20%E4%BD%BF%E7%94%A8Dockerfile%E6%9E%84%E5%BB%BADocker%E9%95%9C%E5%83%8F.html</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux Containers Linux容器 缩写LXC，其对进程进行隔离，而非一个完整的操作系统。Docker属于LXC的一种封装，提供简单易用的容器使用接口。Docker主要用于提供一次性环境、提供 弹性的云服务、组件微服务架构。&lt;/p&gt;
    
    </summary>
    
      <category term="OPS" scheme="https://blackist.org/categories/OPS/"/>
    
    
      <category term="Linux" scheme="https://blackist.org/tags/Linux/"/>
    
      <category term="OPS" scheme="https://blackist.org/tags/OPS/"/>
    
      <category term="Docker" scheme="https://blackist.org/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化-MVP设计模式</title>
    <link href="https://blackist.org/2019/03/31/android-modulize-mvp/"/>
    <id>https://blackist.org/2019/03/31/android-modulize-mvp/</id>
    <published>2019-03-31T08:12:27.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Anroid MVP是安卓开发中一个经典的话题，当项目较大、参与的开发人员较多，MVP的优势就体现出来了。</p><a id="more"></a><blockquote><p><strong>系列文章</strong></p><p><a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a></p><p><a href="/2018/10/23/android-modulize-router/">Android组件化-组件间通信BRouter</a></p><p><a href="/2019/03/21/android-modulize-ui-theme/">Android组件化-风格统一&amp;主题变色</a></p><p><a href="/2019/03/31/android-modulize-mvp/">Android组件化-MVP设计模式</a></p></blockquote><h2 id="一、经典的MVP"><a href="#一、经典的MVP" class="headerlink" title="一、经典的MVP"></a>一、经典的MVP</h2><blockquote><p>经典的意思，就是又老又香 ^-^</p></blockquote><h3 id="1-1-一句话MVP"><a href="#1-1-一句话MVP" class="headerlink" title="1.1 一句话MVP"></a>1.1 一句话MVP</h3><p>提到Android MVP（Model-View-Presenter）就会想到MVC（Model-View-Controller），C就是Web开发中经常提到的Controller，P则是Android中用来分离Activity逻辑与界面的Presenter。</p><p>MVP核心思想：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MVP把Activity中的UI逻辑抽象成View接口，把业务逻辑抽象成Presenter接口，Model类还是原来的Model。</span><br></pre></td></tr></table></figure><h3 id="1-2-MVP图解"><a href="#1-2-MVP图解" class="headerlink" title="1.2 MVP图解"></a>1.2 MVP图解</h3><p>一图胜千言：</p><p><img src="http://pic.blackist.top/android-modulize-mvp-struc.png" alt="MVP模型图"></p><ul><li>视图View：Activity和Fragment</li><li>逻辑Presenter：业务逻辑和业务管理类等</li><li>模型Model：SharedPreferences、数据库访问（Dao）和网络交互（Api）</li></ul><h2 id="二、Modulize使用MVP"><a href="#二、Modulize使用MVP" class="headerlink" title="二、Modulize使用MVP"></a>二、Modulize使用MVP</h2><p><a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">Modulize项目</a>使用MVP作为基本的开发框架（以登录为例）。</p><h3 id="2-1-Model层的设计"><a href="#2-1-Model层的设计" class="headerlink" title="2.1 Model层的设计"></a>2.1 Model层的设计</h3><p>Model层负责数据交互，包括网络交互、本地数据库交互以及SharedPreferences数据存取。在lib-common中添加抽象类BaseModel，LoginModel等业务模块继承自BaseModel。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="网络交互-okHttp-Retrofit-Rxjava"><a href="#网络交互-okHttp-Retrofit-Rxjava" class="headerlink" title="网络交互 - okHttp+Retrofit+Rxjava"></a>网络交互 - okHttp+Retrofit+Rxjava</h4><p>网络访问使用无话可说的okHttp，结合优雅的Retrofit，加以RxJava，真香！</p><p>使用okHttpClient实例管理全局http访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class OkHttp3Util &#123;</span><br><span class="line"></span><br><span class="line">    private static OkHttpClient mOkHttpClient;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取OkHttpClient对象实例</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static OkHttpClient getOkHttpClient() &#123;</span><br><span class="line"></span><br><span class="line">        if (null == mOkHttpClient) &#123;</span><br><span class="line"></span><br><span class="line">            // build design mode</span><br><span class="line">            mOkHttpClient = new OkHttpClient.Builder()</span><br><span class="line">                    // cookie manager</span><br><span class="line">                    .cookieJar(new CookiesManager())</span><br><span class="line">                    // 网络请求日志</span><br><span class="line">                    .addInterceptor(loggingInterceptor)</span><br><span class="line">                    // 自定义拦截器</span><br><span class="line">                    .addInterceptor(new CommonIntercepter())</span><br><span class="line">                    // set timeout of connection, reading and writing</span><br><span class="line">                    .connectTimeout(10, TimeUnit.SECONDS)</span><br><span class="line">                    .writeTimeout(30, TimeUnit.SECONDS)</span><br><span class="line">                    .readTimeout(20, TimeUnit.SECONDS)</span><br><span class="line">                    .cache(cache)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return mOkHttpClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在lib-common中新建ServiceGenerate类管理、创建Retrofit接口访问实例，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_SERVICE = <span class="string">"http://xxxx:8080/api/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在gson中加入时间格式化，DateDeserializer\DateSerializer为自定义转换类.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">            .registerTypeAdapter(java.util.Date.class, <span class="keyword">new</span> DateDeserializer()).setDateFormat(DateFormat.LONG)</span><br><span class="line">            .registerTypeAdapter(java.util.Date.class, <span class="keyword">new</span> DateSerializer()).setDateFormat(DateFormat.LONG)</span><br><span class="line">            .create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API Retrofit.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit apiGenerator = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(API_SERVICE)</span><br><span class="line">            <span class="comment">// 自定义转换器一定要在gsonConverter前面,否则gson会拦截所有的解析方式</span></span><br><span class="line">            .addConverterFactory(CustomConverterFactory.create())</span><br><span class="line">            <span class="comment">// Gson Converter</span></span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create(gson))</span><br><span class="line">            <span class="comment">// Callback Handler RxJava</span></span><br><span class="line">            .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">            .client(OkHttp3Util.getOkHttpClient())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了统一处理Http接口返回，创建Response响应类，应当和后台接口保持一致的gson格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于Retrofit的登录Api如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface LoginApi &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * user login</span><br><span class="line">     *</span><br><span class="line">     * @param username username</span><br><span class="line">     * @param password password</span><br><span class="line">     * @return user info</span><br><span class="line">     */</span><br><span class="line">    @FormUrlEncoded</span><br><span class="line">    @POST(&quot;login&quot;)</span><br><span class="line">    Observable&lt;Response&lt;User&gt;&gt; loginStu(@Field(&quot;username&quot;) String username, @Field(&quot;password&quot;) String password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库交互-GreenDao"><a href="#数据库交互-GreenDao" class="headerlink" title="数据库交互 - GreenDao"></a>数据库交互 - GreenDao</h4><p>使用J神家的的GreenDao，这个移动端ORM框架还是需要好好学习下的，本文仅介绍GrrenDao在MVP中的使用。在lib-db中创建DBHelper用于管理数据库连接和数据访问对象（Dao）实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class DBHelper &#123;</span><br><span class="line"></span><br><span class="line">    ... instance init</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; AbstractDao getDao(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return session.getDao(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h4><p>使用SP存储用户偏好设置或登录认证数据等碎片数据。</p><h4 id="LoginModel"><a href="#LoginModel" class="headerlink" title="LoginModel"></a>LoginModel</h4><p>Model中持有Retrofit实例（api）、数据库访问对象（Dao）以及SP等本地存储对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class LoginModel extends BaseModel &#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;LoginModel&quot;;</span><br><span class="line"></span><br><span class="line">    private LoginApi api;</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    private SharedPreferences userPreference;</span><br><span class="line"></span><br><span class="line">    public LoginModel() &#123;</span><br><span class="line">        // 使用ServiceGenerator生成api访问类</span><br><span class="line">        api = ServiceGenerator.createAPIService(LoginApi.class);</span><br><span class="line">        // 获取数据库访问对象</span><br><span class="line">        userDao = (UserDao) DBHelper.getInstance().getDao(User.class);</span><br><span class="line">        userPreference = context.getSharedPreferences(&quot;user&quot;, Context.MODE_PRIVATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUser(User user) &#123;</span><br><span class="line">        userPreference.put(&quot;user&quot;, user.getName());</span><br><span class="line">        userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login(String username, String password, Observer&lt;Response&lt;User&gt;&gt; observer) &#123;</span><br><span class="line">        rxSubscribe(api.login(username, password), observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Presenter调用LoginModel方法时传递接口参数和Observer，LoginModel接口请求响应后回调Observer，rxSubscribe()定义在BaseModel中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">rxSubscribe</span><span class="params">(Observable&lt;T&gt; observable, Observer&lt;T&gt; observer)</span> </span>&#123;</span><br><span class="line">        observable.subscribeOn(Schedulers.io())</span><br><span class="line">                .subscribeOn(Schedulers.newThread())<span class="comment">//子线程访问网络</span></span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())<span class="comment">//回调到主线程</span></span><br><span class="line">                .subscribe(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Presenter层的设计"><a href="#2-2-Presenter层的设计" class="headerlink" title="2.2 Presenter层的设计"></a>2.2 Presenter层的设计</h3><p>Presenter持有Model实例，Presenter初始化时实例化Model，在lib-common中加入BasePresenter：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BasePresenter&lt;TView extends BaseView, TModel extends BaseModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    protected TView mView;</span><br><span class="line">    protected TModel mModel;</span><br><span class="line"></span><br><span class="line">    public BasePresenter(TView view) &#123;</span><br><span class="line">        this.mView = view;</span><br><span class="line">        this.mModel = this.getModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract TModel getModel();</span><br><span class="line"></span><br><span class="line">    public void detach() &#123;</span><br><span class="line">        this.mView = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoginPresenter集成BasePresenter，实例化LoginModel：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class LoginPresenter extends BasePresenter&lt;BaseActivity, LoginModel&gt; &#123;</span><br><span class="line"></span><br><span class="line">    public LoginPresenter(BaseActivity activity) &#123;</span><br><span class="line">        super(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected LoginModel getModel() &#123;</span><br><span class="line">        return new LoginModel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void login(String username, String password) &#123;</span><br><span class="line">        // 请求前 加载等待框</span><br><span class="line">        mView.loadHud();</span><br><span class="line">        mModel.loginStudent(username, password, new Observer&lt;Response&lt;User&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onCompleted() &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Response&lt;User&gt; response) &#123;</span><br><span class="line">                // 加载完成  取消等待框</span><br><span class="line">                mView.cancelHud();</span><br><span class="line"></span><br><span class="line">                if (response.OK()) &#123;</span><br><span class="line">                    // 请求成功 回调VIew层进行页面刷新</span><br><span class="line">            mView.onViewEvent(BaseView.VIEW_LOADED, response.getData());</span><br><span class="line">                    // 把用户信息保存在本地</span><br><span class="line">                    mModel.setUser(user);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">                    // 请求失败 回调View层报错</span><br><span class="line">            mView.onViewEvent(LoginActivity.ERROR, null);</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本项目在MVP中未使用接口的方式，在View中实现接口，在Presenter中持有实例并进行接口调用，因为使用接口则每个页面都需要新建一个接口类，较为繁琐。</p><p>本项目MVP使用BaseView中的抽象方法onViewEvent()，每个View继承BaseView后实现onViewEvent(int code, Object param)，Presenter层Attach BaseView后通过mView.onViewEvent()对View进行界面回调处理，View中根据事件code和参数param进行视图处理。</p><blockquote><p>一个Presenter可持有多个Model，定义多个Model对象并在Presenter构造函数中初始化。</p></blockquote><h3 id="2-3-View层的设计"><a href="#2-3-View层的设计" class="headerlink" title="2.3 View层的设计"></a>2.3 View层的设计</h3><p>在lib-common中定义BaseView，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toast</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于Presenter中吐司提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">toast</span><span class="params">(String res)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> resId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于Presenter回调界面操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewEvent</span><span class="params">(<span class="keyword">int</span> code, Object param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在界面中统一处理数据、网络异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewState</span><span class="params">(<span class="keyword">int</span> state)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewState</span><span class="params">(Response response)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载、取消Dialog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadHud</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelHud</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>toast（）：Toast封装，用于在Activity、Fragment或Presenter中弹出用户提示</li><li>findViewById()：主要用于fragment中获取元素使用（组件化开发使用ButterKnife较为繁琐，不建议使用）</li><li>onViewEvent()：View层的回调，用于Presenter网络请求响应后通知View层</li><li>onViewState()：View层的回调。当Presenter层发生错误时统一处理View（网络异常、Http请求错误等）</li><li>loadHud()/cancelHud()：加载ProgressDialog，Presenter发请网络请求时、请求结束后，在Presenter层弹出ProgressDialog</li></ul><h4 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BaseActivity&lt;TPresenter extends BasePresenter&gt; extends AppCompatActivity implements BaseView &#123;</span><br><span class="line"></span><br><span class="line">    protected Handler mUIHandler;</span><br><span class="line"></span><br><span class="line">    protected TPresenter mPresenter;</span><br><span class="line"></span><br><span class="line">    protected KProgressHUD mHud;</span><br><span class="line">    </span><br><span class="line">    // 获取界面layout资源文件</span><br><span class="line">    @LayoutRes</span><br><span class="line">    protected abstract int getLayoutResId();</span><br><span class="line"></span><br><span class="line">    protected abstract void initViewAndData(@Nullable Bundle savedInstanceState);</span><br><span class="line"></span><br><span class="line">    protected abstract TPresenter getPresenter();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        beforeCreate();</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        beforeSetContentView();</span><br><span class="line">        setContentView(this.getLayoutResId());</span><br><span class="line">        // init</span><br><span class="line">        this.init();</span><br><span class="line">        this.initViewAndData(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        // EventBus</span><br><span class="line">        EventBus.getDefault().register(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * before set contentView</span><br><span class="line">     */</span><br><span class="line">    private void beforeSetContentView() &#123;</span><br><span class="line">        // NoTitle</span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        // ScreenPortrait</span><br><span class="line">        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * before create</span><br><span class="line">     */</span><br><span class="line">    private void beforeCreate() &#123;</span><br><span class="line">        // 统一设置主题</span><br><span class="line">        setTheme(UIConfig.getInstance(getApplicationContext()).getThemeId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">    public void onEventMainThread(CommonEvent event) &#123;</span><br><span class="line">        // EventBus统一处理全局异常</span><br><span class="line">        BLog.e(&quot;[Event]: &quot; + event.code);</span><br><span class="line">        if (event.code == CommonEvent.Type.NETWORK_ERROR) &#123;</span><br><span class="line">            onViewState(UIConstants.ViewState.NETWORK_DISCONNECTED);</span><br><span class="line">            if (this.mCommonEvent != null) &#123;</span><br><span class="line">                this.mCommonEvent.onCommonEvent(event.code, event.param);</span><br><span class="line">            &#125;</span><br><span class="line">            // cancel loading hud</span><br><span class="line">            cancelHud();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * init view, e.g commonTitleBar.</span><br><span class="line">     */</span><br><span class="line">    private void init() &#123;</span><br><span class="line">        // view init</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        // 从子类拿到Presenter实例</span><br><span class="line">        this.mPresenter = this.getPresenter();</span><br><span class="line">        // 使用第三方库作为Loading Dialog</span><br><span class="line">        this.mHud = KProgressHUD.create(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onViewState(int state) &#123;</span><br><span class="line">        // 全局异常处理</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onViewState(Response response) &#123;</span><br><span class="line">        // 根据Response处理服务器http响应</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line"></span><br><span class="line">        this.mUIHandler = null;</span><br><span class="line">        // Unregister EventBus</span><br><span class="line">        EventBus.getDefault().unregister(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T extends View&gt; T findViewById(int resId) &#123;</span><br><span class="line">        return super.findViewById(resId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toast(@StringRes final int resId) &#123;</span><br><span class="line">        if (mUIHandler == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        mUIHandler.post(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Toast.makeText(</span><br><span class="line">                        getApplicationContext(),</span><br><span class="line">                        resId,</span><br><span class="line">                        Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void toast(final String res) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void loadHud(int resId) &#123;</span><br><span class="line">        // 加载等待Dialog</span><br><span class="line">        if (mHud == null) &#123;</span><br><span class="line">            mHud = KProgressHUD.create(this);</span><br><span class="line">        &#125;</span><br><span class="line">        mHud.setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)</span><br><span class="line">                .setCancellable(true)</span><br><span class="line">                .setLabel(resId == 0 ? getString(R.string.opt_loading) : getString(resId))</span><br><span class="line">                .setAnimationSpeed(1)</span><br><span class="line">                .setDimAmount(0.5f)</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void cancelHud() &#123;</span><br><span class="line">        if (mHud != null) &#123;</span><br><span class="line">            mHud.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>loadHud()：参考第三方库<a href="https://github.com/Kaopiz/KProgressHUD" target="_blank" rel="noopener">https://github.com/Kaopiz/KProgressHUD</a></li></ul><h4 id="BaseFragment"><a href="#BaseFragment" class="headerlink" title="BaseFragment"></a>BaseFragment</h4><p>类似BaseActivity，加入一些对宿主Activity的回调。</p><p>参考<a href="https://github.com/blackist/modulize/blob/8478eb2a4bdaf7b9f9e2022be0e9462ea82b3eeb/lib-common/src/main/java/org/blackist/common/base/BaseFragment.java" target="_blank" rel="noopener">https://github.com/blackist/modulize/blob/8478eb2a4bdaf7b9f9e2022be0e9462ea82b3eeb/lib-common/src/main/java/org/blackist/common/base/BaseFragment.java</a></p><h4 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h4><p>LoginActivity继承自BaseActivity，实例化LoginPresenter，实现onViewEvent()回调函数：</p><pre><code>public class LoginActivity extends BaseActivity&lt;LoginPresenter&gt; implements View.OnClickListener {    private static final String TAG = &quot;LoginActivity&quot;;    public static final int ERROR = 1000;    @Override    protected int getLayoutResId() {        return R.layout.main_login_activity;    }    @Override    protected void initViewAndData(@Nullable Bundle savedInstanceState) {        initView();        ...    }    @Override    protected LoginPresenter getPresenter() {        return new LoginPresenter(this);    }    @Override    public void onClick(View v) {        ...    }    @Override    public void onViewEvent(int code, Object param) {        switch (code) {            case VIEW_LOADED: {                // 登录成功处理                ...                startActivity(new Intent(this, MainActivity.class));                finish();            }            break;            case ERROR: {                toast(R.string.main_login_error);            }            break;            default:        }    }}</code></pre><blockquote><p>通常情况下一个View对应一个Presenter，也可在View中定义多个Presenter对象并在initViewAndData()中初始化</p></blockquote><p>至此，实现了精简版的Android MVP，本人用在项目开发中问题不大。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000003927200" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003927200</a></p><p><a href="https://juejin.im/post/5a61559051882573351a5fb6" target="_blank" rel="noopener">https://juejin.im/post/5a61559051882573351a5fb6</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anroid MVP是安卓开发中一个经典的话题，当项目较大、参与的开发人员较多，MVP的优势就体现出来了。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="组件化" scheme="https://blackist.org/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="MVP" scheme="https://blackist.org/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Android组件化-UI统一&amp;主题变色</title>
    <link href="https://blackist.org/2019/03/21/android-modulize-ui-theme/"/>
    <id>https://blackist.org/2019/03/21/android-modulize-ui-theme/</id>
    <published>2019-03-21T13:56:19.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>客户端开发中UI设计极其重要，直接影响用户体验和App的品质；其次UI设计应做到样式、排版统一，简化布局文件，方便全局修改和维护。</p><a id="more"></a><blockquote><p><strong>系列文章</strong></p><p><a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a></p><p><a href="/2018/10/23/android-modulize-router/">Android组件化-组件间通信BRouter</a></p><p><a href="/2019/03/21/android-modulize-ui-theme/">Android组件化-风格统一&amp;主题变色</a></p><p><a href="/2019/03/31/android-modulize-mvp/">Android组件化-MVP设计模式</a></p></blockquote><h2 id="一、样式排版统一"><a href="#一、样式排版统一" class="headerlink" title="一、样式排版统一"></a>一、样式排版统一</h2><h3 id="1-1-共用style"><a href="#1-1-共用style" class="headerlink" title="1.1 共用style"></a>1.1 共用style</h3><h4 id="基础颜色表"><a href="#基础颜色表" class="headerlink" title="基础颜色表"></a>基础颜色表</h4><p>在values资源文件夹下添加文件colors.xml，加入常用的基础颜色值，使全局组件色调保持一致：</p><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-color.png" alt="颜色表参考 https://stackoverflow.com/a/7323234/8945448"></p><p>除基础颜色，还可添加App主题色调，使得ActionBar、Tab等组件颜色和主题色保持一致：</p><p><img src="http://pic.blackist.top/android-modulize-ui-color-theme.png" alt="ActionBar TabBar等组件颜色"></p><p><img src="http://pic.blackist.top/android-modulize-ui-style-action-bar.png" alt="ActionBar TabBar"></p><h4 id="统一布局尺寸和文字大小"><a href="#统一布局尺寸和文字大小" class="headerlink" title="统一布局尺寸和文字大小"></a>统一布局尺寸和文字大小</h4><p>Android界面设计需要统一排版，如图标边距、文字大小、ListItem间隔等，在values资源文件夹下添加文件dimen.xml，添加统一的布局距离和文字大小：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_normal"</span>&gt;</span>16sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_small"</span>&gt;</span>14sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_smaller"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_smallest"</span>&gt;</span>10sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_larger"</span>&gt;</span>34dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_biger"</span>&gt;</span>20dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_big"</span>&gt;</span>18dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_small"</span>&gt;</span>12dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_smaller"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_smallest"</span>&gt;</span>8dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tiny"</span>&gt;</span>6dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tinyer"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tinyest"</span>&gt;</span>2dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_border"</span>&gt;</span>12dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>界面排版等的尺寸可以参考如下布局，</p><ul><li>菜单选项内边距、字体颜色、选中颜色、背景色、上线分割线</li><li>ListView中Item的外边距、图标尺寸、图标和内容的间距、内容区标题和内容的文字尺寸颜色、Item分割线</li><li>Tab菜单选项图标尺寸、文字尺寸、Item间隔、Item选中样式</li></ul><p><img src="http://pic.blackist.top/android-modulize-ui-layout-size.png" alt="布局尺寸"></p><h4 id="统一样式"><a href="#统一样式" class="headerlink" title="统一样式"></a>统一样式</h4><p>应用内组件的样式应保持统一，比如按钮、弹窗、菜单列表等，在values资源文件夹下定义styles.xml（或新建文件把样式分离出来，如style-btn.xml），方便全局修改。</p><p>如下在布局文件中添加几个按钮，无任何样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-button-normal.png" alt></p><p>现加入按钮字体、内边距、背景等样式，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/theme_button_selector"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/spacing_smallest"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/spacing_smallest"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">"@dimen/font_normal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>theme-button-selector.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:angle</span>=<span class="string">"-90"</span> <span class="attr">android:endColor</span>=<span class="string">"@color/colorPrimary"</span> <span class="attr">android:startColor</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimaryDark"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span> <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"3dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">stroke</span> <span class="attr">android:width</span>=<span class="string">"1dip"</span> <span class="attr">android:color</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">gradient</span> <span class="attr">android:angle</span>=<span class="string">"-90"</span> <span class="attr">android:endColor</span>=<span class="string">"@color/colorPrimary"</span> <span class="attr">android:startColor</span>=<span class="string">"@color/colorPrimary"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入统一的样式后，三个按钮好看些了^-^：</p><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-button.png" alt></p><p>但布局文件也变得格外冗长，为减少重复的布局代码，抽离通用样式，在styles.xml添加如下元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ButtonTheme"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.Button"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/white<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_margin"</span>&gt;</span>@dimen/spacing_tiny<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingTop"</span>&gt;</span>@dimen/spacing_smallest<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:paddingBottom"</span>&gt;</span>@dimen/spacing_smallest<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@drawable/theme_button_selector<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重新修改布局文件，三个按钮使用通用样式，代码简化了很多：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ButtonTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局重用"><a href="#布局重用" class="headerlink" title="布局重用"></a>布局重用</h4><p>有些布局组件可在全局复用，例如自定义TitleBar、ActionBar，本项目<a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">Modulize</a>使用<a href="https://github.com/wuhenzhizao/android-titlebar" target="_blank" rel="noopener">第三方库CommonTitleBar</a>作为标题栏布局，在layout资源文件夹中定义common_titlebar.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">merge</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.wuhenzhizao.titlebar.widget.CommonTitleBar</span> <span class="attr">xmlns:titlebar</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/titlebar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerTextColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerTextSize</span>=<span class="string">"@dimen/font_normal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:centerType</span>=<span class="string">"textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:fillStatusBar</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:leftImageResource</span>=<span class="string">"@drawable/common_transparent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:leftType</span>=<span class="string">"imageButton"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:rightType</span>=<span class="string">"imageButton"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:showBottomLine</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:statusBarColor</span>=<span class="string">"?attr/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">titlebar:titleBarColor</span>=<span class="string">"?attr/colorPrimary"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">merge</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在activity布局文件中使用include引入此布局，merge标签为了减少视图层级（详细使用参考<a href="https://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="noopener">Android抽象布局</a>）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/common_titlebar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>布局复用可以有效地统一标题栏风格，每个页面设置不同的标题和图标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commonTitleBar = findViewById(R.id.common_titlebar);</span><br><span class="line">commonTitleBar.getCenterTextView().setText(<span class="string">"标题栏"</span>);</span><br><span class="line">commonTitleBar.getRightImageButton().setImageResource(R.drawable.main_action_icon_user);</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-common-style-actionbar.png" alt="ActionBar"></p><h3 id="1-2-UI模块lib-ui"><a href="#1-2-UI模块lib-ui" class="headerlink" title="1.2 UI模块lib-ui"></a>1.2 UI模块lib-ui</h3><p>模块化开发应用模块之间不直接相互依赖，各模块之间内的样式不可直接被其他模块调用，因此有必要创建UI基础库，将公共样式放在UI库中。</p><p>按照<a href="/2018/10/18/android-modulize-common/">Android组件化-基础框架搭建</a>中基础库搭建方法，新建lib-ui存放公共样式和资源文件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├─res</span><br><span class="line">|  ├─values</span><br><span class="line">|  |   ├─colors.xml</span><br><span class="line">|  |   ├─dimens.xml</span><br><span class="line">|  |   ├─strings.xml</span><br><span class="line">|  |   ├─styles.xml</span><br><span class="line">|  |   └theme.xml</span><br><span class="line">|  ├─layout</span><br><span class="line">|  |   └common_titlebar.xml</span><br><span class="line">|  ├─drawable-xxxhdpi</span><br><span class="line">|  |        ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-xxhdpi</span><br><span class="line">|  |        ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-xhdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-mdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable-hdpi</span><br><span class="line">|  |       ├─action_bar_add.png</span><br><span class="line">|  ├─drawable</span><br><span class="line">|  |    ├─common_transparent.xml</span><br><span class="line">|  |    └theme_button_selector.xml</span><br></pre></td></tr></table></figure><p>使lib-common依赖lib-ui，因此各应用模块就可以使用lib-ui中的公共样式。</p><h2 id="二、主题切换"><a href="#二、主题切换" class="headerlink" title="二、主题切换"></a>二、主题切换</h2><p>主题切换功能开发思路如下：</p><ul><li>根据上述布局风格统一原则配置两套主题</li><li>在Activity中为App设置主题</li><li>动态设置主题，主题设置立即生效</li><li>复杂的View组件随主题动态变化</li></ul><h3 id="2-1-主题配置"><a href="#2-1-主题配置" class="headerlink" title="2.1 主题配置"></a>2.1 主题配置</h3><h4 id="配置至少两个主题"><a href="#配置至少两个主题" class="headerlink" title="配置至少两个主题"></a>配置至少两个主题</h4><p>在lib-ui\src\main\res下添加两个资源文件theme-default.xml、theme-dark.xml，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─values</span><br><span class="line">|   ├─theme-dark.xml</span><br><span class="line">|   ├─theme-default.xml</span><br><span class="line">|   └theme.xml</span><br></pre></td></tr></table></figure><p>在theme.xml添加主题父类，theme-default和theme-dark中分别定义两个主题继承theme中的父主题：</p><p>theme.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  Base application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppBaseTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">    &lt;!--&lt;item name=&quot;android:background&quot;&gt;@drawable/main_background&lt;/item&gt;--&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>theme-default.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Default application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;android:windowBackground&quot;&gt;@color/light_gray&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:buttonStyle&quot;&gt;@style/ButtonTheme&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;color name=&quot;colorPrimary&quot;&gt;#289ff4&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorPrimaryDark&quot;&gt;#0b79b7&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorAccent&quot;&gt;@color/white&lt;/color&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;ButtonTheme&quot; parent=&quot;@android:style/Widget.Button&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:textSize&quot;&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_margin&quot;&gt;@dimen/spacing_tiny&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingTop&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingBottom&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:background&quot;&gt;@drawable/theme_button_selector&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>theme-dark.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Dark application theme. --&gt;</span><br><span class="line">&lt;style name=&quot;AppDarkTheme&quot; parent=&quot;AppBaseTheme&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorDarkPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorDarkPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorDarkAccent&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;android:windowBackground&quot;&gt;@color/colorDarkPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:buttonStyle&quot;&gt;@style/DarkButtonTheme&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;color name=&quot;colorDarkPrimary&quot;&gt;#222222&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorDarkPrimaryDark&quot;&gt;#333333&lt;/color&gt;</span><br><span class="line">&lt;color name=&quot;colorDarkAccent&quot;&gt;#333333&lt;/color&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;DarkButtonTheme&quot; parent=&quot;@android:style/Widget.Button&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:textSize&quot;&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textColor&quot;&gt;@color/white&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:layout_margin&quot;&gt;@dimen/spacing_tiny&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingTop&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:paddingBottom&quot;&gt;@dimen/spacing_smallest&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:background&quot;&gt;@drawable/theme_button_selector&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="配置的内容"><a href="#配置的内容" class="headerlink" title="配置的内容"></a>配置的内容</h4><p>主题配置中重要的配置项，参见Material Design的<a href="https://material.io/design/color/#color-theme-creation" target="_blank" rel="noopener">The Color System</a>：</p><ul><li>colorPrimary：基色，跨域整个App各个页面和组件最常用的颜色，常用于应用栏（Appbar）</li><li>colorPrimaryDark：重基色，一般为状态栏（Sytembar）的颜色，与应用栏形成对比色</li><li>colorAccent:着重色，各View被选中或突出显示时的颜色；Item或CardView的背景色</li><li>android:windowBackground：界面背景色</li><li>android:buttonStyle：按钮样式；其他组件样式也可全局定义</li></ul><p><img src="http://pic.blackist.top/android-modulize-ui-theme-color-system.png" alt="颜色系统"></p><p>各样式和value在activity布局文件中使用如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"?android:windowBackground"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"org.blackist.modulize.main.view.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/common_titlebar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_mine"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Mine"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_message"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Message"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_module_theme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/buttonStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Theme"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/spacing_tiny"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:padding</span>=<span class="string">"@dimen/spacing_tiny"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorAccent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Use colorAccent \nAs \nItem Backgroud"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为页面设置背景色，使用 <strong>background=”?android:windowBackground”</strong> 属性;</p><p>colorAccent用作List Item布局 或 局部布局的背景，当主题切换时Item背景随之切换，使用方式 <strong>background=”?attr/colorAccent”</strong>；</p><p>Button等组件的样式使用 <strong>style=”?android:attr/buttonStyle”</strong>设置；</p><p>本项目文字颜色自适应，即根据当前主题，安卓系统会自动设置字黑色或白色；</p><p>从 <strong>?android:windowBackground</strong> 和 <strong>?colorAccent</strong> 中可以看出，根据如下主题配置项配置方式，决定布局文件中使用这些属性的方式：</p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-item.png" alt="主题配置项配置方式"></p><h3 id="2-2-主题切换"><a href="#2-2-主题切换" class="headerlink" title="2.2 主题切换"></a>2.2 主题切换</h3><p>使用SDK中的setTheme方法设置主题，设置主题需要在setContentView()之前调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    // before set ContentView</span><br><span class="line">    setTheme(mThemeDefault ? R.style.setTheme : R.style.AppTheme);</span><br><span class="line">    setContentView(R.layout.main_activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mThemeDefault为boolean类型的值，存储在SharedPreference中，App启动时读取其值使得App记住用户偏好。</p><p>切换后的主题如下：                    </p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-dark_.jpg" alt></p><h4 id="2-3-主题动态切换"><a href="#2-3-主题动态切换" class="headerlink" title="2.3 主题动态切换"></a>2.3 主题动态切换</h4><p>当使用按钮或Switch触发主题设置后，视图已经创建，设置不能立即生效，需要重启App才能看到效果。想要立即生效则需要重建当前栈中所有activity，因此需要获取到所有已加载activity，使用lib-apptools下的AppManager工具类，在Activity的onCreate()中将自身加入Activity栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppManager.getInstance().addActivity(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>在onDestory()中使activity出栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AppManager.getInstance().removeActivity(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>调用AppManager.getInstance().recreateAllActivity()方法重建栈中Activity，使得主题切换立即生效。</p><h2 id="三、组件主题"><a href="#三、组件主题" class="headerlink" title="三、组件主题"></a>三、组件主题</h2><p>配置某些组件跟随主题变换颜色等样式。</p><h3 id="3-1-AlertDialog"><a href="#3-1-AlertDialog" class="headerlink" title="3.1 AlertDialog"></a>3.1 AlertDialog</h3><p>配置Dialog的默认样式类似于Button的全局样式，但稍加复杂一些。</p><p>在theme-default.xml中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default application theme. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"alertDialogTheme"</span>&gt;</span>@style/AlertDialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTitleStyle"</span>&gt;</span>@style/AlertDialogTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialogTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textAppearance"</span>&gt;</span>@style/AlertDialogTitleStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AlertDialogTitleStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.DialogWindowTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>theme-dark.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dark application theme. --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppDarkTheme"</span> <span class="attr">parent</span>=<span class="string">"AppBaseTheme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"alertDialogTheme"</span>&gt;</span>@style/DarkAlertDialog<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.Dialog.Alert"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTitleStyle"</span>&gt;</span>@style/DarkAlertDialogTitle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/text_hint<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@color/colorDarkAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialogTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textAppearance"</span>&gt;</span>@style/DarkAlertDialogTitleStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"DarkAlertDialogTitleStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/TextAppearance.Holo.DialogWindowTitle"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/text_hint<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Activity中new AlertDialog即可，无需多余的样式设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mTypeDialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>)</span><br><span class="line">    .setIcon(R.mipmap.ic_launcher_round)</span><br><span class="line">    .setTitle(<span class="string">"AlertDialog Theme"</span>)</span><br><span class="line">    .setNegativeButton(<span class="string">"Cancel"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .setPositiveButton(<span class="string">"Confirm"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">            dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).create();</span><br><span class="line">mTypeDialog.show();</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-theme-alertdialog-nal.png" alt></p><p>切换主题后，AlertDialog样式随之变化：</p><p><img src="http://pic.blackist.top/android-modulize-ui-theme-alertdialog.png" alt></p><h3 id="3-2-获取当前主题属性"><a href="#3-2-获取当前主题属性" class="headerlink" title="3.2 获取当前主题属性"></a>3.2 获取当前主题属性</h3><p>在某些自定义组件中需要获取App主题色，比如在AlertDialog中添加一个轮滑选择器，自定义组件Whiew（在lib-ui\src\main\java\org\blackist\modulize\ui\widget\whiew下），当设置文本时需要获取当前主题的相关属性来设置样式。</p><h4 id="获取Color"><a href="#获取Color" class="headerlink" title="获取Color"></a>获取Color</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TypedValue typedValue = new TypedValue();</span><br><span class="line">Theme theme = context.getTheme();</span><br><span class="line">theme.resolveAttribute(R.attr.colorPrimary, typedValue, true);</span><br><span class="line">@ColorInt int color = typedValue.data;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="获取Dimen"><a href="#获取Dimen" class="headerlink" title="获取Dimen"></a>获取Dimen</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv.setTextSize(TypedValue.COMPLEX_UNIT_PX, context.getResources().getDimensionPixelSize(R.dimen.font_normal));</span><br></pre></td></tr></table></figure><p><img src="http://pic.blackist.top/android-modulize-ui-theme-prop.png" alt></p><hr><p>项目Github地址：<a href="https://github.com/blackist/modulize" target="_blank" rel="noopener">https://github.com/blackist/modulize</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.25xt.com/android" target="_blank" rel="noopener">https://www.25xt.com/android</a></p><p><a href="https://blog.csdn.net/xyz_lmn/article/details/14524567" target="_blank" rel="noopener">https://blog.csdn.net/xyz_lmn/article/details/14524567</a></p><p><a href="https://material.io/design/color/#color-theme-creation" target="_blank" rel="noopener">https://material.io/design/color/#color-theme-creation</a></p><p><a href="https://stackoverflow.com/questions/29797134/how-to-use-and-style-new-alertdialog-from-appcompat-22-1-and-above" target="_blank" rel="noopener">https://stackoverflow.com/questions/29797134/how-to-use-and-style-new-alertdialog-from-appcompat-22-1-and-above</a></p><p><a href="https://stackoverflow.com/questions/17277618/get-color-value-programmatically-when-its-a-reference-theme" target="_blank" rel="noopener">https://stackoverflow.com/questions/17277618/get-color-value-programmatically-when-its-a-reference-theme</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;客户端开发中UI设计极其重要，直接影响用户体验和App的品质；其次UI设计应做到样式、排版统一，简化布局文件，方便全局修改和维护。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="UI" scheme="https://blackist.org/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>校友录-网站样式设计</title>
    <link href="https://blackist.org/2019/03/14/javaweb-ar-style/"/>
    <id>https://blackist.org/2019/03/14/javaweb-ar-style/</id>
    <published>2019-03-14T11:22:46.000Z</published>
    <updated>2019-06-29T13:53:20.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/blackist/ar" target="_blank" rel="noopener">校友录</a>项目网站样式设计简要说明。</p><a id="more"></a><h2 id="一、门户网站"><a href="#一、门户网站" class="headerlink" title="一、门户网站"></a>一、门户网站</h2><h3 id="1-1-首页轮播图"><a href="#1-1-首页轮播图" class="headerlink" title="1.1 首页轮播图"></a>1.1 首页轮播图</h3><p>在 ar-parent\ar-portal\src\main\webapp\WEB-INF\views\portal-main\index.jsp 中有如下代码：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index.png" alt></p><p>div.carousel中即使首页的轮播图，图片暂不支持后台手动设置，需要存放在 assets/images/school/ 下或assets其它文件夹下面。</p><p>图片尺寸建议采用2600x720的。</p><h3 id="1-2-导航栏样式"><a href="#1-2-导航栏样式" class="headerlink" title="1.2 导航栏样式"></a>1.2 导航栏样式</h3><p>导航栏由两部分组成：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index-header.png" alt></p><p>上面的header，下面的是导航菜单(nav)，这两部分在index.jsp中通过include引入，分别位于 WEB-INF/views/portal-common/header.jsp 和 WEB-INF/views/portal-common/navmenu.jsp。门户网站主要样式在 assets/css/style.css 中定义。</p><h4 id="Header样式"><a href="#Header样式" class="headerlink" title="Header样式"></a>Header样式</h4><p>在style.css中搜索 .top_bg，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-- header_top --*/</span></span><br><span class="line"><span class="selector-class">.top_bg</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#666666</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>background就是header的背景色。</p><h4 id="Nav样式"><a href="#Nav样式" class="headerlink" title="Nav样式"></a>Nav样式</h4><p>在style.css中搜索 .mega_nav，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mega_nav</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">6px</span> <span class="number">5px</span> <span class="number">#CCCBCB</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改background改变Nav整个背景色。Nav中菜单项的颜色在 assets/css/megamenu.css 中定义，找到如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.skyblue</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.color1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background</span>:<span class="number">#204056</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可修改菜单项hover的样式，菜单项背景色等可以自行探索。</p><p>修改后导航栏后整体样式如下（一不小心破相了~）：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-index-style.png" alt></p><h3 id="1-3-表单样式"><a href="#1-3-表单样式" class="headerlink" title="1.3 表单样式"></a>1.3 表单样式</h3><p>门户网站表单组件绝大部分使用bootstrap样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-profile.png" alt></p><p>可根据bootstrap修改按钮等组件样式，本项目参考了一份模板进行设计，整个模板素材存在 ar\ar-tools\model-portal\Bracket1.5\ 下。</p><p>表单样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap.png" alt></p><p>按钮样式：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap-button.png" alt></p><p>表格及分页器：</p><p><img src="http://pic.blackist.top/spring-ar-style-portal-bootstrap-pager.png" alt></p><p>门户网站风格和此模板素材基本保持一致，可参考修改。</p><h2 id="二、后台管理"><a href="#二、后台管理" class="headerlink" title="二、后台管理"></a>二、后台管理</h2><p>后台管理网站样式主要定义在 ar-manage\src\main\webapp\assets\css\admin.css 下。</p><h3 id="1-1-首页样式"><a href="#1-1-首页样式" class="headerlink" title="1.1 首页样式"></a>1.1 首页样式</h3><h4 id="管理页主题title"><a href="#管理页主题title" class="headerlink" title="管理页主题title"></a>管理页主题title</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-header.png" alt></p><p>在 WEB-INF/views/main/index.jsp 中搜索如下代码，修改此处即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 导航 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-topbar-brand"</span>&gt;</span><br><span class="line">    &lt;strong&gt;信电校友录&lt;/strong&gt;</span><br><span class="line">    &lt;small&gt;后台管理&lt;/small&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-footer.png" alt></p><p>在 WEB-INF/views/global/footer.jsp 中修改即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-padding-left"</span>&gt;</span><br><span class="line">CopyRight © 2015 . &lt;a href="#" target="_blank"&gt;徐州工程学院信电学院&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><h4 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h4><p><img src="http://pic.blackist.top/spring-ar-style-manage-index-sidebar.png" alt></p><p>在 WEB-INF/views/global/sidebar.jsp 中修改即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 公告 bookmark --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel am-panel-default admin-sidebar-panel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel-bd"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;span class="am-icon-bookmark"&gt;&lt;/span&gt; 公告</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;时光静好，与君语；细水流年，与君同。—— 信电校友录&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 社群 wiki --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel am-panel-default admin-sidebar-panel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"am-panel-bd"</span>&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;span class="am-icon-tag"&gt;&lt;/span&gt; 社群</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;欢迎来到信电校友录后台管理!&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="1-2-表单样式等"><a href="#1-2-表单样式等" class="headerlink" title="1.2 表单样式等"></a>1.2 表单样式等</h3><p>后台管理网站整站风格参考一套AmazeUI素材，素材存在 ar\ar-tools\model-admin\ 下，</p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui.png" alt></p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui-form.png" alt></p><p>按钮等组件样式可参考<a href="http://amazeui.org/" target="_blank" rel="noopener">Amaze官网</a>：</p><p><img src="http://pic.blackist.top/spring-ar-style-manage-amazeui-website.png" alt></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/blackist/ar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校友录&lt;/a&gt;项目网站样式设计简要说明。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="开源" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Android测试-Monkey Test</title>
    <link href="https://blackist.org/2019/03/13/android-test-monkey-test/"/>
    <id>https://blackist.org/2019/03/13/android-test-monkey-test/</id>
    <published>2019-03-13T01:36:24.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>APP开发过程中，开人员往往自己做一些功能测试和稳定性测试，使用MonkeyTest做<strong>压力测试</strong>是常用方法，及时修复ANR、CRASH提高项目组整体的开发效率。</p><a id="more"></a><h2 id="一、Monkey简介"><a href="#一、Monkey简介" class="headerlink" title="一、Monkey简介"></a>一、Monkey简介</h2><p>Monkey是一种命令行工具，向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，这个工具存在于Android系统/system/framework/monkey.jar，Android设备/模拟器连接到PC后通过adb shell使用此工具，monkey测试流程如下。</p><p><img src="http://pic.blackist.top/android-test-monkey-framework.png" alt="monkey架构"></p><p>因此两种方式使用monkey，第一种在PC端直接运行命令行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey --[params]</span><br></pre></td></tr></table></figure><p>第二种进入shell中使用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">&gt; shell@android: monkey --[params]</span><br></pre></td></tr></table></figure><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>使用如下命令进行monkey测试：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p org.blackist.modulize --throttle <span class="number">100</span> -v -v <span class="number">100</span> &gt; test.log</span><br></pre></td></tr></table></figure><ul><li>-p org.blackist.modulize：测试包名为org.blackist.modulize</li><li>–throttle 100：每100ms发送一次事件</li><li>-v -v：指定日志级别</li><li>> test.log：输出日志到文件</li></ul><p>如下是monkey日志中测试到的ANR和CRASH：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Sleeping for 100 milliseconds</span><br><span class="line">:Sending Key (ACTION_DOWN): 23    // KEYCODE_DPAD_CENTER</span><br><span class="line">// CRASH: cn.edu.zstu.sdmp (pid 17698)</span><br><span class="line">// Short Msg: java.lang.NullPointerException</span><br><span class="line">// Long Msg: java.lang.NullPointerException: Attempt to invoke virtual method &apos;com.wuhenzhizao.titlebar.widget.CommonTitleBar cn.edu.zstu.sdmp.manage.view.ManageActivity.getCommonTitle()&apos; on a null object reference</span><br><span class="line">// Build Label: vivo/PD1603/PD1603:5.1.1/LMY47V/compiler07131528:user/release-keys</span><br><span class="line">// Build Changelist: eng.compiler.20180713.152451</span><br><span class="line">// Build Time: 1531466945000</span><br><span class="line">// java.lang.NullPointerException: Attempt to invoke virtual method &apos;com.wuhenzhizao.titlebar.widget.CommonTitleBar cn.edu.zstu.sdmp.manage.view.ManageActivity.getCommonTitle()&apos; on a null object reference</span><br><span class="line">//      at cn.edu.zstu.sdmp.manage.view.repair.RepairDetailFragment.initView(RepairDetailFragment.java:153)</span><br><span class="line">//      at cn.edu.zstu.sdmp.manage.view.repair.RepairDetailFragment.initViewAndData(RepairDetailFragment.java:113)</span><br><span class="line">//      at cn.edu.zstu.sdmp.common.base.BaseFragment.onCreateView(BaseFragment.java:135)</span><br><span class="line">//      at android.support.v4.app.Fragment.performCreateView(Fragment.java:2354)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1419)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1740)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1809)</span><br><span class="line">//      at android.support.v4.app.BackStackRecord.executeOps(BackStackRecord.java:799)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.executeOps(FragmentManager.java:2580)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2367)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2322)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2229)</span><br><span class="line">//      at android.support.v4.app.FragmentManagerImpl$1.run(FragmentManager.java:700)</span><br><span class="line">//      at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">//      at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">//      at android.os.Looper.loop(Looper.java:135)</span><br><span class="line">//      at android.app.ActivityThread.main(ActivityThread.java:5418)</span><br><span class="line">//      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">//      at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class="line">//      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1037)</span><br><span class="line">//      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:832)</span><br><span class="line">//</span><br><span class="line">// NOT RESPONDING: cn.edu.zstu.sdmp (pid 17698)</span><br><span class="line">ANR in cn.edu.zstu.sdmp (cn.edu.zstu.sdmp/.manage.view.ManageActivity)</span><br><span class="line">PID: 17698</span><br><span class="line">Reason: Input dispatching timed out (Waiting to send key event because the focused window has not finished processing all of the input events that were previously delivered to it.  Outbound queue length: 0.  Wait queue length: 1.)</span><br></pre></td></tr></table></figure><p>可以清楚分析出错误所在的地方，所以monkey是个物美价廉的测试工具啊~</p><h2 id="三、参数说明"><a href="#三、参数说明" class="headerlink" title="三、参数说明"></a>三、参数说明</h2><p>monkey工具参数如下（图片<a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">来源</a>）：</p><p><img src="http://pic.blackist.top/android-test-monkey-params.png" alt="monkey参数"></p><h3 id="3-1-基础参数"><a href="#3-1-基础参数" class="headerlink" title="3.1 基础参数"></a>3.1 基础参数</h3><h4 id="p-lt-允许的包名列表-gt"><a href="#p-lt-允许的包名列表-gt" class="headerlink" title="-p &lt;允许的包名列表&gt;"></a>-p &lt;允许的包名列表&gt;</h4><p>用此参数指定一个或多个包。指定包之后，monkey将只允许系统启动指定的app。如果不指定包， monkey将允许系统启动设备中的所有app。  </p><p>指定一个包：adb shell monkey -p org.blackist.modulize 100   </p><p>指定多个包：adb shell monkey -p org.blackist.modulize  –p org.blackist.brouter  100</p><h4 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h4><p>用亍指定反馈信息级别（信息级别就是日志的详细程度），总共分3个级别，分别对应的参数如下： </p><p>Level 0  :  adb shell monkey -p org.blackist.modulize -v 100         // 缺省值，仅提供启动提示、测试完成和最终结果等少量信息   </p><p>Level 1  :  adb shell monkey -p org.blackist.modulize -v  -v 100     // 提供较为详细的日志，包括每个发送到Activity的事件信息</p><p>Level 2  :  adb shell monkey -p org.blackist.modulize -v  -v  -v 100 // 最详细的日志，包括了测试中选中/未选中的Activity信息</p><p>一般来说，使用Level0即可。</p><h4 id="s-随机数种子"><a href="#s-随机数种子" class="headerlink" title="-s  (随机数种子)"></a>-s <seed> (随机数种子)</seed></h4><p>用亍指定伪随机数生成器的seed值，如果seed相同，则两次Monkey测试所产生的事件序列也相同的。  示例：</p><p>monkey测试1：adb shell monkey -p org.blackist.modulize –s 101 100                </p><p>monkey测试2：adb shell monkey -p org.blackist.modulize –s 101 100 </p><p>这个参数其实比较重要，比如我们只看日志不容易确定错误位置，需要结合monkey的UI测试过程，这时需要执行相同的随机序列复现步骤。</p><h4 id="–throttle-延时ms"><a href="#–throttle-延时ms" class="headerlink" title="–throttle  (延时ms)"></a>–throttle <delay> (延时ms)</delay></h4><p>用亍指定用户操作（即事件）间的时延，单位是毫秒；如果不指定这个参数，monkey会尽可能快地生成和发送消息。 示例：</p><p>adb shell monkey -p org.blackist.modulize –throttle 3000 100   </p><h3 id="3-2-发送的事件类型"><a href="#3-2-发送的事件类型" class="headerlink" title="3.2 发送的事件类型"></a>3.2 发送的事件类型</h3><p>–pct-touch <percent> （点击事件）</percent></p><p>参数percent为此事件的百分比，比如要求monkey完成10次点击事件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p org.blackist.modulize -v --pct-touch 100 10</span><br></pre></td></tr></table></figure><p>可以看到如下日志，Event percentages是事件百分比，点击事件100%，其余都是0：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">:Monkey: seed=<span class="number">1552849997195</span> count=<span class="number">10</span></span><br><span class="line">:AllowPackage: cn.edu.zstu.sdmp</span><br><span class="line">:IncludeCategory: android.intent.category.LAUNCHER</span><br><span class="line">:IncludeCategory: android.intent.category.MONKEY</span><br><span class="line">// Event percentages:</span><br><span class="line">//   <span class="number">0</span>: <span class="number">100</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">1</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">2</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">3</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">4</span>: -<span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">5</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">6</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">7</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">8</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">9</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">//   <span class="number">10</span>: <span class="number">0</span>.<span class="number">0</span>%</span><br><span class="line">:Switch: #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=<span class="number">0</span>x10200000;component=cn.edu.zstu.sdmp/.main.view.SplashActivity;end</span><br><span class="line">    // Allowing <span class="built_in">start</span> of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=cn.edu.zstu.sdmp/.main.view.SplashActivity &#125; <span class="keyword">in</span> package cn.edu.zstu.sdmp</span><br></pre></td></tr></table></figure><p>–pct-motion <percent> （动作事件）</percent></p><p>–pct-trackball <percent> （轨迹球事件）</percent></p><p>–pct-nav <percent> （基本导航事件，输入设备的上、下、左、右）</percent></p><p>–pct-majornav <percent> （主要导航事件，兼容中间键，返回键，菜单按键）</percent></p><p>–pct-syskeys <percent> （系统导航事件，HOME、BACK及拨号音量键）</percent></p><p>–pct-appswitch <percent> （启动App事件）</percent></p><p>–pct-anyevent <percnet> (不常用事件)</percnet></p><p>–ignore-crashes （忽略崩溃事件 CRASH）</p><p>–ignore-timeouts （忽略超时事件 ANR）</p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><p>monkey test 执行后分析保存的日志，可以搜索CRASH、ANR、Exception等关键字查看错误信息，详细的日志分析参考<a href="http://www.cnblogs.com/wfh1988/archive/2010/11/16/1878224.html" target="_blank" rel="noopener">http://www.cnblogs.com/wfh1988/archive/2010/11/16/1878224.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yuti.site/2019/03/02/MonkeyTesting/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://yuti.site/2019/03/02/MonkeyTesting/?tdsourcetag=s_pctim_aiomsg</a></p><p><a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/p/4815134.html</a></p><p><a href="https://blog.csdn.net/gzh0222/article/details/6631988" target="_blank" rel="noopener">https://blog.csdn.net/gzh0222/article/details/6631988</a></p><p><a href="https://blog.csdn.net/viewsky11/article/details/53889143" target="_blank" rel="noopener">https://blog.csdn.net/viewsky11/article/details/53889143</a></p><p><a href="https://www.cnblogs.com/TankXiao/p/4815134.html" target="_blank" rel="noopener">https://www.cnblogs.com/TankXiao/p/4815134.html</a></p><p><a href="https://blog.csdn.net/MTbaby/article/details/78792215" target="_blank" rel="noopener">https://blog.csdn.net/MTbaby/article/details/78792215</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;APP开发过程中，开人员往往自己做一些功能测试和稳定性测试，使用MonkeyTest做&lt;strong&gt;压力测试&lt;/strong&gt;是常用方法，及时修复ANR、CRASH提高项目组整体的开发效率。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blackist.org/categories/Android/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="https://blackist.org/tags/android/"/>
    
      <category term="测试" scheme="https://blackist.org/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="monkey" scheme="https://blackist.org/tags/monkey/"/>
    
  </entry>
  
  <entry>
    <title>校友录-项目线上部署</title>
    <link href="https://blackist.org/2019/03/09/javaweb-ar-deploy-path/"/>
    <id>https://blackist.org/2019/03/09/javaweb-ar-deploy-path/</id>
    <published>2019-03-09T12:11:47.000Z</published>
    <updated>2019-06-29T13:53:20.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/blackist/ar" target="_blank" rel="noopener">校友录</a>作为一个具备门户网站服务、后台管理功能的完整项目，可以部署上线使用，线上部署需要注意些事项，本文就笔者的开发过程做个记录。</p><a id="more"></a><h2 id="一、项目编译"><a href="#一、项目编译" class="headerlink" title="一、项目编译"></a>一、项目编译</h2><p>校友录是基于maven构建的多模块项目，ar-parent是父模块，ar-common、ar-manage、ar-portal是子模块，ar-common中主要存放一些实体类、与数据库交互的Mapper文件以及一些基类和工具类，ar-manage、ar-portal皆依赖ar-common，在编译时需要首先编译ar-common并安装到本地，但其实编辑顺序maven可以自行判断，我们只需要执行编译命令即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├─ar-parent</span><br><span class="line">   ├─ar-common</span><br><span class="line">   ├─ar-manage</span><br><span class="line">   └─ar-portal</span><br></pre></td></tr></table></figure><p>校友录项目配置了maven编译插件<strong>maven-war-plugin</strong>，推荐在本地编译项目不建议在服务器构建，项目将以war包的形式部署到tomcat，在ar-parent目录下执行编译命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean &amp;&amp; mvn install &amp;&amp; mvn package</span><br></pre></td></tr></table></figure><p>编译完成后可看到如下日志：</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-compile-ok.png" alt="校友录构建"></p><p>构建好的ar-portal.war在ar-parent/ar-portal/target/目录下。</p><h2 id="二、服务器配置"><a href="#二、服务器配置" class="headerlink" title="二、服务器配置"></a>二、服务器配置</h2><p>本文以服务器Ubuntu16.04，JDK1.8，Tomcat8.5为例</p><h3 id="2-1-安装JDK1-8"><a href="#2-1-安装JDK1-8" class="headerlink" title="2.1 安装JDK1.8"></a>2.1 安装JDK1.8</h3><p>添加Oracle的PPA(Personal Package Archive)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure><p>添加完成后依次执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>安装成功后验证下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -version</span><br></pre></td></tr></table></figure><p>设置java的环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>文件末尾添加如下内容（替换自己的java路径）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=&quot;/usr/lib/jvm/java-8-oracle&quot;</span><br></pre></td></tr></table></figure></p><p>最后重载环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/environment</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure></p><h3 id="2-2-安装tomcat"><a href="#2-2-安装tomcat" class="headerlink" title="2.2 安装tomcat"></a>2.2 安装tomcat</h3><p>下载<a href="http://apache.cs.utah.edu/tomcat/tomcat-8/v8.5.38/bin/apache-tomcat-8.5.38-fulldocs.tar.gz" target="_blank" rel="noopener">Tomcat8.5</a>至服务器，建议放在 /opt/ 目录下解压缩即可。</p><p>tomcat默认使用8080端口，可在conf/server.xml中配置端口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector executor=&quot;tomcatThreadPool&quot;</span><br><span class="line">   port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">   connectionTimeout=&quot;20000&quot;</span><br><span class="line">   redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-安装MySQL5-1数据库"><a href="#2-3-安装MySQL5-1数据库" class="headerlink" title="2.3 安装MySQL5.1数据库"></a>2.3 安装MySQL5.1数据库</h3><p>安装MySQL5.1数据库，使用可视化<a href="http://pic.blackist.top/spring-ar-deploy-path-NavicatPro.zip" target="_blank" rel="noopener">客户端Navicat等</a>新建ar数据库，编码utf-t，导入数据库表结构ar-mysql-data.sql。</p><p>如果数据库用户名密码和项目中<strong>ar-parent\ar-portal\src\main\resources\config.properties</strong>中不一致，则修改项目配置并重新编译上传服务器。</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-mysql-config.png" alt="校友录数据库"></p><h2 id="三、应用发布"><a href="#三、应用发布" class="headerlink" title="三、应用发布"></a>三、应用发布</h2><h3 id="3-1-war包发布"><a href="#3-1-war包发布" class="headerlink" title="3.1 war包发布"></a>3.1 war包发布</h3><p>war放在tomcat的webapps/目录下，执行tomcat/bin/下的./startup.sh，tomcat即可启动。</p><p>启动过程中可能出现异常，此时可监听tomcat日志，在tomcat/logs/下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f catalina.out</span><br></pre></td></tr></table></figure><p>监听到如下日志，说明项目启动成功：</p><p><img src="http://pic.blackist.top/spring-ar-deploy-path-project-init.png" alt="校友录启动"></p><h3 id="3-2-静态资源路径"><a href="#3-2-静态资源路径" class="headerlink" title="3.2 静态资源路径"></a>3.2 静态资源路径</h3><p>笔者最初开发的时候，jsp页面中采用如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">// 获取ar-portal</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">// 获取 http://localhost:8080/</span><br><span class="line">String basePath = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort()</span><br><span class="line">+ path + &quot;/&quot;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>如此，页面中的静态资源文件、a标签超链接和Form的action都以<a href>http://localhost:8080/ar-portal/</a>作为基础路径，在本地开发没有任何个问题，当部署到服务器时网站界面一篇空白，我的大脑一阵抽搐，知道肯定是路径出了问题。</p><p>经过排查就是这个basePath引起的，部署到公网服务器资源路径应该是<a href>http://公网ip:8080/ar-portal/</a>，可界面中静态资源等的路径依然是localhost…</p><p>解决路径问题较好的实践是在路径前加入项目环境路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 静态资源路径加入Spring的环境路径 $&#123;pageContext.request.contextPath&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ta/show.action?userId=$&#123;member.userId&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"min-height: 125px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;member.portrait&#125;"</span> <span class="attr">class</span>=<span class="string">"img-responsive center-block"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"max-height: 125px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        $&#123;member.trueName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"assets/images/logo/title-logo.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- a标签超链接加入Spring的环境路径 $&#123;pageContext.request.contextPath&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/ta/show.action?userId=$&#123;member.userId&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"min-height: 125px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;member.portrait&#125;"</span> <span class="attr">class</span>=<span class="string">"img-responsive center-block"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"max-height: 125px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        $&#123;member.trueName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-js中处理环境路径"><a href="#3-3-js中处理环境路径" class="headerlink" title="3.3 js中处理环境路径"></a>3.3 js中处理环境路径</h3><p>独立的js文件无法通过 ${pageContext.request.contextPath} 获取环境路径，可以通过location获取contextPath，如下getContextPath()可放在全局js中，这样在任意文件中都可以调用此方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取 contextPath</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getContextPath() &#123;</span><br><span class="line">    var pathName = document.location.pathname;</span><br><span class="line">    var index = pathName.substr(1).indexOf(&quot;/&quot;);</span><br><span class="line">    var result = pathName.substr(0, index + 1);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.post(&apos;classroom/joinClass.action&apos;, &#123;</span><br><span class="line">&quot;userId&quot; : userId,</span><br><span class="line">&quot;classId&quot; : classId</span><br><span class="line">&#125;, function(data) &#123;</span><br><span class="line">window.location.reload();</span><br><span class="line">&#125;);</span><br><span class="line">// 在ajax的url中加入环境路径</span><br><span class="line">$.post(getContextPath() + &apos;/classroom/joinClass.action&apos;, &#123;</span><br><span class="line">&quot;userId&quot; : userId,</span><br><span class="line">&quot;classId&quot; : classId</span><br><span class="line">&#125;, function(data) &#123;</span><br><span class="line">window.location.reload();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>整个项目jsp、js的路径翻修一通，那可真是酸爽。</p><h2 id="四、Nginx域名解析"><a href="#四、Nginx域名解析" class="headerlink" title="四、Nginx域名解析"></a>四、Nginx域名解析</h2><p>自行安装nginx软件，域名商控制台设置域名解析到服务器ip，在/etc/nginx/conf.d/下新建配置文件，文件名任意以.conf结尾即可，如tomcat.conf，配置文件中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name tomcat.blackist.top;</span><br><span class="line">        listen      80;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即当通过域名访问时，访问被代理到本地tomcat的localhost:8080服务，通过域名<a href="http://tomcat.blackist.top/ar-portal/index.action" target="_blank" rel="noopener">http://tomcat.blackist.top/ar-portal</a>即可访问到部署在服务器上的Web应用。</p><hr><p>项目地址：<a href="https://github.com/blackist/ar" target="_blank" rel="noopener">https://github.com/blackist/ar</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/blackist/ar&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;校友录&lt;/a&gt;作为一个具备门户网站服务、后台管理功能的完整项目，可以部署上线使用，线上部署需要注意些事项，本文就笔者的开发过程做个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="https://blackist.org/categories/JavaWeb/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="javaweb" scheme="https://blackist.org/tags/javaweb/"/>
    
      <category term="开源" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="校友录" scheme="https://blackist.org/tags/%E6%A0%A1%E5%8F%8B%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>弱网测试环境搭建</title>
    <link href="https://blackist.org/2019/02/28/dev-network-weak-network-env/"/>
    <id>https://blackist.org/2019/02/28/dev-network-weak-network-env/</id>
    <published>2019-02-28T02:11:20.000Z</published>
    <updated>2019-06-16T09:47:35.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Web应用、App应用测试中需要进行弱网测试，测试网络不稳定时应用做出的反应和提示是否友好、无歧义。通常情况下不稳定的网络环境使用工具来模拟，本文通过Fiddler设置网络规则限制应用的网络请求时间，达到弱网测试的目的。</p><a id="more"></a><h2 id="一、弱网环境搭建"><a href="#一、弱网环境搭建" class="headerlink" title="一、弱网环境搭建"></a>一、弱网环境搭建</h2><p>在windows操作系统中，下载解压<a href="http://pic.blackist.top/dev-network-Fiddler.rar" target="_blank" rel="noopener">Fiddler</a>(中文版，可到<a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">官网</a>安装最新原版)，打开软件主界面。</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-main.png" alt></p><h3 id="设置网络规则"><a href="#设置网络规则" class="headerlink" title="设置网络规则"></a>设置网络规则</h3><p>选项 Rule(规则)-&gt;Custom Rule(自定义规则)，弹出规则编辑器Fiddler Script编辑器，</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-main-script.png" alt></p><p>在编辑器中寻找如下代码段(Ctrl+F寻找关键字 m_SimulateModem)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">"300"</span>; </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">"150"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顾名思义，”request-trickle-delay”表示网络请求延时，”response-trickle-delay”表示网络响应延时，单位是毫秒(ms)。规则进行如下设置并保存，则网络请求延时3秒，网络响应延时3.5秒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">"3000"</span>; </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">"3500"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用网络限制"><a href="#应用网络限制" class="headerlink" title="应用网络限制"></a>应用网络限制</h3><p>修改并保存规则后，需要应用到系统中，选项 Rule(规则)-&gt;Performance(性能)-&gt;选中Simulate Modems Speeds(模拟调制解调器速度)，即可开启网络延迟</p><h3 id="扩展网络规则"><a href="#扩展网络规则" class="headerlink" title="扩展网络规则"></a>扩展网络规则</h3><p>设置固定的网络延时会使网络一直处于虚弱的环境，时好时坏的网络更贴近实际网络，修改规则可实现动态变化的网络环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机整数</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">randInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(max-min)+min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_SimulateModem) &#123;</span><br><span class="line">    <span class="comment">// Delay sends by 300ms per KB uploaded.</span></span><br><span class="line">    oSession[<span class="string">"request-trickle-delay"</span>] = <span class="string">""</span> + randInt(<span class="number">1</span>, <span class="number">6000</span>); </span><br><span class="line">    <span class="comment">// Delay receives by 150ms per KB downloaded.</span></span><br><span class="line">    oSession[<span class="string">"response-trickle-delay"</span>] = <span class="string">""</span> + randInt(<span class="number">1</span>, <span class="number">3000</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Web应用弱网环境测试"><a href="#Web应用弱网环境测试" class="headerlink" title="Web应用弱网环境测试"></a>Web应用弱网环境测试</h2><p>基于以上搭建的PC端弱网环境，在本机通过浏览器等访问Web应用即可实现弱网环境测试。</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-console-web.png" alt></p><h2 id="移动应用弱网环境测试"><a href="#移动应用弱网环境测试" class="headerlink" title="移动应用弱网环境测试"></a>移动应用弱网环境测试</h2><p>移动端进行弱网测试时，iPhone可通过系统设置实现弱网环境，但移动设备一般通过PC端配置弱网环境，移动端与PC处于同一网段并设置网络代理，由PC端控制移动端的网络环境。</p><h3 id="Fiddler设置远程连接"><a href="#Fiddler设置远程连接" class="headerlink" title="Fiddler设置远程连接"></a>Fiddler设置远程连接</h3><p>基于以上Fiddler配置，接着Tools(工具)-&gt;选项(Options)-&gt;Connection(连接)，配置如下：</p><p><img src="http://pic.blackist.top/dev-network-weak-fiddler-remote-connection.png" alt></p><h3 id="安卓设备设置代理"><a href="#安卓设备设置代理" class="headerlink" title="安卓设备设置代理"></a>安卓设备设置代理</h3><p>在连接的wifi界面中，设置手动代理，填写PC端代理的的ip和端口号，配置完成后安卓设备上的所有网络请求都被代理到Fiddler。</p><p><img src="http://pic.blackist.top/dev-network-weak-android-proxy.jpg" alt></p><p>ip通过PC端命令ipconfig查看:</p><p><img src="http://pic.blackist.top/dev-network-weak-proxy-ip.png" alt></p><p>若PC连接wifi，则选择WLAN适配器的ip。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/u010618194/article/details/76652513" target="_blank" rel="noopener">https://blog.csdn.net/u010618194/article/details/76652513</a><br><a href="https://www.jianshu.com/p/c0b5ec817617" target="_blank" rel="noopener">https://www.jianshu.com/p/c0b5ec817617</a><br><a href="http://insights.thoughtworkers.org/mobile-testing-traps/" target="_blank" rel="noopener">http://insights.thoughtworkers.org/mobile-testing-traps/</a><br><a href="https://www.jianshu.com/p/728a993329b2?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.jianshu.com/p/728a993329b2?tdsourcetag=s_pctim_aiomsg</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Web应用、App应用测试中需要进行弱网测试，测试网络不稳定时应用做出的反应和提示是否友好、无歧义。通常情况下不稳定的网络环境使用工具来模拟，本文通过Fiddler设置网络规则限制应用的网络请求时间，达到弱网测试的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="https://blackist.org/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://blackist.org/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何为你的代码选择一个开源协议</title>
    <link href="https://blackist.org/2019/01/18/public-open-source-license/"/>
    <id>https://blackist.org/2019/01/18/public-open-source-license/</id>
    <published>2019-01-18T01:24:02.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>相信很多刚踏入软件这个行业的小伙伴一如当初的我，对开源软件的各种协议不甚了解被搞昏了头脑。毕竟对于一个新生程序员来说，如何写好代码才是亟待解决的问题，无暇了解这些。随着你项目做得多了代码写得多了，你会发现编码过程中会不时用到其他人的成果，一个项目下来多少会引入一些优秀的库，别人放在公网上开源的DLL，以及一些算法等等。细心的你会注意到即使只是一小段代码，优秀的作者都在最开始会简单地附上一段关于许可的声明，或者说是协议比如”Licensed under the MIT license”，并且一些博客也会标明”此文章发表在CC协议下”。而如果我们Copy了别人的代码或者文字同时没注意这些的话，在国外法律意识特别强的环境下，我们的作品会因触犯别人的权益而违法。因为好多开源协议最低要求是使用者需要保留原作者对代码的声明，不声不响地就拿来用了必然导致恶果。</p><p>所以开源不等于免费，开源也不等于没有约束。</p><a id="more"></a><h2 id="一、何为License"><a href="#一、何为License" class="headerlink" title="一、何为License"></a>一、何为License</h2><p>License是软件的授权许可，里面详尽表述了你获得代码后拥有的权利，可以对别人的作品进行何种操作，何种操作又是被禁止的。软件协议可分为开源和商业。当然本文要讨论的当然是开源协议。</p><p>对于商业协议，或者叫法律声明、许可协议，每个软件会有自己的一套行文，由软件作者或专门律师撰写。这是什么惊为天人的东西嘛还得请专门的律师。因为涉及到以后侵权打官司这种事情，这种商业条款的行文是非常严谨而讲究的，记得以前看到句调侃的话：’如果法律文件不写得那么生涩难懂，律师们就没饭吃了’，就是说任何文字一旦上升到法律的层次，不要说你接受完了九年义务教育，就是考了个专八也会觉得英语白学了，直接的法律协议什么的那不是给常人看的。而至于法律条款缘何会晦涩难懂，这个偏题有点偏远了，可以查看<a href="https://rararizal.wordpress.com/2011/12/04/why-is-the-legal-language-so-hard-to-understand-part-1/" target="_blank" rel="noopener">这里</a>了解。看累了？下面是欢乐时刻，奉上一个协议相关的Joke（<a href="http://news.mydrivers.com/1/277/277017.htm" target="_blank" rel="noopener">笑崩！苹果iOS7升级协议条款中员工神吐槽</a>）。</p><p>所以对于大多数人来说，不用自己花大把时间去写许可协议，选择一分广为流传的开源协议是个不错的选择，如果你的作品是开源的话，这样省时又省心。</p><h2 id="二、选择一分协议的好处"><a href="#二、选择一分协议的好处" class="headerlink" title="二、选择一分协议的好处"></a>二、选择一分协议的好处</h2><p>你的作品如果不是定性为全商业性质，可以考虑选择一分流行度比较高的开源协议。具体来说的话，你肯定希望作品能够被多数人分享查阅吧，不但提高自己业界的知名度，同时也方便了需要的人为开源做出了贡献。换句话说，你不分享出来的话你的作品的意义何在呢（当然，自己捣腾的私人东西还是自己保留吧）？可是一旦你把你的代码贴出来，这就表示任何人都可以看到并获取，之后发生的事情你无法控制，有的人或许稍微修改一下放进自己的代码中，有的把你的软件改个名字拿去贩卖，有的甚至会拿去把作者名字改为自己然后拿去找工作什么的，而不会有人知道这个作品的原作者，背后辛勤付出了的人。所以为了公开分享你的代码，同时又让你对代码保留一定权利，在作品中声明一个许可协议是非常有必要的，这是很多新人所忽略的问题，同时很多人在使用别人的劳动成果时也会忽视协议的存在，这样不好。所以你会看到我的博客里面时不时会给出连接指向来源页面，同时文末也会列出所有参考过的文章。我相信我做到了这点，别人在转载我的文章的时候，也可以做到这点，这样营造出来的氛围一定会非常和谐，互相尊重/Show Respect。</p><p>多说一句，一个事实让你了解国外开发者在尊重他人劳动成果方面做得是如何的到位，如果A的作品是因为B的作品的启发而来，A甚至都没有使用B任何一句代码，但A会在他的作品里面指明是受到了B的启发”Inspired by XXX link :<a href="http://www.blah.com&quot;。" target="_blank" rel="noopener">http://www.blah.com&quot;。</a></p><p>当然有人会觉得，有了一分协议声明在那里，我就需要鸟你么，我拿来用了把作者名字去掉同时还要加上我的名字，你咬我？！这是后话，只是在利益很小的情况下，或者作者不知情的情况下，作者不会追究什么责任，但如果你的产品做成功了，那就不一定了。另外就是，有协议和没声明协议的裸代码是有非常重要区别的，一般作品当中没声明协议的默认为Copy right的，也就是版权保留。此种情况表明他人没有任何授权，不得复制分发修改使用等等，但一如上面所讨论的，这样的话还何来开源，何来分享呢。有了协议的声明，在未来你的维权上面会方便很多，让你的作品在分享的同时保留了自身的一些权利。</p><h2 id="三、快速选择"><a href="#三、快速选择" class="headerlink" title="三、快速选择"></a>三、快速选择</h2><p>目前流行的开源协议有很多，并且同一款协议有很多变种，比如你或许看到过’ CC Attribution-NoDerivs’,’ CC Attribution-NonCommercial’同属CC协议（后面会有介绍）。如此纷繁的协议该如何选择？协议太宽松会导致作者丧失对作品的很多权利，太严格又不便于使用者使用及作品的传播。所以除了协议多之外，你还要考虑你对作品想保留哪些权利，放开哪些限制。</p><p>如果你不想了解太多，只是想要一个简直直接的答案，下面给出的建议或许适合你。下方关于协议的选择及表格来自GitHub <a href="https://choosealicense.com/" target="_blank" rel="noopener">choosealicence</a>项目。</p><h3 id="3-1-简单宽松的协议"><a href="#3-1-简单宽松的协议" class="headerlink" title="3.1 简单宽松的协议"></a>3.1 简单宽松的协议</h3><p>如果你只想要一个简单点的协议不想太麻烦的话。</p><p><a href="https://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT协议</a>相对宽松但还是抓住了要点的。此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。jQuery和Rails就是MIT协议。</p><h3 id="3-2-考虑有专利的情况"><a href="#3-2-考虑有专利的情况" class="headerlink" title="3.2 考虑有专利的情况"></a>3.2 考虑有专利的情况</h3><p>如果你的作品中涉及到专利相关。</p><p><a href="https://choosealicense.com/licenses/apache-2.0/" target="_blank" rel="noopener">Apache协议</a>也是个相对宽松与MIT类似的协议，但它简单指明了作品归属者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。Apache服务器，SVN还有NuGet等是使用的Apache协议。</p><h3 id="3-3-代码分享与促进"><a href="#3-3-代码分享与促进" class="headerlink" title="3.3 代码分享与促进"></a>3.3 代码分享与促进</h3><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p><p>GPL（<a href="https://choosealicense.com/licenses/gpl-2.0/" target="_blank" rel="noopener">V2</a>或<a href="https://choosealicense.com/licenses/gpl-3.0/" target="_blank" rel="noopener">V3</a>）是一种版本自由的协议（可以参照copy right来理解，后者是版本保留，那copyleft便是版权自由，或者无版权，但无版权不代表你可以不遵守软件中声明的协议）。此协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布。此协议的版本3与版本2相近，只是多3中加了条对于不支持修改后代码运行的硬件的限制（没太明白此句话的内涵）。</p><h3 id="四、各协议授权详情"><a href="#四、各协议授权详情" class="headerlink" title="四、各协议授权详情"></a>四、各协议授权详情</h3><p>下面是更多开源协议的一个表格任君选择，总有一款是你的菜。</p><p>不过先来了解一些下方表格中出现的用词的解释：</p><ul><li>协议和版权信息(License and copyright notice)：在代码中保留作者提供的协议和版权信息</li><li>声明变更(State Changes)：在代码中声明对原来代码的重大修改及变更</li><li>公开源码(Disclose Source)：代码必需公开。如果是基于LGPL协议 下，则只需使用的开源代码公开，不必将整个软件源码公开</li><li>库引用(Library usage)：该库可以用于商业软件中</li><li>责任承担(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果</li><li>商标使用(Use Trademark)：可以使用作者的姓名，作品的Logo，或商标</li><li>附加协议(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等</li></ul><p><img src="http://pic.blackist.top/public-open-source-license-how_to_choose_a_license.html.png" alt="开源协议"></p><p>最流行的六种—-<a href="https://choosealicense.com/licenses/gpl-2.0/" target="_blank" rel="noopener">GPL</a>、<a href="https://choosealicense.com/licenses/bsd-2-clause/" target="_blank" rel="noopener">BSD</a>、<a href="https://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT</a>、<a href="https://choosealicense.com/licenses/mpl-2.0/" target="_blank" rel="noopener">Mozilla</a>、<a href="https://choosealicense.com/licenses/apache-2.0/" target="_blank" rel="noopener">Apache</a>和<a href="https://choosealicense.com/licenses/lgpl-2.1/" target="_blank" rel="noopener">LGPL</a>，六种许可证之间的最大区别如下图（参考<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰文章</a>）：</p><p><img src="http://pic.blackist.top/public-open-source-license.png" alt="开源协议"></p><h2 id="五、非代码类作品的协议"><a href="#五、非代码类作品的协议" class="headerlink" title="五、非代码类作品的协议"></a>五、非代码类作品的协议</h2><p>上面各协议只是针对软件或代码作品，如果你的作品不是代码，比如视频，音乐，图片，文章等，共享于公众之前，也最好声明一下协议以保证自己的权益不被侵犯。针对非代码的数字作品的协议，最通用的莫过于<a href="https://creativecommons.org/choose/" target="_blank" rel="noopener">Creative Commons</a>(也是你经常在别人博客下面可以看到的CC协议)协议。所以现在你见到博客园别人文章下面的签名就不会感到陌生了。</p><h2 id="六、无协议"><a href="#六、无协议" class="headerlink" title="六、无协议"></a>六、无协议</h2><p>你没有义务也没人非要你必需在自己的代码作品里面加上一个开源协议。但一如上文所讨论过的优点，如果你想把代码分享出来，最好还是选择一个适合的开源协议，这样别人用着放心。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>转载自 <a href="http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a><br>参考 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多刚踏入软件这个行业的小伙伴一如当初的我，对开源软件的各种协议不甚了解被搞昏了头脑。毕竟对于一个新生程序员来说，如何写好代码才是亟待解决的问题，无暇了解这些。随着你项目做得多了代码写得多了，你会发现编码过程中会不时用到其他人的成果，一个项目下来多少会引入一些优秀的库，别人放在公网上开源的DLL，以及一些算法等等。细心的你会注意到即使只是一小段代码，优秀的作者都在最开始会简单地附上一段关于许可的声明，或者说是协议比如”Licensed under the MIT license”，并且一些博客也会标明”此文章发表在CC协议下”。而如果我们Copy了别人的代码或者文字同时没注意这些的话，在国外法律意识特别强的环境下，我们的作品会因触犯别人的权益而违法。因为好多开源协议最低要求是使用者需要保留原作者对代码的声明，不声不响地就拿来用了必然导致恶果。&lt;/p&gt;
&lt;p&gt;所以开源不等于免费，开源也不等于没有约束。&lt;/p&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="开源协议" scheme="https://blackist.org/tags/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>怎样挑选合适的安全座椅</title>
    <link href="https://blackist.org/2019/01/02/public-how-to-buy-car-seat/"/>
    <id>https://blackist.org/2019/01/02/public-how-to-buy-car-seat/</id>
    <published>2019-01-02T09:14:38.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-1-大小"><a href="#1-1-大小" class="headerlink" title="1.1 大小"></a>1.1 大小</h3><p>安全座椅跟衣服和鞋子一样，也分大小和使用年龄的，合适的大小能最好地发挥保护作用。</p><p>按Britax美国的标准，分成以下几种类型：</p><ul><li>婴儿提篮（Infant Car Seats），适用于出生到13公斤</li><li>可变座椅（Convertible Car Seats），适用于出生到32公斤</li><li>增高垫（Booster），适用于11公斤到41公斤</li></ul><a id="more"></a><p>Britax在中国在欧洲和中国分得更细一些，有0+组、0+1组、1组、1+2+3组、2+3组这么多，上面的可变座椅（Convertible Car Seats）其实相当于0+1+2+3组，但中国区没卖的，只能从美国买了运回来。</p><p>其它品牌的，适用体重范围有一点点差别，分组和安全标准都是非常接近的。</p><p>厂商所说的适用范围，是从产品安全性能角度来说的，以婴儿提篮为例，厂家建议的最大体重是13公斤，就是说，14公斤的宝宝，再坐婴儿提篮就已经不安全了，超出了婴儿提篮的承重限制。实际上，根据中国的现实情况，13公斤的小孩基本都有两岁了，让他躺在婴儿提篮中是很难的，小孩自己会要求坐着，而不是躺着。</p><p><strong>选购指南</strong></p><ul><li>如果你的宝宝在2岁以内（或者还在妈妈肚子里），建议购买可变座椅（Convertible Car Seats），如Britax Advocate 70。</li><li>如果你的宝宝已经2岁以上，建议购买增高垫（Booster），如Britax Pinnacle 90。虽然2岁还可以继续坐Advocate 70，但Advocate 70最多只能用到70磅（32公斤），而Pinnacle 90最多能用到90磅（41公斤）</li><li>如果你的宝宝在2岁以内，且预算充足（比方案1多awx 1600-2000元），可以买一个婴儿提篮（Infant Car Seats），和一个1+2+3组的可变座椅（Convertible Car Seats）。婴儿提篮可以让宝宝平躺在提篮里睡觉，到家后，如果宝宝还没睡醒，就把提篮卡扣打开，从汽车座椅上卸下来，直接拎回家，这样就不会打扰宝宝睡觉。</li></ul><h3 id="1-2-汽车接口"><a href="#1-2-汽车接口" class="headerlink" title="1.2 汽车接口"></a>1.2 汽车接口</h3><p>我把汽车接口这个因素放在第二，就是因为这个因素在安全座椅选购当中不是最重要的因素。如果你有耐心阅读下面的文字，又有强迫症一定要汽车和座椅的接口完美匹配，可以把本章读完，涨涨经验。</p><p>如果你没耐心看下面的知识，只要能达到国外法定的安全标准就可以了，那么，买一个功能强大正在促销的就可以了（如本店推荐的Britax Advocate 70），不管你是什么车，都可以用安全带固定它。</p><p>—– 下面开始科普安全座椅接口 —–</p><p>安全座椅分三种固定方式：</p><ul><li>LATCH</li><li>ISOFIX</li><li>安全带</li></ul><p>有的品牌，可能会使用一些自己独创的名词，如标致308，宣传资料说是使用了Tti安全座椅接口，我去车上看过，其实就是LATCH。</p><p>安全座椅接口太专业了，我见过不少网店的卖家错误描述这些概念。例如【洋码头海外旗舰店】：<a href="http://detail.tmall.hk/hk/item.htm?id=21211059448，他说：【最近几年的新车都会有配备儿童安全座椅ISOFIX接口或者LATCH接口，这两种接口其实都是一样的，在美国叫做LATCH，在欧洲叫做ISOFIX】，其实这是完全不正确的说法。" target="_blank" rel="noopener">http://detail.tmall.hk/hk/item.htm?id=21211059448，他说：【最近几年的新车都会有配备儿童安全座椅ISOFIX接口或者LATCH接口，这两种接口其实都是一样的，在美国叫做LATCH，在欧洲叫做ISOFIX】，其实这是完全不正确的说法。</a></p><h4 id="1-2-1-LATCH接口"><a href="#1-2-1-LATCH接口" class="headerlink" title="1.2.1 LATCH接口"></a>1.2.1 LATCH接口</h4><p>LATCH接口是美国标准，从美国买安全座椅，多半情况会买到这个接口的。</p><p>LATCH是兼容ISOFIX的，如果车是LATCH接口的，买LATCH接口或者ISOFIX接口的座椅都可以。</p><p>它是三个固定锚点，比ISOFIX多一个头部固定点（在后排座椅头枕的后面）。</p><h4 id="1-2-2-ISOFIX接口"><a href="#1-2-2-ISOFIX接口" class="headerlink" title="1.2.2 ISOFIX接口"></a>1.2.2 ISOFIX接口</h4><p>ISOFIX是欧洲标准，如果要买ISOFIX接口的座椅，最好是从德国或者英国买。美国网站也有，但款式少一些，优惠幅度应该也不如欧洲。</p><p>ISOFIX接口的汽车，比LATCH接口的少一个固定锚点，因此网上的官方文章都说，ISOFIX的车不能装LATCH的座椅，但在实践中，也可以在ISOFIX的车上使用LATCH的座椅，这是因为：</p><ul><li>可以直接使用安全带固定法。这是合法和安全的</li><li>把LATCH座椅下面的两个带子固定到汽车的ISOFIX接口上之后，再用安全带固定一遍，双保险</li><li>有人在后备箱里找到了一个锚点，把LATCH座椅头部那根带子拉到后备箱去固定了。相当于自己把ISOFIX的车子改造成LATCH接口了（就是有点山寨）</li></ul><h4 id="1-2-3-安全带固定"><a href="#1-2-3-安全带固定" class="headerlink" title="1.2.3 安全带固定"></a>1.2.3 安全带固定</h4><p>有的车子两种接口都没，只能采用安全带固定。几乎所有的安全座椅都支持安全带固定。</p><p>安全带固定也可以上ISOFIX、LATCH同时使用。比方说，车是LATCH接口，买了Britax Advocate 70安全座椅，就可以把LATCH的三个锚点全部接好，同时安全带也绑到安全座椅上去，这样双保险固定后，固若金汤。我就是这么干的</p><h4 id="1-2-4-怎样知道我的车是什么接口"><a href="#1-2-4-怎样知道我的车是什么接口" class="headerlink" title="1.2.4 怎样知道我的车是什么接口"></a>1.2.4 怎样知道我的车是什么接口</h4><ul><li>最保险的办法是去你汽车的后排座椅上看，找到ISOFIX、LATCH的标志和挂钩</li><li>看你的汽车说明书，但要小心，一款车型会有乞丐版、中配版、顶配版、特别版等等很多个版本，不同版本都是共享同一本说明书的，别看错了。或者打汽车品牌官方客服电话问问，不要找4S店客服。</li><li>到汽车类网站上查询参数配置，这种方法准确度最低。网站的资料，准确度存在一些问题，安全座椅在中国是个冷门的东西，汽车网站没有动力把这个资料做得很准确。我就遇到过，汽车之家说本田思域全系标配LATCH接口，而我爬到朋友的车上看，ISOFIX和LATCH都没有。</li></ul><h3 id="1-3-品牌"><a href="#1-3-品牌" class="headerlink" title="1.3 品牌"></a>1.3 品牌</h3><h4 id="1-3-1-美国市场"><a href="#1-3-1-美国市场" class="headerlink" title="1.3.1 美国市场"></a>1.3.1 美国市场</h4><ul><li>Britax，百代适（又译：宝得适），专注母婴的品牌，英国品牌，线上线下都是排名第一的品牌</li><li>Eddie Bauer，埃迪堡，除了母婴，也做衣服鞋子，安全座椅是它收购来的</li><li>Maxi-Cosi，迈可适，荷兰品牌，线下超市和电商有售</li><li>Graco，葛莱，美国品牌，已在广东东莞生产。其鹦鹉螺3合1，常年139美元，适用于20到100磅，以较高的性价比力压Britax排名amazon销售第一</li></ul><h4 id="1-3-2-欧洲市场"><a href="#1-3-2-欧洲市场" class="headerlink" title="1.3.2 欧洲市场"></a>1.3.2 欧洲市场</h4><ul><li>CONCORD，协和/康科德</li><li>RECARO，里卡罗</li><li>STM，斯迪姆</li><li>Kiddy，可迪</li></ul><h2 id="2-海淘费用（适用于美国代购）"><a href="#2-海淘费用（适用于美国代购）" class="headerlink" title="2 海淘费用（适用于美国代购）"></a>2 海淘费用（适用于美国代购）</h2><h3 id="2-1-货款"><a href="#2-1-货款" class="headerlink" title="2.1 货款"></a>2.1 货款</h3><p>货款是通过Master或者Visa在信用卡里扣美元的。所以，货款计算方法是：</p><blockquote><p>美元价格 * 汇率（汇率按1美元=6.1人民币计算）</p></blockquote><h4 id="2-1-1-货物价格查询"><a href="#2-1-1-货物价格查询" class="headerlink" title="2.1.1 货物价格查询"></a>2.1.1 货物价格查询</h4><p>货物美元价格自行到美国网站查询，我一般在amazon, albeebaby买，地址：</p><ul><li><a href="http://www.albeebaby.com/" target="_blank" rel="noopener">http://www.albeebaby.com/</a></li><li><a href="http://www.amazon.com/" target="_blank" rel="noopener">http://www.amazon.com/</a></li></ul><p>要注意，不同花色价格也不同的，特价的时候，通常也不是全部的花色都特价</p><h3 id="2-2-消费税"><a href="#2-2-消费税" class="headerlink" title="2.2 消费税"></a>2.2 消费税</h3><p>消费税跟货款一样，由美国商家通过MasterCard/Visa收取，汇率也是6.1</p><h4 id="2-2-1-免税州"><a href="#2-2-1-免税州" class="headerlink" title="2.2.1 免税州"></a>2.2.1 免税州</h4><p>美国有的州是收消费税的，免税州不收。下单时用哪个州的地址，取决于使用哪个转运公司。我买安全座椅用360hitao，买耳温枪、包鞋子等小件就用友家。</p><p>360hitao有三个仓库，分别是：</p><ul><li>CA（加州），Amazon的货发到CA州收税，奶粉、米粉等食品免税。Albeebaby发到CA州不收税</li><li>DE（特拉华州），这个是免税州。无论哪个网站的东西，发到这里都不收税。这个州最近暴风雪天气，又因为黑五海淘的中国人多，已经爆仓不收货了</li><li>OR（俄勒冈州），这个也是免税州。</li></ul><h4 id="2-2-2-税率"><a href="#2-2-2-税率" class="headerlink" title="2.2.2 税率"></a>2.2.2 税率</h4><p>不同类目消费税也不同，安全座椅大约是9.5%-10%，即一个Britax Advocate 70 G3，在Amazon卖235美元，消费税大约是23美元。</p><p>要知道精确的税是多少，到Amazon上下个单，填一个CA州的收货地址，Amazon会自动把税金算出来，单列，并累加到订单总金额中去的。</p><h4 id="2-2-3-如何避免被税"><a href="#2-2-3-如何避免被税" class="headerlink" title="2.2.3 如何避免被税"></a>2.2.3 如何避免被税</h4><ul><li>在Albeebaby买，发到CA、DE、OR三个州都不收税</li></ul><p>等等，为什么不能在amazon买发到免税州？且看下面的转运费部分，海淘真心比淘宝麻烦多了好嘛 -_-!</p><h3 id="2-3-转运费"><a href="#2-3-转运费" class="headerlink" title="2.3 转运费"></a>2.3 转运费</h3><p>从商家到转运公司仓库，一般是免费的（Albeebaby满49美元免运费，安全座椅都不止49美元），如果达不到网站免运费的条件，就凑齐了再下单吧，习惯了国内的快递费，被美国网站收运费，会非常肉痛的。</p><h4 id="2-3-1-美国-中国转运费"><a href="#2-3-1-美国-中国转运费" class="headerlink" title="2.3.1 美国-中国转运费"></a>2.3.1 美国-中国转运费</h4><p>转运公司按磅计费，一磅是454克，0.454公斤，不足一磅按一磅算。</p><p>360hitao的运费价格在这里查询：<br><a href="http://www.360hitao.com/freight-calculate/?pagetype=fc" target="_blank" rel="noopener">http://www.360hitao.com/freight-calculate/?pagetype=fc</a></p><p>如Britax Advocate 70的重量大概是26磅，黄金卡运费是854.92元。为什么不是标准运费呢？因为花500就可以买个黄金卡了，一个安全座椅的运费铁定超过500，所以，买个黄金卡，再通过支付宝支付剩下的354.92，就可以享受黄金卡的折扣了，可以省165.8元。</p><h4 id="2-3-2-美国境内转运费"><a href="#2-3-2-美国境内转运费" class="headerlink" title="2.3.2 美国境内转运费"></a>2.3.2 美国境内转运费</h4><p>360hitao在美国虽然有3个仓库，但只有CA（加州）的仓库有直飞中国的航班，所以，如果买安全座椅为了省消费税，收货地址写了DE或者OR州，那么就要再付给360hitao一笔美国境内转运费，价格是1美元1磅。一个安全座椅一般是25磅左右。</p><p>对安全座椅来说，这个美国境内转运费都超过消费税了。所以，不值得发免税州。</p><h4 id="2-3-3-体积费"><a href="#2-3-3-体积费" class="headerlink" title="2.3.3 体积费"></a>2.3.3 体积费</h4><p>这个怎么算的我就不详细说了，我直接告诉你结果：安全座椅按体积运费非常非常不划算。360hitao按重收费，不收体积费，这就是我买选360hitao的原因。</p><h4 id="2-3-4-汇率"><a href="#2-3-4-汇率" class="headerlink" title="2.3.4 汇率"></a>2.3.4 汇率</h4><p>转运公司一般是美元报价（也有的人民币双币报价），收人民币（因为海淘的都是国内网民，支付宝收人民币便宜又方便，用Visa、Paypal的话，转运公司又要付一笔手续费）。</p><p>如果你仔细计算，你会发现，转运公司使用的汇率不是6.1，而是高出一些的，例如360hitao就是6.38，去年是6.5，其它转运公司，6.3， 6.4，6.5的都的，6.1的良心企业暂时还没发现。</p><h3 id="2-4-中国海关关税"><a href="#2-4-中国海关关税" class="headerlink" title="2.4 中国海关关税"></a>2.4 中国海关关税</h3><p>安全座椅体积大，货值高，进关几乎必被征税。<br>税金是126人民币，终于不用算汇率了，哦也！</p><p>从海关出来，换成国内快递公司，这个国内快递公司的运费包含在转运公司的转运费里了，不再额外收费。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/how_to_buy_car_seat.md" target="_blank" rel="noopener">https://github.com/qinjx/30min_guides/blob/master/how_to_buy_car_seat.md</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-大小&quot;&gt;&lt;a href=&quot;#1-1-大小&quot; class=&quot;headerlink&quot; title=&quot;1.1 大小&quot;&gt;&lt;/a&gt;1.1 大小&lt;/h3&gt;&lt;p&gt;安全座椅跟衣服和鞋子一样，也分大小和使用年龄的，合适的大小能最好地发挥保护作用。&lt;/p&gt;
&lt;p&gt;按Britax美国的标准，分成以下几种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;婴儿提篮（Infant Car Seats），适用于出生到13公斤&lt;/li&gt;
&lt;li&gt;可变座椅（Convertible Car Seats），适用于出生到32公斤&lt;/li&gt;
&lt;li&gt;增高垫（Booster），适用于11公斤到41公斤&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="个人思考" scheme="https://blackist.org/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>零售行业优惠规则分析</title>
    <link href="https://blackist.org/2019/01/02/public-comsumer-promotion-rule/"/>
    <id>https://blackist.org/2019/01/02/public-comsumer-promotion-rule/</id>
    <published>2019-01-02T07:49:56.000Z</published>
    <updated>2019-06-16T09:47:35.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-优惠规则5要素"><a href="#1-优惠规则5要素" class="headerlink" title="1 优惠规则5要素"></a>1 优惠规则5要素</h2><h3 id="1-1-满足优惠条件的动作"><a href="#1-1-满足优惠条件的动作" class="headerlink" title="1.1 满足优惠条件的动作"></a>1.1 满足优惠条件的动作</h3><p>这个要素，是指触发优惠规则的动作，主要包括买和满两种。</p><p><strong>注</strong>：</p><ul><li>在数学上，买是满的一种特殊情况，只不过做文本串分析时，要同时考虑到这两种文本描述。</li><li>在电商行业，触发优惠的动作还包括：晒单、微博分享、微信关注、给好评、收藏、新用户注册、手机下单等行为，这里我只叙述与商品和订单相关的，与其它行为（注册、营销、手机下单等）相关的暂忽略。</li><li>抽奖，中奖要看运气，所以这时也暂不讨论</li></ul><a id="more"></a><h4 id="1-1-1-买"><a href="#1-1-1-买" class="headerlink" title="1.1.1 买"></a>1.1.1 买</h4><p>只要买就优惠，如买赠（买1送1）、买立减（买此商品立减5元）</p><h4 id="1-1-2-满"><a href="#1-1-2-满" class="headerlink" title="1.1.2 满"></a>1.1.2 满</h4><p>如满88减18</p><h3 id="1-2-优惠条件作用对象"><a href="#1-2-优惠条件作用对象" class="headerlink" title="1.2 优惠条件作用对象"></a>1.2 优惠条件作用对象</h3><p>这个要素，是指满的对象（上文已解释，买其实是满的一种特殊情况，故此处叙述时合并），满什么条件，主要有三种：</p><h4 id="1-2-1-订单金额（抵扣前金额）"><a href="#1-2-1-订单金额（抵扣前金额）" class="headerlink" title="1.2.1 订单金额（抵扣前金额）"></a>1.2.1 订单金额（抵扣前金额）</h4><p>如满88元减18元</p><h4 id="1-2-2-实付金额（抵扣后金额）"><a href="#1-2-2-实付金额（抵扣后金额）" class="headerlink" title="1.2.2 实付金额（抵扣后金额）"></a>1.2.2 实付金额（抵扣后金额）</h4><p>如实付100元再返20元代金券</p><h4 id="1-2-3-商品数量"><a href="#1-2-3-商品数量" class="headerlink" title="1.2.3 商品数量"></a>1.2.3 商品数量</h4><p>如买二送三，满2件每件165元，39元任选三件</p><h3 id="1-3-优惠方式"><a href="#1-3-优惠方式" class="headerlink" title="1.3 优惠方式"></a>1.3 优惠方式</h3><p>这个要素是指，商家以什么方式给予消费者优惠。</p><h4 id="1-3-1-减"><a href="#1-3-1-减" class="headerlink" title="1.3.1 减"></a>1.3.1 减</h4><p>在订单金额中减去部分金额，如满减，买立减，实付减</p><h4 id="1-3-2-折"><a href="#1-3-2-折" class="headerlink" title="1.3.2 折"></a>1.3.2 折</h4><p>订单金额或者商品单价打个折扣。如满188打8折，第二件半价。</p><p>折其实也是减的一种特殊情况，做文本串分析时当两种情况</p><h4 id="1-3-3-送-赠"><a href="#1-3-3-送-赠" class="headerlink" title="1.3.3 送/赠"></a>1.3.3 送/赠</h4><p>订单中赠送，或者订单完成后再赠送。如买1送1，买奶粉送奶瓶，买奶粉送京券</p><h4 id="1-3-4-换购"><a href="#1-3-4-换购" class="headerlink" title="1.3.4 换购"></a>1.3.4 换购</h4><p>满99元即可加1元换购超值礼品</p><h3 id="1-4-回馈内容"><a href="#1-4-回馈内容" class="headerlink" title="1.4 回馈内容"></a>1.4 回馈内容</h3><h4 id="1-4-1-现金"><a href="#1-4-1-现金" class="headerlink" title="1.4.1 现金"></a>1.4.1 现金</h4><ul><li>满减、满折就是减了现金</li></ul><h4 id="1-4-2-可折算成现金几无使用限制的卡-券-积分"><a href="#1-4-2-可折算成现金几无使用限制的卡-券-积分" class="headerlink" title="1.4.2 可折算成现金几无使用限制的卡/券/积分"></a>1.4.2 可折算成现金几无使用限制的卡/券/积分</h4><ul><li>赠送天猫积分、集分宝也等于赠送现金</li><li>京券、京东积分也等于现金</li></ul><h4 id="1-4-3-同主体商品"><a href="#1-4-3-同主体商品" class="headerlink" title="1.4.3 同主体商品"></a>1.4.3 同主体商品</h4><p>这条是指，赠送的商品与消费者购买的商品是同一个商品（可能保质期和生产批次略有不同，但总体上价值是一样的）</p><p>如一号店的德运全脂牛奶，买一升，赠一升，属于赠送同主体的商品。</p><h4 id="1-4-4-其它小赠品"><a href="#1-4-4-其它小赠品" class="headerlink" title="1.4.4 其它小赠品"></a>1.4.4 其它小赠品</h4><p>如买鞋送袜子，买奶粉送奶粉勺。</p><p>把同主体商品拿出来单独说，和其它小赠品区分开，是因为同主体商品有利于计算实际到手价，德运全指牛奶买1送1，就等于是5折了，但如果买1升德运牛奶送5克奥利奥饼干，就不方便衡量饼干的价值进而计算到手价。</p><h4 id="1-4-5-不可折算成现金的卡-券-积分"><a href="#1-4-5-不可折算成现金的卡-券-积分" class="headerlink" title="1.4.5 不可折算成现金的卡/券/积分"></a>1.4.5 不可折算成现金的卡/券/积分</h4><ul><li>送有限制条件的满减券、折扣券</li><li>送一号店积分</li><li>送淘金币</li><li>送航空公司里程等等</li></ul><p>这类回馈有的价值较高（如有限制条件的券），有的如同鸡肋（如淘金币、一号店积分）不好统一衡量价值，也不能拿来参与到手价计算</p><h3 id="1-5-是否有限制"><a href="#1-5-是否有限制" class="headerlink" title="1.5 是否有限制"></a>1.5 是否有限制</h3><p>是否有限制也影响到手价的计算</p><h4 id="1-5-1-有限制"><a href="#1-5-1-有限制" class="headerlink" title="1.5.1 有限制"></a>1.5.1 有限制</h4><ul><li>满150减15，每个订单仅限使用一次</li><li>买1送1，每个收货地址仅限5件</li><li>实付200再返10元，最高返200元</li></ul><h4 id="1-5-2-无限制"><a href="#1-5-2-无限制" class="headerlink" title="1.5.2 无限制"></a>1.5.2 无限制</h4><p>这个不多解释了</p><h2 id="2-常用优惠规则"><a href="#2-常用优惠规则" class="headerlink" title="2 常用优惠规则"></a>2 常用优惠规则</h2><p>上述5个因素，排列组合最多超过200种，但考虑到有些组合不可能存在，如“回馈内容”中的两种“赠品”只可能和“优惠方式”中的“送赠”组合，而不可能和“折、减”组合，实际常用的优惠方式约为几十种（有无限制我就不一一罗列了，读者朋友自行把下面优惠规则总数乘以二）：</p><h3 id="2-1-减折类（6种）"><a href="#2-1-减折类（6种）" class="headerlink" title="2.1 减折类（6种）"></a>2.1 减折类（6种）</h3><p>满折类的优惠条件主要是满N件和满N元，一般不会跟“实付xx元”搭配：</p><ul><li>买立减（买一件）</li><li>买立折（买一件）</li><li>满N件减x元 </li><li>满N件打x折</li><li>满N元减x元</li><li>满N元打x折</li></ul><h4 id="2-2-送（可折算现金）卡-券-积分、不可折算现金的卡-券-积分、其它小赠品（12种）"><a href="#2-2-送（可折算现金）卡-券-积分、不可折算现金的卡-券-积分、其它小赠品（12种）" class="headerlink" title="2.2 送（可折算现金）卡/券/积分、不可折算现金的卡/券/积分、其它小赠品（12种）"></a>2.2 送（可折算现金）卡/券/积分、不可折算现金的卡/券/积分、其它小赠品（12种）</h4><ul><li>买即送（买一件）</li><li>满N件送xx</li><li>满N元送xx</li><li>实付N元送xx</li></ul><p>在有的促销文案里，送虚拟卡券积分也叫满返。</p><p>以上四种场景乘以赠送的三种东西，就是12种。</p><h4 id="2-3-换购（4种）"><a href="#2-3-换购（4种）" class="headerlink" title="2.3 换购（4种）"></a>2.3 换购（4种）</h4><ul><li>买此商品即享换购资格</li><li>满N件即享换购资格</li><li>满N元即享换购资格</li><li>实付N元即享换购资格</li></ul><h4 id="2-4-送同主体商品（3种）"><a href="#2-4-送同主体商品（3种）" class="headerlink" title="2.4 送同主体商品（3种）"></a>2.4 送同主体商品（3种）</h4><ul><li>买N送M</li><li>满N元再送M件</li><li>实付N元再送M件</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/promotion_rule.md" target="_blank" rel="noopener">https://github.com/qinjx/30min_guides/blob/master/promotion_rule.md</a></p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-优惠规则5要素&quot;&gt;&lt;a href=&quot;#1-优惠规则5要素&quot; class=&quot;headerlink&quot; title=&quot;1 优惠规则5要素&quot;&gt;&lt;/a&gt;1 优惠规则5要素&lt;/h2&gt;&lt;h3 id=&quot;1-1-满足优惠条件的动作&quot;&gt;&lt;a href=&quot;#1-1-满足优惠条件的动作&quot; class=&quot;headerlink&quot; title=&quot;1.1 满足优惠条件的动作&quot;&gt;&lt;/a&gt;1.1 满足优惠条件的动作&lt;/h3&gt;&lt;p&gt;这个要素，是指触发优惠规则的动作，主要包括买和满两种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在数学上，买是满的一种特殊情况，只不过做文本串分析时，要同时考虑到这两种文本描述。&lt;/li&gt;
&lt;li&gt;在电商行业，触发优惠的动作还包括：晒单、微博分享、微信关注、给好评、收藏、新用户注册、手机下单等行为，这里我只叙述与商品和订单相关的，与其它行为（注册、营销、手机下单等）相关的暂忽略。&lt;/li&gt;
&lt;li&gt;抽奖，中奖要看运气，所以这时也暂不讨论&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="公共领域" scheme="https://blackist.org/categories/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
    
      <category term="公共领域" scheme="https://blackist.org/tags/%E5%85%AC%E5%85%B1%E9%A2%86%E5%9F%9F/"/>
    
      <category term="个人思考" scheme="https://blackist.org/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
